{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"3923e90ac363fa208efb693349fe217050575d6f","modified":1685680852370},{"_id":"source/_posts/moe-c-lab.md","hash":"89b2866210505cd4ecd2c2c088e0cf211af390e9","modified":1685683639460},{"_id":"source/_posts/moe-container-lab.md","hash":"33766634ea88136e39e317f3dc4bcb431fe69cea","modified":1685615799019},{"_id":"source/_posts/moe-container-sec.md","hash":"6023f660903d4082c30a7219b97f3fc647c476dc","modified":1684242330133},{"_id":"source/_posts/moe-docker-lab.md","hash":"d7b463d076f94461dd252c8f93b27f8cb3475c0f","modified":1685615497310},{"_id":"source/_posts/moe-hexo.md","hash":"72e66f3c59f3f6b693a7ad892a711696307a1464","modified":1685615463810},{"_id":"source/_posts/moe-shell-lab.md","hash":"39fb2e8544b42202f37f0edaf026f7c6ffce63b9","modified":1684242330133},{"_id":"source/_posts/moe-sysfs.md","hash":"b4410126481d8c2e4d95231d9ec5f8f2e2207cc6","modified":1684242330133},{"_id":"source/_posts/moe-termux.md","hash":"5f267987c950136725ade56899292838f98553e8","modified":1684242330133},{"_id":"source/link/index.md","hash":"2c7744919e628d888ebfb1223b2b44e0ef34f533","modified":1684242330133},{"_id":"source/about/index.md","hash":"007bbe593f8f0d9ab752502c73c979a89eeb6110","modified":1685614044107},{"_id":"source/categories/index.md","hash":"cd92bc42ebcc5c8ee593e6b9d6aec1d7d6e4e0a3","modified":1684242330133},{"_id":"source/tags/index.md","hash":"b97250e80c65cdffa839462d143aed070f7a230e","modified":1684242330133},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1685615284051},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"cd3c013dd01d747d9f0611917afdc9406c37c8dc","modified":1685683862174},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"0cd7ccfeb154cd66269a8f053a6611ff93db84de","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"20741046d3c58d059ab0e503e7d569a7fda1baf1","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"9b9c5b8158d1296c64a354e57a3b0b809575a77d","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"e0e52a7ba52fa70c3557f00ddf681f66098ac8b7","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"0b994863599d62c56d2bc50d20b94332ed9d98cf","modified":1685615284111},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"5b9ce449bd4f7e3ba46131546e75976efe31a1f6","modified":1685615284111},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1685615284075},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1685615284111},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1685615284111},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"c63de7ad306943115696555457d58e8bb043f4bf","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"a8720f01c429c839149d7f5991c49541011f4796","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"12a1e92257855cc1a6a48d8eb442472459c88b5e","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1685615284055},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"f5cbd41c6afb49639b59ab5ad659da0d3b7f25dd","modified":1685615284063},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1685615284063},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"d1a5b26c8239189493c1f7d8fd0b8f8ec3d11eaa","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1685615284059},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1685615284063},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1685615284063},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"867b839501d5bbf7ab79da991952d8926f8d8805","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"4e412f6a3e2a9a4855a0c110ace6c1b1c3a88938","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1685615284063},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1685615284063},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"9457b64392014044e9d6fc9145651e940944378a","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1685615284055},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1685615284075},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1685615284055},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"428e3c39053b44760463682848f2eae238ff9d64","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1685615284075},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"51df61ddcaf5b9723efa15f178979f2f0caac413","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"2099b302735146031334f7e133a3a888aeb935dd","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"bd0f7363244eff39a12d1ea658325ddaf5916ccd","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"dd021a44177e2184bbf26e5d2460938841bdb310","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1685615284107},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1685615284051},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1685615284059},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1685615284067},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1685615284075},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":1685615284079},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1685615284091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"662268ed67c85120091a3f076b0fe78cf9614a62","modified":1685615284075},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1685615284083},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"15928e341f5cedaa24a06d6ead16b980a5c6d69c","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1685615284075},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1685615284071},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1685615284087},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1685615284095},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1685615284099},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1685615284103},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1685615284103},{"_id":"public/archives/2023/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685619480130},{"_id":"public/archives/2022/index.html","hash":"32cb9fc480a6887125ec54bd2e96c9affa462617","modified":1685683875442},{"_id":"public/archives/2022/12/index.html","hash":"a86f3d787b4aabc101ce16ece0b9b60a971844bd","modified":1685683875442},{"_id":"public/archives/2023/index.html","hash":"12e885c0b0ee18160c063e9ae4fa963810fd88da","modified":1685683875442},{"_id":"public/archives/2023/04/index.html","hash":"aefe042e50ce0624365e3675c1c41da8db44f4d6","modified":1685683875442},{"_id":"public/link/index.html","hash":"8641a3f993a8d3ed4455870bfdb7202caa737831","modified":1685683875442},{"_id":"public/categories/index.html","hash":"45743e3237f24aa0a1f4a77ce393121429bad6d1","modified":1685683875442},{"_id":"public/about/index.html","hash":"9eb7e4f222db715d84ec95a69f9939c3d651b965","modified":1685683875442},{"_id":"public/tags/index.html","hash":"d04533b0a6e6b510ec6ae02c029e3c828672207d","modified":1685683875442},{"_id":"public/2023/05/31/moe-c-lab/index.html","hash":"a486bfa8886ae9f16a98a7f0b7d18bdc161d7639","modified":1685619580924},{"_id":"public/2022/12/05/moe-container-sec/index.html","hash":"c73408f494d95d44a809710e33ea499691fda31b","modified":1685683875442},{"_id":"public/2023/04/19/moe-sysfs/index.html","hash":"ae24eb763b7de23905a5c1dbb99879bb01ac3116","modified":1685683875442},{"_id":"public/2022/12/04/moe-docker-lab/index.html","hash":"3e71a0b897dc9c0e515d77c62b35c6968c9424e1","modified":1685683875442},{"_id":"public/2022/12/04/moe-container-lab/index.html","hash":"c26f232a18644a093876ab4b300b2de9c5cfff56","modified":1685683875442},{"_id":"public/2022/12/04/moe-termux/index.html","hash":"40ccca3a9b4717b9b4007cdfebb6903f84e798d2","modified":1685683875442},{"_id":"public/2022/12/03/moe-hexo/index.html","hash":"1e8777bf169eb3ad89fa7275fa305b09b69af952","modified":1685683875442},{"_id":"public/2022/12/03/moe-shell-lab/index.html","hash":"2d3941a8f770ab2e805db1876790d6043bf7392b","modified":1685683875442},{"_id":"public/archives/index.html","hash":"ec45ce3a4063312182dc479a0b8c6c0a00106c2b","modified":1685683875442},{"_id":"public/tags/Linux/index.html","hash":"f7cffdf3a9ea93a129dc0a1e1ba90975264d1fef","modified":1685683875442},{"_id":"public/tags/C语言/index.html","hash":"a8bb3075a2d9a462e4df2e426f0341dee20fe351","modified":1685683875442},{"_id":"public/tags/C/index.html","hash":"e671d4b68e685c28d731b3cdd1227bcb3fb9d080","modified":1685683875442},{"_id":"public/tags/container/index.html","hash":"baac4804f05028b82e11cff925c0b1c927582954","modified":1685683875442},{"_id":"public/tags/Docker/index.html","hash":"8783d79b8b60c236fde93ca71f481d77f1d17873","modified":1685683875442},{"_id":"public/tags/Termux/index.html","hash":"7129077a8f96fced4b9b63827b7fa7bb8851b5db","modified":1685683875442},{"_id":"public/tags/hexo/index.html","hash":"43802fffc9bd39f5a07da352c871b1720ff12e6e","modified":1685683875442},{"_id":"public/tags/blog/index.html","hash":"75fc62d716968e83dcf7931e3a4c3f7623cc5fb0","modified":1685683875442},{"_id":"public/tags/Shell/index.html","hash":"5c5c479ba0b8e3c2e5e2477416e34f21b97c4bf5","modified":1685683875442},{"_id":"public/tags/Android/index.html","hash":"b217cc67c2c5b082a1823dedaceade5712a894c6","modified":1685683875442},{"_id":"public/index.html","hash":"1e2b74c3bb32560f5c2189c43e0bb6cc38e20e2e","modified":1685683875442},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1685619317592},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1685619317592},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1685619317592},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685619317592},{"_id":"public/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1685619317592},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1685619317592},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1685619317592},{"_id":"public/css/index.css","hash":"2d2b1620a4551038be58be346cd60460288ae44a","modified":1685619317592},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1685619317592},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1685619317592},{"_id":"public/archives/2023/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685619419987},{"_id":"public/2023/02/28/moe-c-lab/index.html","hash":"3bf2a901cc10fd0c855ec92b97a5cecdb1e5c8e4","modified":1685619419987},{"_id":"public/2023/04/19/moe-c-lab/index.html","hash":"73c990a8ce460d5c9f93d67513b9026a18c21add","modified":1685619456660},{"_id":"public/2023/06/01/moe-c-lab/index.html","hash":"703414cd70e2ca9438fa613cc393cff1d260bce2","modified":1685683875442},{"_id":"public/archives/2023/06/index.html","hash":"461ba010afd7e2928308f4ff768af1f0fa2fe2df","modified":1685683875442}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"欢迎互关喵～","link_list":[{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"}]}]}],"Page":[{"title":"categories","type":"categories","date":"2022-12-03T04:46:13.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ndate: 2022-12-03 12:46:13\n---\n","updated":"2023-05-16T13:05:30.133Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clid27xtx0000vttw2f3icqzl","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover":"/img/cover.jpg","cover_type":"img","excerpt":"","more":""},{"title":"link","type":"link","date":"2022-12-03T04:46:10.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: link\ntype: \"link\"\ndate: 2022-12-03 12:46:10\n---\n","updated":"2023-05-16T13:05:30.133Z","path":"link/index.html","comments":1,"layout":"page","_id":"clid27xu70002vttw1x8obwik","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover":"/img/cover.jpg","cover_type":"img","excerpt":"","more":""},{"title":"about","type":"about","date":"2022-12-03T04:46:15.000Z","_content":"<style>\n.sj{ text-indent:2em}\n</style>\n### 站点介绍：\n<div class=\"sj\">这里是沨鸾的个人博客，个人比较喜欢萌系风格，所以文章会以一只猫猫的口吻去写作，毕竟谁不喜欢一只猫猫呢喵～</div>\n<div class=\"sj\">博客主题色为#FEE4D0，据说是鹿乃的应援色，咱也是个小鹿包呢～</div>\n\n#### 关于著作权：\n<div class=\"sj\">猫猫对于这东西并不敏感，转载文章记得带上猫猫的名字\"Moe-hacker\"就好了，当然你用\"沨鸾\"或者\"萌系黑客会遇到物理panic吗\"这种咱的别称也可以，猫猫不会介意这种形式上的问题的。</div>\n<div class=\"sj\">善良的猫猫认为，只要能帮到大家就好了，毕竟写文章就是为了分享的。</div>\n\n### 自我介绍：\n<div class=\"sj\">自我介绍下，沨鸾又名Moe-hacker，年龄未知，大概三岁左右，性别纸片人，但是偏女，咕咕咕属性严重，日常失踪，作息未知，职业未知，说话习惯带点浓度，要素有时多点也是正常的。</div>\n最后，很高兴认识你，陌生人。\n\n-----------\n\n<p align=\"center\">「見つけてくれてありがとう」</p>\n","source":"about/index.md","raw":"---\ntitle: about \ntype: \"about\" \ndate: 2022-12-03 12:46:15 \n---\n<style>\n.sj{ text-indent:2em}\n</style>\n### 站点介绍：\n<div class=\"sj\">这里是沨鸾的个人博客，个人比较喜欢萌系风格，所以文章会以一只猫猫的口吻去写作，毕竟谁不喜欢一只猫猫呢喵～</div>\n<div class=\"sj\">博客主题色为#FEE4D0，据说是鹿乃的应援色，咱也是个小鹿包呢～</div>\n\n#### 关于著作权：\n<div class=\"sj\">猫猫对于这东西并不敏感，转载文章记得带上猫猫的名字\"Moe-hacker\"就好了，当然你用\"沨鸾\"或者\"萌系黑客会遇到物理panic吗\"这种咱的别称也可以，猫猫不会介意这种形式上的问题的。</div>\n<div class=\"sj\">善良的猫猫认为，只要能帮到大家就好了，毕竟写文章就是为了分享的。</div>\n\n### 自我介绍：\n<div class=\"sj\">自我介绍下，沨鸾又名Moe-hacker，年龄未知，大概三岁左右，性别纸片人，但是偏女，咕咕咕属性严重，日常失踪，作息未知，职业未知，说话习惯带点浓度，要素有时多点也是正常的。</div>\n最后，很高兴认识你，陌生人。\n\n-----------\n\n<p align=\"center\">「見つけてくれてありがとう」</p>\n","updated":"2023-06-01T10:07:24.107Z","path":"about/index.html","comments":1,"layout":"page","_id":"clid27xuc0005vttw8520347t","content":"<style>\n.sj{ text-indent:2em}\n</style>\n<h3 id=\"站点介绍：\"><a href=\"#站点介绍：\" class=\"headerlink\" title=\"站点介绍：\"></a>站点介绍：</h3><div class=\"sj\">这里是沨鸾的个人博客，个人比较喜欢萌系风格，所以文章会以一只猫猫的口吻去写作，毕竟谁不喜欢一只猫猫呢喵～</div>\n<div class=\"sj\">博客主题色为#FEE4D0，据说是鹿乃的应援色，咱也是个小鹿包呢～</div>\n\n<h4 id=\"关于著作权：\"><a href=\"#关于著作权：\" class=\"headerlink\" title=\"关于著作权：\"></a>关于著作权：</h4><div class=\"sj\">猫猫对于这东西并不敏感，转载文章记得带上猫猫的名字\"Moe-hacker\"就好了，当然你用\"沨鸾\"或者\"萌系黑客会遇到物理panic吗\"这种咱的别称也可以，猫猫不会介意这种形式上的问题的。</div>\n<div class=\"sj\">善良的猫猫认为，只要能帮到大家就好了，毕竟写文章就是为了分享的。</div>\n\n<h3 id=\"自我介绍：\"><a href=\"#自我介绍：\" class=\"headerlink\" title=\"自我介绍：\"></a>自我介绍：</h3><div class=\"sj\">自我介绍下，沨鸾又名Moe-hacker，年龄未知，大概三岁左右，性别纸片人，但是偏女，咕咕咕属性严重，日常失踪，作息未知，职业未知，说话习惯带点浓度，要素有时多点也是正常的。</div>\n最后，很高兴认识你，陌生人。\n\n<hr>\n<p align=\"center\">「見つけてくれてありがとう」</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover":"/img/cover.jpg","cover_type":"img","excerpt":"","more":"<style>\n.sj{ text-indent:2em}\n</style>\n<h3 id=\"站点介绍：\"><a href=\"#站点介绍：\" class=\"headerlink\" title=\"站点介绍：\"></a>站点介绍：</h3><div class=\"sj\">这里是沨鸾的个人博客，个人比较喜欢萌系风格，所以文章会以一只猫猫的口吻去写作，毕竟谁不喜欢一只猫猫呢喵～</div>\n<div class=\"sj\">博客主题色为#FEE4D0，据说是鹿乃的应援色，咱也是个小鹿包呢～</div>\n\n<h4 id=\"关于著作权：\"><a href=\"#关于著作权：\" class=\"headerlink\" title=\"关于著作权：\"></a>关于著作权：</h4><div class=\"sj\">猫猫对于这东西并不敏感，转载文章记得带上猫猫的名字\"Moe-hacker\"就好了，当然你用\"沨鸾\"或者\"萌系黑客会遇到物理panic吗\"这种咱的别称也可以，猫猫不会介意这种形式上的问题的。</div>\n<div class=\"sj\">善良的猫猫认为，只要能帮到大家就好了，毕竟写文章就是为了分享的。</div>\n\n<h3 id=\"自我介绍：\"><a href=\"#自我介绍：\" class=\"headerlink\" title=\"自我介绍：\"></a>自我介绍：</h3><div class=\"sj\">自我介绍下，沨鸾又名Moe-hacker，年龄未知，大概三岁左右，性别纸片人，但是偏女，咕咕咕属性严重，日常失踪，作息未知，职业未知，说话习惯带点浓度，要素有时多点也是正常的。</div>\n最后，很高兴认识你，陌生人。\n\n<hr>\n<p align=\"center\">「見つけてくれてありがとう」</p>\n"},{"title":"tags","type":"tags","date":"2022-12-03T04:46:12.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ndate: 2022-12-03 12:46:12\n---\n","updated":"2023-05-16T13:05:30.133Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clid27xue0007vttwbbibhdwu","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover":"/img/cover.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"在Linux下优雅的调试C语言","date":"2023-06-01T08:21:47.000Z","cover":"/img/c-lab.jpg","top_img":"/img/c-lab.jpg","_content":"最近在开发ruri时遇到不少问题，猫猫也是第一次写C，早知道头顶这么发凉就去用某邪教了呜喵～      \n好了好了，C语言还是有许多优点的，只是可能入门成本高些罢了，如果善用测试工具的话还是没有那么糟糕的，话不多说我们开始今天的正文。\n## 首要前提：\n代码没bug的就不要调试了，编程第一法则不就是能跑的代码不要动嘛喵～\n过早的优化是万恶之源，测试时不要开-O3，且尽量使用`-O0 -fno-stack-protector -fno-omit-frame-pointer`来测试。\n那如果有bug呢？\n首先得能过编译器，编译器都报error的代码再高端的调试工具也无能为力。\n然后检查编译器的警告，加上参数`-Wall -Wextra`编译然后查看警告，若是编译器警告都无法修复的话。。。这bug咱别修了吧喵～\n如果编译器不报警呢？\n于是就是今天的主题了--如何面对编译时无法找出的bug。\n## 消极面对：\n部分内存问题可以通过编译器参数被隐藏，编译时加上`-O3 -z noexecstack -z now -fstack-protector-all -fPIE `说不定就能跑了喵～\n好了本文完，下期再见喵～\n桥豆麻袋，自己的项目中的代码肯定不能挖坑埋雷啊喵～\n## 积极面对：\n中国有句古话叫做，食食物者为俊杰，眼下的各种工具，我想一定能找到阁下的bug。\n### 使用clang-tidy检查代码\nclang-tidy是llvm项目的一部分，用于代码静态检测。\n事实上由于clang-tidy过于优秀，大部分简单的bug在这里就会被检测出来，根本用不到运行，当然，它无法检查代码的功能是否可以正确实现。\n基本用法：\n```sh\nclang-tidy xxx.c -- 编译参数\n```\n注意编译参数前的`--`，后面接clang/gcc编译时的参数。\n但是，很多规则不是有用的，比如对strlen.h中函数内存安全的报警就非常多余，甚至clang-tidy会建议使用BSD中的函数替代，对此猫猫建议还是不要建议了。\n因此我们需要关闭部分检测项目。\n使用`--checks=-检测项`来关闭检测项。\nruri中默认关闭的检测项：\n```\n--checks=-clang-analyzer-security.insecureAPI.strcpy,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling \n```\n这样大部分内存泄漏等问题都可以被找出了。\n如果需要更多检测：\n```\n--checks=*\n```\n比如ruri中的strictcheck：\n```\n--checks=*,-clang-analyzer-security.insecureAPI.strcpy,-altera-unroll-loops,-cert-err33-c,-concurrency-mt-unsafe,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-readability-function-cognitive-complexity,-cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers,-misc-no-recursion,-bugprone-easily-swappable-parameters,-readability-identifier-length,-cert-err34-c,-bugprone-assignment-in-if-condition\n```\n目前ruri已经过了这些检测，但愿读者的内存永远不要泄漏喵～\n由于clang-tidy检测项太多，有些是对理解难度甚至是对todo风格等的检查，有些检查根本没法满足比如函数使用嵌套也会有警告，因此检查时需要我们手动对我们认为无效的警告进行过滤。      \n一些有用的警告：      \n数组越界      \n内存泄漏      \n未初始化的指针      \nfree()后还在使用的内存或者使用后没被free()的内存      \n未初始化的变量      \nvoid函数最后的return      \n### 使用ASAN查看内存问题：\nASAN全称Address Sanitizer，是google发明的一种内存地址错误检查器，用于在运行时检测代码内存问题。\n如何使用：\n编译时加入参数`-O0 -fsanitize=address -fno-stack-protector -fno-omit-frame-pointer`\n如果运气好的话，设置环境变量`LSAN_OPTIONS=\"verbosity=1:log_threads=1\" ASAN_OPTIONS=\"verbosity=1\"`，你将看到一片fa的冥场面。\n```log\nSUMMARY: AddressSanitizer: heap-buffer-overflow asan_interceptors.cpp.o in printf_common(void*, char const*, __va_list_tag*)\nShadow bytes around the buggy address:\n  0x0c427fff81d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff81e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff81f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff8200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff8210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c427fff8220:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8230: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8240: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8250: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n```\n貌似还.......挺好看......\n一般来讲出问题的行会在后面汇报。\n注意：建议使用clang-tidy检查有bug的代码，因为一旦内存有问题的话很可能程序不会在出问题那行崩溃。\nASAN面对fork()后的程序貌似有点抽风，猫猫写的代码好不容易跑起来了，结果退出时卡在`sched_yield()`这个系统调用，但是猫猫的程序出口都在main()，子进程最终会执行exec()，所以怀疑是ASAN的问题，猫猫暂时也没能解决呜呜呜～\n在有些教程中ASAN偶尔会配合addr2line使用，猫猫实测貌似也定位不到相关行，或许是猫猫太笨了喵～\n### 使用GDB调试工具\nGDB全称The GNU Project Debugger，是GNU项目的一部分。建议使用来检测代码是否实现而非内存问题，除非clang-tidy无法检测出来。\n在编译时加如参数`-ggdb`，不要开任何优化，然后就可以使用gdb来调试程序了。\n注意，代码里少写两个goto有助于调试，白皮书说C语言提供了可以随意滥用的goto语句，瞧瞧这说的，像话吗喵！！！\n注意，请先使用clang-tidy检查是否有leak of memory，否则你可能会遇上这种冥场面：\n```logs\nBreakpoint 2, check_container (\ncontainer_dir=0x7ffffffdb0 \"./t\") at container.c:601\n601       if (strcmp(container_dir, \"/\") == 0)\n(gdb) c\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000007ff4505a10 in __strlen_aarch64 ()\nfrom /apex/com.android.runtime/lib64/bionic/libc.so\n```\n猫猫甚至还在未初始化内存的结构体中读到过一个ELF，估计是指针指向程序头之类的地方了。\n基本命令：\n```sh\ngdb ./可执行文件\n```\n或者对于运行中的程序：\n```sh\ngdb attach <pid>\n```\n然后你获得了一个这样的终端：\n```\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./ruri...\n(gdb) \n```\n基本命令：\n开始运行程序：\n```\nr 程序的命令行参数\n```\n设置断点：\n```\nb 行号\n```\n继续执行：\n```\nc\n```\n追踪子进程：\n```\nset follow-fork-mode child\n```\n查看当前行号：\n```\nwhere\n```\n查看上面的行：\n```\nup\n```\n打印变量：\n```\np 变量名/表达式\n```\n这个功能真的震惊到猫猫了，因为C语言表达式都能用。\n比如：\n```\n(gdb) p container_info->container_dir\n$1 = 0x7c2ff7ca8500 \"/home/moe-hacker/t\"\n(gdb)\n```\n监控变量：\n```\nwatch 变量名\n```\n两个特殊的breakpoint：\n```\n在入口处：\nb main\n在出口处：\nb exit\n```\n### 使用strace工具：\nstrace全称Linux Syscall Tracer，听名字就知道，用于追踪进程的系统调用。众所周知，进程总要有系统调用，追踪这部分内容有时可以帮助我们发现问题。\n基本用法：\n```\n对于已有进程：\nstrace -p 进程id\n用strace来创建：\nstrace ./可执行文件\n```\n所以猫猫的程序在ASAN下卡在`sched_yield() = 0`是为什么啊喵！！！\n## 总结：\nC语言虽然很容易写出bug，但是善用工具，养成良好的代码风格还是可以避免大部分问题的。还有就是，得会点英语。\n群里曾经有一位萌新问道：\n\"如果我想入门编程语言，学哪种比较好？\"\n大佬答：\"英语\"\n本文完，我们下期再见喵～\nEOF","source":"_posts/moe-c-lab.md","raw":"---\ntitle: 在Linux下优雅的调试C语言\ndate: 2023-06-01 16:21:47\ncover: /img/c-lab.jpg\ntop_img: /img/c-lab.jpg\ntags:\n  - Linux\n  - C语言\n---\n最近在开发ruri时遇到不少问题，猫猫也是第一次写C，早知道头顶这么发凉就去用某邪教了呜喵～      \n好了好了，C语言还是有许多优点的，只是可能入门成本高些罢了，如果善用测试工具的话还是没有那么糟糕的，话不多说我们开始今天的正文。\n## 首要前提：\n代码没bug的就不要调试了，编程第一法则不就是能跑的代码不要动嘛喵～\n过早的优化是万恶之源，测试时不要开-O3，且尽量使用`-O0 -fno-stack-protector -fno-omit-frame-pointer`来测试。\n那如果有bug呢？\n首先得能过编译器，编译器都报error的代码再高端的调试工具也无能为力。\n然后检查编译器的警告，加上参数`-Wall -Wextra`编译然后查看警告，若是编译器警告都无法修复的话。。。这bug咱别修了吧喵～\n如果编译器不报警呢？\n于是就是今天的主题了--如何面对编译时无法找出的bug。\n## 消极面对：\n部分内存问题可以通过编译器参数被隐藏，编译时加上`-O3 -z noexecstack -z now -fstack-protector-all -fPIE `说不定就能跑了喵～\n好了本文完，下期再见喵～\n桥豆麻袋，自己的项目中的代码肯定不能挖坑埋雷啊喵～\n## 积极面对：\n中国有句古话叫做，食食物者为俊杰，眼下的各种工具，我想一定能找到阁下的bug。\n### 使用clang-tidy检查代码\nclang-tidy是llvm项目的一部分，用于代码静态检测。\n事实上由于clang-tidy过于优秀，大部分简单的bug在这里就会被检测出来，根本用不到运行，当然，它无法检查代码的功能是否可以正确实现。\n基本用法：\n```sh\nclang-tidy xxx.c -- 编译参数\n```\n注意编译参数前的`--`，后面接clang/gcc编译时的参数。\n但是，很多规则不是有用的，比如对strlen.h中函数内存安全的报警就非常多余，甚至clang-tidy会建议使用BSD中的函数替代，对此猫猫建议还是不要建议了。\n因此我们需要关闭部分检测项目。\n使用`--checks=-检测项`来关闭检测项。\nruri中默认关闭的检测项：\n```\n--checks=-clang-analyzer-security.insecureAPI.strcpy,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling \n```\n这样大部分内存泄漏等问题都可以被找出了。\n如果需要更多检测：\n```\n--checks=*\n```\n比如ruri中的strictcheck：\n```\n--checks=*,-clang-analyzer-security.insecureAPI.strcpy,-altera-unroll-loops,-cert-err33-c,-concurrency-mt-unsafe,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-readability-function-cognitive-complexity,-cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers,-misc-no-recursion,-bugprone-easily-swappable-parameters,-readability-identifier-length,-cert-err34-c,-bugprone-assignment-in-if-condition\n```\n目前ruri已经过了这些检测，但愿读者的内存永远不要泄漏喵～\n由于clang-tidy检测项太多，有些是对理解难度甚至是对todo风格等的检查，有些检查根本没法满足比如函数使用嵌套也会有警告，因此检查时需要我们手动对我们认为无效的警告进行过滤。      \n一些有用的警告：      \n数组越界      \n内存泄漏      \n未初始化的指针      \nfree()后还在使用的内存或者使用后没被free()的内存      \n未初始化的变量      \nvoid函数最后的return      \n### 使用ASAN查看内存问题：\nASAN全称Address Sanitizer，是google发明的一种内存地址错误检查器，用于在运行时检测代码内存问题。\n如何使用：\n编译时加入参数`-O0 -fsanitize=address -fno-stack-protector -fno-omit-frame-pointer`\n如果运气好的话，设置环境变量`LSAN_OPTIONS=\"verbosity=1:log_threads=1\" ASAN_OPTIONS=\"verbosity=1\"`，你将看到一片fa的冥场面。\n```log\nSUMMARY: AddressSanitizer: heap-buffer-overflow asan_interceptors.cpp.o in printf_common(void*, char const*, __va_list_tag*)\nShadow bytes around the buggy address:\n  0x0c427fff81d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff81e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff81f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff8200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c427fff8210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c427fff8220:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8230: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8240: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8250: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c427fff8270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n```\n貌似还.......挺好看......\n一般来讲出问题的行会在后面汇报。\n注意：建议使用clang-tidy检查有bug的代码，因为一旦内存有问题的话很可能程序不会在出问题那行崩溃。\nASAN面对fork()后的程序貌似有点抽风，猫猫写的代码好不容易跑起来了，结果退出时卡在`sched_yield()`这个系统调用，但是猫猫的程序出口都在main()，子进程最终会执行exec()，所以怀疑是ASAN的问题，猫猫暂时也没能解决呜呜呜～\n在有些教程中ASAN偶尔会配合addr2line使用，猫猫实测貌似也定位不到相关行，或许是猫猫太笨了喵～\n### 使用GDB调试工具\nGDB全称The GNU Project Debugger，是GNU项目的一部分。建议使用来检测代码是否实现而非内存问题，除非clang-tidy无法检测出来。\n在编译时加如参数`-ggdb`，不要开任何优化，然后就可以使用gdb来调试程序了。\n注意，代码里少写两个goto有助于调试，白皮书说C语言提供了可以随意滥用的goto语句，瞧瞧这说的，像话吗喵！！！\n注意，请先使用clang-tidy检查是否有leak of memory，否则你可能会遇上这种冥场面：\n```logs\nBreakpoint 2, check_container (\ncontainer_dir=0x7ffffffdb0 \"./t\") at container.c:601\n601       if (strcmp(container_dir, \"/\") == 0)\n(gdb) c\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000007ff4505a10 in __strlen_aarch64 ()\nfrom /apex/com.android.runtime/lib64/bionic/libc.so\n```\n猫猫甚至还在未初始化内存的结构体中读到过一个ELF，估计是指针指向程序头之类的地方了。\n基本命令：\n```sh\ngdb ./可执行文件\n```\n或者对于运行中的程序：\n```sh\ngdb attach <pid>\n```\n然后你获得了一个这样的终端：\n```\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./ruri...\n(gdb) \n```\n基本命令：\n开始运行程序：\n```\nr 程序的命令行参数\n```\n设置断点：\n```\nb 行号\n```\n继续执行：\n```\nc\n```\n追踪子进程：\n```\nset follow-fork-mode child\n```\n查看当前行号：\n```\nwhere\n```\n查看上面的行：\n```\nup\n```\n打印变量：\n```\np 变量名/表达式\n```\n这个功能真的震惊到猫猫了，因为C语言表达式都能用。\n比如：\n```\n(gdb) p container_info->container_dir\n$1 = 0x7c2ff7ca8500 \"/home/moe-hacker/t\"\n(gdb)\n```\n监控变量：\n```\nwatch 变量名\n```\n两个特殊的breakpoint：\n```\n在入口处：\nb main\n在出口处：\nb exit\n```\n### 使用strace工具：\nstrace全称Linux Syscall Tracer，听名字就知道，用于追踪进程的系统调用。众所周知，进程总要有系统调用，追踪这部分内容有时可以帮助我们发现问题。\n基本用法：\n```\n对于已有进程：\nstrace -p 进程id\n用strace来创建：\nstrace ./可执行文件\n```\n所以猫猫的程序在ASAN下卡在`sched_yield() = 0`是为什么啊喵！！！\n## 总结：\nC语言虽然很容易写出bug，但是善用工具，养成良好的代码风格还是可以避免大部分问题的。还有就是，得会点英语。\n群里曾经有一位萌新问道：\n\"如果我想入门编程语言，学哪种比较好？\"\n大佬答：\"英语\"\n本文完，我们下期再见喵～\nEOF","slug":"moe-c-lab","published":1,"updated":"2023-06-02T05:27:19.460Z","_id":"clid27xu10001vttw41678q2r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在开发ruri时遇到不少问题，猫猫也是第一次写C，早知道头顶这么发凉就去用某邪教了呜喵～<br>好了好了，C语言还是有许多优点的，只是可能入门成本高些罢了，如果善用测试工具的话还是没有那么糟糕的，话不多说我们开始今天的正文。</p>\n<h2 id=\"首要前提：\"><a href=\"#首要前提：\" class=\"headerlink\" title=\"首要前提：\"></a>首要前提：</h2><p>代码没bug的就不要调试了，编程第一法则不就是能跑的代码不要动嘛喵～<br>过早的优化是万恶之源，测试时不要开-O3，且尽量使用<code>-O0 -fno-stack-protector -fno-omit-frame-pointer</code>来测试。<br>那如果有bug呢？<br>首先得能过编译器，编译器都报error的代码再高端的调试工具也无能为力。<br>然后检查编译器的警告，加上参数<code>-Wall -Wextra</code>编译然后查看警告，若是编译器警告都无法修复的话。。。这bug咱别修了吧喵～<br>如果编译器不报警呢？<br>于是就是今天的主题了–如何面对编译时无法找出的bug。</p>\n<h2 id=\"消极面对：\"><a href=\"#消极面对：\" class=\"headerlink\" title=\"消极面对：\"></a>消极面对：</h2><p>部分内存问题可以通过编译器参数被隐藏，编译时加上<code>-O3 -z noexecstack -z now -fstack-protector-all -fPIE </code>说不定就能跑了喵～<br>好了本文完，下期再见喵～<br>桥豆麻袋，自己的项目中的代码肯定不能挖坑埋雷啊喵～</p>\n<h2 id=\"积极面对：\"><a href=\"#积极面对：\" class=\"headerlink\" title=\"积极面对：\"></a>积极面对：</h2><p>中国有句古话叫做，食食物者为俊杰，眼下的各种工具，我想一定能找到阁下的bug。</p>\n<h3 id=\"使用clang-tidy检查代码\"><a href=\"#使用clang-tidy检查代码\" class=\"headerlink\" title=\"使用clang-tidy检查代码\"></a>使用clang-tidy检查代码</h3><p>clang-tidy是llvm项目的一部分，用于代码静态检测。<br>事实上由于clang-tidy过于优秀，大部分简单的bug在这里就会被检测出来，根本用不到运行，当然，它无法检查代码的功能是否可以正确实现。<br>基本用法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang-tidy xxx.c -- 编译参数</span><br></pre></td></tr></table></figure>\n<p>注意编译参数前的<code>--</code>，后面接clang&#x2F;gcc编译时的参数。<br>但是，很多规则不是有用的，比如对strlen.h中函数内存安全的报警就非常多余，甚至clang-tidy会建议使用BSD中的函数替代，对此猫猫建议还是不要建议了。<br>因此我们需要关闭部分检测项目。<br>使用<code>--checks=-检测项</code>来关闭检测项。<br>ruri中默认关闭的检测项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--checks=-clang-analyzer-security.insecureAPI.strcpy,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling </span><br></pre></td></tr></table></figure>\n<p>这样大部分内存泄漏等问题都可以被找出了。<br>如果需要更多检测：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--checks=*</span><br></pre></td></tr></table></figure>\n<p>比如ruri中的strictcheck：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--checks=*,-clang-analyzer-security.insecureAPI.strcpy,-altera-unroll-loops,-cert-err33-c,-concurrency-mt-unsafe,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-readability-function-cognitive-complexity,-cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers,-misc-no-recursion,-bugprone-easily-swappable-parameters,-readability-identifier-length,-cert-err34-c,-bugprone-assignment-in-if-condition</span><br></pre></td></tr></table></figure>\n<p>目前ruri已经过了这些检测，但愿读者的内存永远不要泄漏喵～<br>由于clang-tidy检测项太多，有些是对理解难度甚至是对todo风格等的检查，有些检查根本没法满足比如函数使用嵌套也会有警告，因此检查时需要我们手动对我们认为无效的警告进行过滤。<br>一些有用的警告：<br>数组越界<br>内存泄漏<br>未初始化的指针<br>free()后还在使用的内存或者使用后没被free()的内存<br>未初始化的变量<br>void函数最后的return      </p>\n<h3 id=\"使用ASAN查看内存问题：\"><a href=\"#使用ASAN查看内存问题：\" class=\"headerlink\" title=\"使用ASAN查看内存问题：\"></a>使用ASAN查看内存问题：</h3><p>ASAN全称Address Sanitizer，是google发明的一种内存地址错误检查器，用于在运行时检测代码内存问题。<br>如何使用：<br>编译时加入参数<code>-O0 -fsanitize=address -fno-stack-protector -fno-omit-frame-pointer</code><br>如果运气好的话，设置环境变量<code>LSAN_OPTIONS=&quot;verbosity=1:log_threads=1&quot; ASAN_OPTIONS=&quot;verbosity=1&quot;</code>，你将看到一片fa的冥场面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUMMARY: AddressSanitizer: heap-buffer-overflow asan_interceptors.cpp.o in printf_common(void*, char const*, __va_list_tag*)</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0c427fff81d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff81e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff81f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff8200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff8210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0c427fff8220:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8230: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8240: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8250: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br></pre></td></tr></table></figure>\n<p>貌似还…….挺好看……<br>一般来讲出问题的行会在后面汇报。<br>注意：建议使用clang-tidy检查有bug的代码，因为一旦内存有问题的话很可能程序不会在出问题那行崩溃。<br>ASAN面对fork()后的程序貌似有点抽风，猫猫写的代码好不容易跑起来了，结果退出时卡在<code>sched_yield()</code>这个系统调用，但是猫猫的程序出口都在main()，子进程最终会执行exec()，所以怀疑是ASAN的问题，猫猫暂时也没能解决呜呜呜～<br>在有些教程中ASAN偶尔会配合addr2line使用，猫猫实测貌似也定位不到相关行，或许是猫猫太笨了喵～</p>\n<h3 id=\"使用GDB调试工具\"><a href=\"#使用GDB调试工具\" class=\"headerlink\" title=\"使用GDB调试工具\"></a>使用GDB调试工具</h3><p>GDB全称The GNU Project Debugger，是GNU项目的一部分。建议使用来检测代码是否实现而非内存问题，除非clang-tidy无法检测出来。<br>在编译时加如参数<code>-ggdb</code>，不要开任何优化，然后就可以使用gdb来调试程序了。<br>注意，代码里少写两个goto有助于调试，白皮书说C语言提供了可以随意滥用的goto语句，瞧瞧这说的，像话吗喵！！！<br>注意，请先使用clang-tidy检查是否有leak of memory，否则你可能会遇上这种冥场面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Breakpoint 2, check_container (</span><br><span class=\"line\">container_dir=0x7ffffffdb0 &quot;./t&quot;) at container.c:601</span><br><span class=\"line\">601       if (strcmp(container_dir, &quot;/&quot;) == 0)</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Program received signal SIGSEGV, Segmentation fault.</span><br><span class=\"line\">0x0000007ff4505a10 in __strlen_aarch64 ()</span><br><span class=\"line\">from /apex/com.android.runtime/lib64/bionic/libc.so</span><br></pre></td></tr></table></figure>\n<p>猫猫甚至还在未初始化内存的结构体中读到过一个ELF，估计是指针指向程序头之类的地方了。<br>基本命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./可执行文件</span><br></pre></td></tr></table></figure>\n<p>或者对于运行中的程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb attach &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n<p>然后你获得了一个这样的终端：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For help, type &quot;help&quot;.</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./ruri...</span><br><span class=\"line\">(gdb) </span><br></pre></td></tr></table></figure>\n<p>基本命令：<br>开始运行程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r 程序的命令行参数</span><br></pre></td></tr></table></figure>\n<p>设置断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b 行号</span><br></pre></td></tr></table></figure>\n<p>继续执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c</span><br></pre></td></tr></table></figure>\n<p>追踪子进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set follow-fork-mode child</span><br></pre></td></tr></table></figure>\n<p>查看当前行号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">where</span><br></pre></td></tr></table></figure>\n<p>查看上面的行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">up</span><br></pre></td></tr></table></figure>\n<p>打印变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p 变量名/表达式</span><br></pre></td></tr></table></figure>\n<p>这个功能真的震惊到猫猫了，因为C语言表达式都能用。<br>比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p container_info-&gt;container_dir</span><br><span class=\"line\">$1 = 0x7c2ff7ca8500 &quot;/home/moe-hacker/t&quot;</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<p>监控变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch 变量名</span><br></pre></td></tr></table></figure>\n<p>两个特殊的breakpoint：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在入口处：</span><br><span class=\"line\">b main</span><br><span class=\"line\">在出口处：</span><br><span class=\"line\">b exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用strace工具：\"><a href=\"#使用strace工具：\" class=\"headerlink\" title=\"使用strace工具：\"></a>使用strace工具：</h3><p>strace全称Linux Syscall Tracer，听名字就知道，用于追踪进程的系统调用。众所周知，进程总要有系统调用，追踪这部分内容有时可以帮助我们发现问题。<br>基本用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于已有进程：</span><br><span class=\"line\">strace -p 进程id</span><br><span class=\"line\">用strace来创建：</span><br><span class=\"line\">strace ./可执行文件</span><br></pre></td></tr></table></figure>\n<p>所以猫猫的程序在ASAN下卡在<code>sched_yield() = 0</code>是为什么啊喵！！！</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>C语言虽然很容易写出bug，但是善用工具，养成良好的代码风格还是可以避免大部分问题的。还有就是，得会点英语。<br>群里曾经有一位萌新问道：<br>“如果我想入门编程语言，学哪种比较好？”<br>大佬答：”英语”<br>本文完，我们下期再见喵～<br>EOF</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"欢迎互关喵～","link_list":[{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"}]}]}},"cover_type":"img","excerpt":"","more":"<p>最近在开发ruri时遇到不少问题，猫猫也是第一次写C，早知道头顶这么发凉就去用某邪教了呜喵～<br>好了好了，C语言还是有许多优点的，只是可能入门成本高些罢了，如果善用测试工具的话还是没有那么糟糕的，话不多说我们开始今天的正文。</p>\n<h2 id=\"首要前提：\"><a href=\"#首要前提：\" class=\"headerlink\" title=\"首要前提：\"></a>首要前提：</h2><p>代码没bug的就不要调试了，编程第一法则不就是能跑的代码不要动嘛喵～<br>过早的优化是万恶之源，测试时不要开-O3，且尽量使用<code>-O0 -fno-stack-protector -fno-omit-frame-pointer</code>来测试。<br>那如果有bug呢？<br>首先得能过编译器，编译器都报error的代码再高端的调试工具也无能为力。<br>然后检查编译器的警告，加上参数<code>-Wall -Wextra</code>编译然后查看警告，若是编译器警告都无法修复的话。。。这bug咱别修了吧喵～<br>如果编译器不报警呢？<br>于是就是今天的主题了–如何面对编译时无法找出的bug。</p>\n<h2 id=\"消极面对：\"><a href=\"#消极面对：\" class=\"headerlink\" title=\"消极面对：\"></a>消极面对：</h2><p>部分内存问题可以通过编译器参数被隐藏，编译时加上<code>-O3 -z noexecstack -z now -fstack-protector-all -fPIE </code>说不定就能跑了喵～<br>好了本文完，下期再见喵～<br>桥豆麻袋，自己的项目中的代码肯定不能挖坑埋雷啊喵～</p>\n<h2 id=\"积极面对：\"><a href=\"#积极面对：\" class=\"headerlink\" title=\"积极面对：\"></a>积极面对：</h2><p>中国有句古话叫做，食食物者为俊杰，眼下的各种工具，我想一定能找到阁下的bug。</p>\n<h3 id=\"使用clang-tidy检查代码\"><a href=\"#使用clang-tidy检查代码\" class=\"headerlink\" title=\"使用clang-tidy检查代码\"></a>使用clang-tidy检查代码</h3><p>clang-tidy是llvm项目的一部分，用于代码静态检测。<br>事实上由于clang-tidy过于优秀，大部分简单的bug在这里就会被检测出来，根本用不到运行，当然，它无法检查代码的功能是否可以正确实现。<br>基本用法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang-tidy xxx.c -- 编译参数</span><br></pre></td></tr></table></figure>\n<p>注意编译参数前的<code>--</code>，后面接clang&#x2F;gcc编译时的参数。<br>但是，很多规则不是有用的，比如对strlen.h中函数内存安全的报警就非常多余，甚至clang-tidy会建议使用BSD中的函数替代，对此猫猫建议还是不要建议了。<br>因此我们需要关闭部分检测项目。<br>使用<code>--checks=-检测项</code>来关闭检测项。<br>ruri中默认关闭的检测项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--checks=-clang-analyzer-security.insecureAPI.strcpy,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling </span><br></pre></td></tr></table></figure>\n<p>这样大部分内存泄漏等问题都可以被找出了。<br>如果需要更多检测：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--checks=*</span><br></pre></td></tr></table></figure>\n<p>比如ruri中的strictcheck：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--checks=*,-clang-analyzer-security.insecureAPI.strcpy,-altera-unroll-loops,-cert-err33-c,-concurrency-mt-unsafe,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-readability-function-cognitive-complexity,-cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers,-misc-no-recursion,-bugprone-easily-swappable-parameters,-readability-identifier-length,-cert-err34-c,-bugprone-assignment-in-if-condition</span><br></pre></td></tr></table></figure>\n<p>目前ruri已经过了这些检测，但愿读者的内存永远不要泄漏喵～<br>由于clang-tidy检测项太多，有些是对理解难度甚至是对todo风格等的检查，有些检查根本没法满足比如函数使用嵌套也会有警告，因此检查时需要我们手动对我们认为无效的警告进行过滤。<br>一些有用的警告：<br>数组越界<br>内存泄漏<br>未初始化的指针<br>free()后还在使用的内存或者使用后没被free()的内存<br>未初始化的变量<br>void函数最后的return      </p>\n<h3 id=\"使用ASAN查看内存问题：\"><a href=\"#使用ASAN查看内存问题：\" class=\"headerlink\" title=\"使用ASAN查看内存问题：\"></a>使用ASAN查看内存问题：</h3><p>ASAN全称Address Sanitizer，是google发明的一种内存地址错误检查器，用于在运行时检测代码内存问题。<br>如何使用：<br>编译时加入参数<code>-O0 -fsanitize=address -fno-stack-protector -fno-omit-frame-pointer</code><br>如果运气好的话，设置环境变量<code>LSAN_OPTIONS=&quot;verbosity=1:log_threads=1&quot; ASAN_OPTIONS=&quot;verbosity=1&quot;</code>，你将看到一片fa的冥场面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SUMMARY: AddressSanitizer: heap-buffer-overflow asan_interceptors.cpp.o in printf_common(void*, char const*, __va_list_tag*)</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0c427fff81d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff81e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff81f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff8200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c427fff8210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0c427fff8220:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8230: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8240: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8250: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c427fff8270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br></pre></td></tr></table></figure>\n<p>貌似还…….挺好看……<br>一般来讲出问题的行会在后面汇报。<br>注意：建议使用clang-tidy检查有bug的代码，因为一旦内存有问题的话很可能程序不会在出问题那行崩溃。<br>ASAN面对fork()后的程序貌似有点抽风，猫猫写的代码好不容易跑起来了，结果退出时卡在<code>sched_yield()</code>这个系统调用，但是猫猫的程序出口都在main()，子进程最终会执行exec()，所以怀疑是ASAN的问题，猫猫暂时也没能解决呜呜呜～<br>在有些教程中ASAN偶尔会配合addr2line使用，猫猫实测貌似也定位不到相关行，或许是猫猫太笨了喵～</p>\n<h3 id=\"使用GDB调试工具\"><a href=\"#使用GDB调试工具\" class=\"headerlink\" title=\"使用GDB调试工具\"></a>使用GDB调试工具</h3><p>GDB全称The GNU Project Debugger，是GNU项目的一部分。建议使用来检测代码是否实现而非内存问题，除非clang-tidy无法检测出来。<br>在编译时加如参数<code>-ggdb</code>，不要开任何优化，然后就可以使用gdb来调试程序了。<br>注意，代码里少写两个goto有助于调试，白皮书说C语言提供了可以随意滥用的goto语句，瞧瞧这说的，像话吗喵！！！<br>注意，请先使用clang-tidy检查是否有leak of memory，否则你可能会遇上这种冥场面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Breakpoint 2, check_container (</span><br><span class=\"line\">container_dir=0x7ffffffdb0 &quot;./t&quot;) at container.c:601</span><br><span class=\"line\">601       if (strcmp(container_dir, &quot;/&quot;) == 0)</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Program received signal SIGSEGV, Segmentation fault.</span><br><span class=\"line\">0x0000007ff4505a10 in __strlen_aarch64 ()</span><br><span class=\"line\">from /apex/com.android.runtime/lib64/bionic/libc.so</span><br></pre></td></tr></table></figure>\n<p>猫猫甚至还在未初始化内存的结构体中读到过一个ELF，估计是指针指向程序头之类的地方了。<br>基本命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./可执行文件</span><br></pre></td></tr></table></figure>\n<p>或者对于运行中的程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb attach &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n<p>然后你获得了一个这样的终端：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For help, type &quot;help&quot;.</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from ./ruri...</span><br><span class=\"line\">(gdb) </span><br></pre></td></tr></table></figure>\n<p>基本命令：<br>开始运行程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r 程序的命令行参数</span><br></pre></td></tr></table></figure>\n<p>设置断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b 行号</span><br></pre></td></tr></table></figure>\n<p>继续执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c</span><br></pre></td></tr></table></figure>\n<p>追踪子进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set follow-fork-mode child</span><br></pre></td></tr></table></figure>\n<p>查看当前行号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">where</span><br></pre></td></tr></table></figure>\n<p>查看上面的行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">up</span><br></pre></td></tr></table></figure>\n<p>打印变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p 变量名/表达式</span><br></pre></td></tr></table></figure>\n<p>这个功能真的震惊到猫猫了，因为C语言表达式都能用。<br>比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p container_info-&gt;container_dir</span><br><span class=\"line\">$1 = 0x7c2ff7ca8500 &quot;/home/moe-hacker/t&quot;</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<p>监控变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch 变量名</span><br></pre></td></tr></table></figure>\n<p>两个特殊的breakpoint：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在入口处：</span><br><span class=\"line\">b main</span><br><span class=\"line\">在出口处：</span><br><span class=\"line\">b exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用strace工具：\"><a href=\"#使用strace工具：\" class=\"headerlink\" title=\"使用strace工具：\"></a>使用strace工具：</h3><p>strace全称Linux Syscall Tracer，听名字就知道，用于追踪进程的系统调用。众所周知，进程总要有系统调用，追踪这部分内容有时可以帮助我们发现问题。<br>基本用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于已有进程：</span><br><span class=\"line\">strace -p 进程id</span><br><span class=\"line\">用strace来创建：</span><br><span class=\"line\">strace ./可执行文件</span><br></pre></td></tr></table></figure>\n<p>所以猫猫的程序在ASAN下卡在<code>sched_yield() = 0</code>是为什么啊喵！！！</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>C语言虽然很容易写出bug，但是善用工具，养成良好的代码风格还是可以避免大部分问题的。还有就是，得会点英语。<br>群里曾经有一位萌新问道：<br>“如果我想入门编程语言，学哪种比较好？”<br>大佬答：”英语”<br>本文完，我们下期再见喵～<br>EOF</p>\n"},{"title":"从零开始实现一个Linux容器","date":"2022-12-04T07:05:18.000Z","cover":"/img/container-lab.jpg","top_img":"/img/container-lab.jpg","_content":"## 注意：此文章已过时，新的文章。。。先鸽着\n欢迎来到猫猫的C语言实验室喵！\n## 序言：\n文中所述源码是以MIT协议开源的，本文转载请注明原创作者为Moe-hacker，除此之外无其他要求。\n作者其实想将本文改名为《Re:从零开始的container生活》，不过考虑到搜索引擎可见性就算了吧。\n文章非基础教程，当然写这个容器实现前咱也是零基础的，所以可以放心观看喵～\n有关容器安全原理的具体作用请看咱的另一篇文章：\n[浅谈Linux容器安全：chroot，capability与namespace技术](https://moe-hacker.github.io/2022/12/05/moe-container-sec/)\n文章所有代码均为C语言实现。\n所有代码均为root权限执行。\n内容遵守最简代码原则，尽量以最少的代码展示C语言接口的调用。\n选修部分代码未给出main()函数，请手动添加测试。\n程序完善，异常处理与架构设计在选修章节。\n本文容器目录为/data/alpine，作为最小测试系统。\n文章分必修和选修两个部分，选修部分技术要求可能较高，里面用到的函数未给出详细解说，请自行查看相关文档学习。\n成品展示：[Moe-hacker/ruri](https://github.com/Moe-hacker/ruri)\n## 头文件：\n为了方便(其实是懒)，本文所有C语言代码将共享以下头文件：\n```C\n#define _GNU_SOURCE\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <sched.h>\n#include <dirent.h>\n#include <errno.h>\n#include <linux/stat.h>\n#include <linux/sched.h>\n#include <linux/limits.h>\n#include <sys/prctl.h>\n#include <sys/mount.h>\n#include <sys/stat.h>\n#include <sys/sysmacros.h>\n#include <sys/wait.h>\n#include <sys/ioctl.h>\n#include <sys/types.h>\n#include <sys/capability.h>\n```\n## 必修部分：\n### chroot实现:\nchroot，顾名思义，更改根目录，容器技术的最基本实现。\n演示代码：\n```C\n#define container_dir \"/data/alpine\"\nint main(){\n  chroot(container_dir);\n  char *login[]={\"/bin/su\",\"-\",NULL};\n  execv(login[0],login);\n  return 0;\n}\n```\n在termux中需要在tsu下删除LD_PRELOAD变量执行。\n你已经完成创建了一个基本容器了，很简单吧，让我们继续喵！\n### namespace隔离：\nnamespace技术，linux中的内核隔离技术，可使得进程资源互相隔离。\n此处略有些复杂。\n运行此段代码请确认内核带有PID namespace支持，否则不会生效。\n演示代码为pid namespace的简单利用，实现进程信息隔离。\n演示代码：\n```C\nint main(){\n  unshare(CLONE_NEWPID);\n  int pid=fork();\n  if (pid == 0){\n    mount(\"proc\",\"/proc\",\"proc\",MS_NOSUID|MS_NOEXEC|MS_NODEV,NULL);\n    system(\"/bin/ps -ae\");\n  }\n  waitpid(pid,NULL,0);\n  return 0;\n}\n```\n运行结果：\n```\nPID TTY          TIME CMD\n    1 pts/0    00:00:00 a.out\n    2 pts/0    00:00:00 ps\n```\n可以看到进程信息被隔离。\n注释：\nunshare真正实现隔离后能够不受限制运行命令必须经历一次fork()才能实现，否则容器内部将无法fork出新进程运行命令。\nfork()函数返回值：父进程返回子进程pid，子进程返回0。\nwaitpid()可以避免产生僵尸进程并解决容器中无法获取console的问题。\n/proc由于在namespace创建之前已被挂载，内部进程信息依然可见，故内部需要重新挂载。\n#### 一些可用flags(unshare选项)：\n```\nCLONE_NEWNS\nCLONE_NEWUTS\nCLONE_NEWIPC\nCLONE_NEWPID\nCLONE_NEWCGROUP\nCLONE_NEWTIME\nCLONE_SYSVSEM\nCLONE_FILES\nCLONE_FS\n```\n具体功能请自行查看相关文档，不做过多解释。\n#### moe-container未实现功能：\nCLONE_NEWNET：会导致容器内网络不可用，需手动创建网桥，但用处不大。\nCLONE_NEWUSER：需要usermap映射，但是有capability在，用处貌似也不大？\n相信你已经学会如何将进程自身隔离了，那我们继续吧喵～\n### capability管理：\ncapability，linux内核授予进程的特权，使得进程拥有相应权限。\n演示代码为CAP_SYS_ADMIN权限的移除。\n代码依赖于libcap库，需要添加-lcap参数编译。\n演示代码：\n```C\nint main(){\n  cap_drop_bound(CAP_SYS_ADMIN);\n  system(\"mount / /\");\n  return 0;\n}\n```\n执行结果：\n```\nmount: '/'->'/': Operation not permitted\n```\n可以看到虽然以root权限运行，程序内部依然没有挂载权限。\n原因就是父进程通过cap_drop_bound()函数主动放弃了挂载相应的特权。\n以上是基于事实验证的结论，让我们也来康一康理论验证：\n```C\nint main(){\n  printf(\"drop前的进程权限：\\n\");\n  system(\"cat /proc/self/status|grep Cap\");\n  printf(\"\\n\");\n  cap_drop_bound(CAP_SYS_ADMIN);\n  cap_drop_bound(CAP_SYS_MODULE);\n  cap_drop_bound(CAP_SYS_RAWIO);\n  cap_drop_bound(CAP_SYS_PACCT);\n  cap_drop_bound(CAP_SYS_NICE);\n  cap_drop_bound(CAP_SYS_RESOURCE);\n  cap_drop_bound(CAP_SYS_TTY_CONFIG);\n  cap_drop_bound(CAP_AUDIT_CONTROL);\n  cap_drop_bound(CAP_MAC_OVERRIDE);\n  cap_drop_bound(CAP_MAC_ADMIN);\n  cap_drop_bound(CAP_NET_ADMIN);\n  cap_drop_bound(CAP_SYSLOG);\n  cap_drop_bound(CAP_DAC_READ_SEARCH);\n  cap_drop_bound(CAP_LINUX_IMMUTABLE);\n  cap_drop_bound(CAP_NET_BROADCAST);\n  cap_drop_bound(CAP_IPC_LOCK);\n  cap_drop_bound(CAP_IPC_OWNER);\n  cap_drop_bound(CAP_SYS_PTRACE);\n  cap_drop_bound(CAP_SYS_BOOT);\n  cap_drop_bound(CAP_LEASE);\n  cap_drop_bound(CAP_WAKE_ALARM);\n  cap_drop_bound(CAP_BLOCK_SUSPEND);\n  cap_drop_bound(CAP_SYS_CHROOT);\n  cap_drop_bound(CAP_SETPCAP);\n  cap_drop_bound(CAP_MKNOD);\n  cap_drop_bound(CAP_AUDIT_WRITE);\n  cap_drop_bound(CAP_CHOWN);\n  cap_drop_bound(CAP_NET_RAW);\n  cap_drop_bound(CAP_DAC_OVERRIDE);\n  cap_drop_bound(CAP_FOWNER);\n  cap_drop_bound(CAP_FSETID);\n  cap_drop_bound(CAP_KILL);\n  cap_drop_bound(CAP_SETGID);\n  cap_drop_bound(CAP_NET_BIND_SERVICE);\n  cap_drop_bound(CAP_SETFCAP);\n  cap_drop_bound(CAP_SETUID);\n  cap_drop_bound(CAP_SYS_TIME);\n  cap_drop_bound(CAP_AUDIT_READ);\n  cap_drop_bound(CAP_PERFMON);\n  cap_drop_bound(CAP_BPF);\n  cap_drop_bound(CAP_CHECKPOINT_RESTORE);\n  printf(\"drop后的进程权限：\\n\");\n  system(\"cat /proc/self/status|grep Cap\");\n}\n```\n执行结果：\n```text\ndrop前的进程权限：\nCapInh: 0000000000000000\nCapPrm: 000001ffffffffff\nCapEff: 000001ffffffffff\nCapBnd: 000001ffffffffff\nCapAmb: 0000000000000000\n\ndrop后的进程权限：\nCapInh: 0000000000000000\nCapPrm: 0000000000000000\nCapEff: 0000000000000000\nCapBnd: 0000000000000000\nCapAmb: 0000000000000000\n```\n直接干翻了所有权限喵～\n具体哪些权限需要移除，那些权限保留可以参照docker的实现。\n好哎！容器基本原理你已经学会了，是时候为你的容器程序添砖加瓦了。\n## 选修部分：\n必修课已经学习完毕了，是时候学习一些新的东西了喵！\n### 异常捕获：\n大多函数都会定义有异常返回，作为是否执行成功的标志，你需要定义出现异常后所要执行的内容而不是出了bug不知道哪里有问题。\nC语言默认没有bool类型，异常返回值一般为int型。\n#### 重点函数unshare()和exec()的异常捕获：\n若出现异常，这两个函数均会返回-1。\nunshare异常大概率是由于内核不支持，输出警告即可。\n如下面这段所示：\n```C\nif(unshare(CLONE_NEWNS) == -1){\n  printf(\"\\033[33mWarning: seems that mount namespace is not supported on this device\\033[0m\\n\");\n}\n```\nexec()函数大概率由于容器内su程序并不存在报错，为异常。\n如下面这段所示：\n```C\nif (execv(login[0],login) == -1){\n  fprintf(stderr,\"\\033[31mFailed to execute `/bin/su`\\n\");\n  fprintf(stderr,\"execv() returned: %d\\n\",errno);\n  fprintf(stderr,\"error reason: %s\\033[0m\\n\",strerror(errno));\n  exit(1);\n}\n```\n### 环境检查：\n#### termux兼容：\ntermux中默认存在LD_PRELOAD变量，会导致exec()函数由于依赖库不同无法执行容器内命令。\n解决方法：\n```C\nchar *ld_preload=getenv(\"LD_PRELOAD\");\nif(ld_preload != NULL){\n  fprintf(stderr,\"\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n\");\n  exit(1);\n}\n```\n#### 权限检查：\n容器需要以特权创建，否则会运行失败。\n解决方法：\n```C\nif (getuid() != 0){\n  fprintf(stderr,\"\\033[31mError: this program should be run with root privileges !\\033[0m\\n\");\n  exit(1);\n}\n```\n#### 容器目录存在检查：\n容器目录不存在会导致chroot()函数失败，检查方法：\n```C\nDIR *direxist;\nif((direxist=opendir(container_dir)) == NULL){\n  fprintf(stderr,\"\\033[31mError: container directory does not exist !\\033[0m\\n\");\n  exit(1);\n}else{\n  closedir(direxist);\n}\n```\n### 参数获取：\n这段嵌套偏绕，方法有点笨，但是好用。\nmain()函数加入int argc,char **argv两个参数。\n然后：\n```C\nchar *container_dir=NULL;\nfor (int arg=1;arg<argc;arg++){\n  switch(argv[arg][0]){\n    case '-' :\n      switch(argv[arg][1]){\n        case 'v':\n          printf(\"发现参数-v了喵！\\n\");\n          exit(0);\n        default:\n          fprintf(stderr,\"%s%s%s\\033[0m\\n\",\"\\033[31mError: unknow option `\",argv[arg],\"`\");\n    }\n    case '/':\n    case '.':\n      printf(\"%s%s\\n\",\"容器目录为\",argv[arg]);\n      container_dir=argv[arg];\n      break;\n    default:\n      fprintf(stderr,\"%s%s%s\\033[0m\\n\",\"\\033[31mError: unknow option `\",argv[arg],\"`\");\n      exit(1);\n  }\n}\nif (!container_dir){\n  fprintf(stderr,\"\\033[31mError: container directory is not set !\\033[0m\\n\");\n  exit(1);\n}\n```\n注意break就行了。\n这段代码功能有：\n- 获取参数 -v\n- 获取合法容器路径并记录到指针container_dir\n- 若参数异常自动退出\n\n于是你学会了参数获取，让我们继续。\n### 容器目录自动挂载：\n容器内部需要挂载系统运行时所需目录，否则无法正常运行。\nproc目录挂载前记得先umount两次。\nsys直接挂载。\ndev挂载为tmpfs，里面的设备可以根据docker普通容器设备列表进行映射和权限更改。\n实现示例：\n```C\nmkdir(\"/dev\",S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);\nmount(\"tmpfs\",\"/dev\",\"tmpfs\",MS_NOSUID,\"size=65536k,mode=755\");\nmkdir(\"/dev/pts\",S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);\nmount(\"devpts\",\"/dev/pts\",\"devpts\",0,\"gid=4,mode=620\");\nint dev;\ndev=makedev(1,3);\nmknod(\"/dev/null\",S_IFCHR,dev);\nchmod(\"/dev/null\",S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);\nsymlink(\"/proc/self/fd\",\"/dev/fd\");\n```\n具体实现请自行查看moe-container代码及里面的英文注释，懒得翻译回来了。\n于是你学会了所有文件系统挂载所需要的知识。\n### 其他函数定义：\n你可能需要show_helps()和show_version_info()函数来完善你的程序。\n当然猫猫还定义了一个show_greetings()函数作为彩蛋。\n### 于是，你也完成了你自己的完整容器实现。\n## 附加知识：\n### 进程名修改：\n```C\nprctl(PR_SET_NAME,\"moe_container\",NULL,NULL,NULL);\n```\n这样无论编译出的文件名称是什么，进程名都会被程序自身重命名为moe_container。\n### 宏定义：\n移除capability和调用unshare那段，可以在宏中为具体选项定义一个开关，1为开0为关，这样就可以编辑头文件来获得更丰富的自定义了。\n### clang编译相关：\n#### 优化参数：\n-O3用于开启最高优化支持。\n#### 安全相关：\n-z noexecstack -z now -fstack-protector-all -fPIE -pie\n具体能不能用到猫猫也不知道，但是加上也没害处。\n#### 静态编译：\n静态编译可以让程序自己包含自己的依赖库，从而不需要外部依赖，以提供更好的系统兼容性。\n-static选项用于开启静态编译，你需要提前安装静态依赖库。\ntermux中需要-ffunction-sections -fdata-sections -Wl,--gc-sections参数来解决编译出的程序无法运行的问题。\n### Makefile编写：\n贴出猫猫的Makefile，相信你基本能看懂：\n```makefile\nall :\n        cc -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE -pie container.c -o container\n        strip container\nno :\n        cc -lcap container.c -o container\nstatic :\n        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container\n        strip container\nstaticfail :\n        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container ./libcap.a\n        strip container\ninstall :all\n        install -m 777 container ${PREFIX}/bin/container\nclean :\n        rm container||true\n        rm libcap.a||true\nhelp :\n        @printf \"\\033[1;38;2;254;228;208mUsage:\\n\"\n        @echo \"  make all        :compile\"\n        @echo \"  make install    :make all and install container to \\$$PREFIX\"\n        @echo \"  make static     :static compile\"\n        @echo \"  make staticfail :static compile,fix errors\"\n        @echo \"  make no         :compile without optimizations\"\n        @echo \"  make clean      :clean\"\n        @echo \"Dependent libraries:\"\n        @echo \"  libc-client-static,libcap-static\"\n        @printf \"If you got errors like \\`undefined symbol: cap_drop_bound\\` or \\`undefined reference to \\`cap_set_flag' when using static compile,please copy your \\`libcap.a\\` into current directory and use \\`make staticfail\\` instead\\n\\033[0m\"\n\n```\n### 一个chroot命令的简单实现：\n在群里吹水时写的，没啥大用但舍不得删了，就放在这里吧：\n头文件依然遵循共享原则(懒死猫猫算了)\n```C\nint main(int argc,char **argv){\n  if (getuid() != 0){\n    fprintf(stderr,\"\\033[31mError: this program should be run with root privileges !\\033[0m\\n\");\n    exit(1);\n  }\n  if (argc <= 1){\n    fprintf(stderr,\"\\033[31mError: too few arguments !\\033[0m\\n\");\n    exit(1);\n  }\n  char *ld_preload=getenv(\"LD_PRELOAD\");\n  if(ld_preload != NULL){\n    fprintf(stderr,\"\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n\");\n    exit(1);\n  }\n  char *container_dir=argv[1];\n  char *login[1024]={0};\n  if (argc==2){\n    login[0]=\"/bin/su\";\n    login[1]=\"-\";\n    login[2]=NULL;\n  }else{\n    int login_arg=0;\n    for (int arg=2;arg<argc;arg++){\n      login_arg=arg-2;\n      login[login_arg]=argv[arg];\n    }\n    login_arg+=1;\n    login[login_arg]=NULL;\n  }\n  DIR *direxist;\n  if((direxist=opendir(container_dir)) == NULL){\n    fprintf(stderr,\"\\033[31mError: container directory does not exist !\\033[0m\\n\");\n    exit(1);\n  }else{\n    closedir(direxist);\n  }\n  chroot(container_dir);\n  if (execv(login[0],login) == -1){\n    fprintf(stderr,\"\\033[31mFailed to execute `/bin/su`\\n\");\n    fprintf(stderr,\"execv() returned: %d\\n\",errno);\n    fprintf(stderr,\"error reason: %s\\033[0m\\n\",strerror(errno));\n    exit(1);\n  }\n}\n\n```\n本不想声明著作权的，但又担心有人偷猫猫辛苦写出来的东西。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","source":"_posts/moe-container-lab.md","raw":"---\ntitle: 从零开始实现一个Linux容器\ndate: 2022-12-04 15:05:18\ntags:\n  - Linux\n  - C\n  - container\ncover: /img/container-lab.jpg\ntop_img: /img/container-lab.jpg\n---\n## 注意：此文章已过时，新的文章。。。先鸽着\n欢迎来到猫猫的C语言实验室喵！\n## 序言：\n文中所述源码是以MIT协议开源的，本文转载请注明原创作者为Moe-hacker，除此之外无其他要求。\n作者其实想将本文改名为《Re:从零开始的container生活》，不过考虑到搜索引擎可见性就算了吧。\n文章非基础教程，当然写这个容器实现前咱也是零基础的，所以可以放心观看喵～\n有关容器安全原理的具体作用请看咱的另一篇文章：\n[浅谈Linux容器安全：chroot，capability与namespace技术](https://moe-hacker.github.io/2022/12/05/moe-container-sec/)\n文章所有代码均为C语言实现。\n所有代码均为root权限执行。\n内容遵守最简代码原则，尽量以最少的代码展示C语言接口的调用。\n选修部分代码未给出main()函数，请手动添加测试。\n程序完善，异常处理与架构设计在选修章节。\n本文容器目录为/data/alpine，作为最小测试系统。\n文章分必修和选修两个部分，选修部分技术要求可能较高，里面用到的函数未给出详细解说，请自行查看相关文档学习。\n成品展示：[Moe-hacker/ruri](https://github.com/Moe-hacker/ruri)\n## 头文件：\n为了方便(其实是懒)，本文所有C语言代码将共享以下头文件：\n```C\n#define _GNU_SOURCE\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <sched.h>\n#include <dirent.h>\n#include <errno.h>\n#include <linux/stat.h>\n#include <linux/sched.h>\n#include <linux/limits.h>\n#include <sys/prctl.h>\n#include <sys/mount.h>\n#include <sys/stat.h>\n#include <sys/sysmacros.h>\n#include <sys/wait.h>\n#include <sys/ioctl.h>\n#include <sys/types.h>\n#include <sys/capability.h>\n```\n## 必修部分：\n### chroot实现:\nchroot，顾名思义，更改根目录，容器技术的最基本实现。\n演示代码：\n```C\n#define container_dir \"/data/alpine\"\nint main(){\n  chroot(container_dir);\n  char *login[]={\"/bin/su\",\"-\",NULL};\n  execv(login[0],login);\n  return 0;\n}\n```\n在termux中需要在tsu下删除LD_PRELOAD变量执行。\n你已经完成创建了一个基本容器了，很简单吧，让我们继续喵！\n### namespace隔离：\nnamespace技术，linux中的内核隔离技术，可使得进程资源互相隔离。\n此处略有些复杂。\n运行此段代码请确认内核带有PID namespace支持，否则不会生效。\n演示代码为pid namespace的简单利用，实现进程信息隔离。\n演示代码：\n```C\nint main(){\n  unshare(CLONE_NEWPID);\n  int pid=fork();\n  if (pid == 0){\n    mount(\"proc\",\"/proc\",\"proc\",MS_NOSUID|MS_NOEXEC|MS_NODEV,NULL);\n    system(\"/bin/ps -ae\");\n  }\n  waitpid(pid,NULL,0);\n  return 0;\n}\n```\n运行结果：\n```\nPID TTY          TIME CMD\n    1 pts/0    00:00:00 a.out\n    2 pts/0    00:00:00 ps\n```\n可以看到进程信息被隔离。\n注释：\nunshare真正实现隔离后能够不受限制运行命令必须经历一次fork()才能实现，否则容器内部将无法fork出新进程运行命令。\nfork()函数返回值：父进程返回子进程pid，子进程返回0。\nwaitpid()可以避免产生僵尸进程并解决容器中无法获取console的问题。\n/proc由于在namespace创建之前已被挂载，内部进程信息依然可见，故内部需要重新挂载。\n#### 一些可用flags(unshare选项)：\n```\nCLONE_NEWNS\nCLONE_NEWUTS\nCLONE_NEWIPC\nCLONE_NEWPID\nCLONE_NEWCGROUP\nCLONE_NEWTIME\nCLONE_SYSVSEM\nCLONE_FILES\nCLONE_FS\n```\n具体功能请自行查看相关文档，不做过多解释。\n#### moe-container未实现功能：\nCLONE_NEWNET：会导致容器内网络不可用，需手动创建网桥，但用处不大。\nCLONE_NEWUSER：需要usermap映射，但是有capability在，用处貌似也不大？\n相信你已经学会如何将进程自身隔离了，那我们继续吧喵～\n### capability管理：\ncapability，linux内核授予进程的特权，使得进程拥有相应权限。\n演示代码为CAP_SYS_ADMIN权限的移除。\n代码依赖于libcap库，需要添加-lcap参数编译。\n演示代码：\n```C\nint main(){\n  cap_drop_bound(CAP_SYS_ADMIN);\n  system(\"mount / /\");\n  return 0;\n}\n```\n执行结果：\n```\nmount: '/'->'/': Operation not permitted\n```\n可以看到虽然以root权限运行，程序内部依然没有挂载权限。\n原因就是父进程通过cap_drop_bound()函数主动放弃了挂载相应的特权。\n以上是基于事实验证的结论，让我们也来康一康理论验证：\n```C\nint main(){\n  printf(\"drop前的进程权限：\\n\");\n  system(\"cat /proc/self/status|grep Cap\");\n  printf(\"\\n\");\n  cap_drop_bound(CAP_SYS_ADMIN);\n  cap_drop_bound(CAP_SYS_MODULE);\n  cap_drop_bound(CAP_SYS_RAWIO);\n  cap_drop_bound(CAP_SYS_PACCT);\n  cap_drop_bound(CAP_SYS_NICE);\n  cap_drop_bound(CAP_SYS_RESOURCE);\n  cap_drop_bound(CAP_SYS_TTY_CONFIG);\n  cap_drop_bound(CAP_AUDIT_CONTROL);\n  cap_drop_bound(CAP_MAC_OVERRIDE);\n  cap_drop_bound(CAP_MAC_ADMIN);\n  cap_drop_bound(CAP_NET_ADMIN);\n  cap_drop_bound(CAP_SYSLOG);\n  cap_drop_bound(CAP_DAC_READ_SEARCH);\n  cap_drop_bound(CAP_LINUX_IMMUTABLE);\n  cap_drop_bound(CAP_NET_BROADCAST);\n  cap_drop_bound(CAP_IPC_LOCK);\n  cap_drop_bound(CAP_IPC_OWNER);\n  cap_drop_bound(CAP_SYS_PTRACE);\n  cap_drop_bound(CAP_SYS_BOOT);\n  cap_drop_bound(CAP_LEASE);\n  cap_drop_bound(CAP_WAKE_ALARM);\n  cap_drop_bound(CAP_BLOCK_SUSPEND);\n  cap_drop_bound(CAP_SYS_CHROOT);\n  cap_drop_bound(CAP_SETPCAP);\n  cap_drop_bound(CAP_MKNOD);\n  cap_drop_bound(CAP_AUDIT_WRITE);\n  cap_drop_bound(CAP_CHOWN);\n  cap_drop_bound(CAP_NET_RAW);\n  cap_drop_bound(CAP_DAC_OVERRIDE);\n  cap_drop_bound(CAP_FOWNER);\n  cap_drop_bound(CAP_FSETID);\n  cap_drop_bound(CAP_KILL);\n  cap_drop_bound(CAP_SETGID);\n  cap_drop_bound(CAP_NET_BIND_SERVICE);\n  cap_drop_bound(CAP_SETFCAP);\n  cap_drop_bound(CAP_SETUID);\n  cap_drop_bound(CAP_SYS_TIME);\n  cap_drop_bound(CAP_AUDIT_READ);\n  cap_drop_bound(CAP_PERFMON);\n  cap_drop_bound(CAP_BPF);\n  cap_drop_bound(CAP_CHECKPOINT_RESTORE);\n  printf(\"drop后的进程权限：\\n\");\n  system(\"cat /proc/self/status|grep Cap\");\n}\n```\n执行结果：\n```text\ndrop前的进程权限：\nCapInh: 0000000000000000\nCapPrm: 000001ffffffffff\nCapEff: 000001ffffffffff\nCapBnd: 000001ffffffffff\nCapAmb: 0000000000000000\n\ndrop后的进程权限：\nCapInh: 0000000000000000\nCapPrm: 0000000000000000\nCapEff: 0000000000000000\nCapBnd: 0000000000000000\nCapAmb: 0000000000000000\n```\n直接干翻了所有权限喵～\n具体哪些权限需要移除，那些权限保留可以参照docker的实现。\n好哎！容器基本原理你已经学会了，是时候为你的容器程序添砖加瓦了。\n## 选修部分：\n必修课已经学习完毕了，是时候学习一些新的东西了喵！\n### 异常捕获：\n大多函数都会定义有异常返回，作为是否执行成功的标志，你需要定义出现异常后所要执行的内容而不是出了bug不知道哪里有问题。\nC语言默认没有bool类型，异常返回值一般为int型。\n#### 重点函数unshare()和exec()的异常捕获：\n若出现异常，这两个函数均会返回-1。\nunshare异常大概率是由于内核不支持，输出警告即可。\n如下面这段所示：\n```C\nif(unshare(CLONE_NEWNS) == -1){\n  printf(\"\\033[33mWarning: seems that mount namespace is not supported on this device\\033[0m\\n\");\n}\n```\nexec()函数大概率由于容器内su程序并不存在报错，为异常。\n如下面这段所示：\n```C\nif (execv(login[0],login) == -1){\n  fprintf(stderr,\"\\033[31mFailed to execute `/bin/su`\\n\");\n  fprintf(stderr,\"execv() returned: %d\\n\",errno);\n  fprintf(stderr,\"error reason: %s\\033[0m\\n\",strerror(errno));\n  exit(1);\n}\n```\n### 环境检查：\n#### termux兼容：\ntermux中默认存在LD_PRELOAD变量，会导致exec()函数由于依赖库不同无法执行容器内命令。\n解决方法：\n```C\nchar *ld_preload=getenv(\"LD_PRELOAD\");\nif(ld_preload != NULL){\n  fprintf(stderr,\"\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n\");\n  exit(1);\n}\n```\n#### 权限检查：\n容器需要以特权创建，否则会运行失败。\n解决方法：\n```C\nif (getuid() != 0){\n  fprintf(stderr,\"\\033[31mError: this program should be run with root privileges !\\033[0m\\n\");\n  exit(1);\n}\n```\n#### 容器目录存在检查：\n容器目录不存在会导致chroot()函数失败，检查方法：\n```C\nDIR *direxist;\nif((direxist=opendir(container_dir)) == NULL){\n  fprintf(stderr,\"\\033[31mError: container directory does not exist !\\033[0m\\n\");\n  exit(1);\n}else{\n  closedir(direxist);\n}\n```\n### 参数获取：\n这段嵌套偏绕，方法有点笨，但是好用。\nmain()函数加入int argc,char **argv两个参数。\n然后：\n```C\nchar *container_dir=NULL;\nfor (int arg=1;arg<argc;arg++){\n  switch(argv[arg][0]){\n    case '-' :\n      switch(argv[arg][1]){\n        case 'v':\n          printf(\"发现参数-v了喵！\\n\");\n          exit(0);\n        default:\n          fprintf(stderr,\"%s%s%s\\033[0m\\n\",\"\\033[31mError: unknow option `\",argv[arg],\"`\");\n    }\n    case '/':\n    case '.':\n      printf(\"%s%s\\n\",\"容器目录为\",argv[arg]);\n      container_dir=argv[arg];\n      break;\n    default:\n      fprintf(stderr,\"%s%s%s\\033[0m\\n\",\"\\033[31mError: unknow option `\",argv[arg],\"`\");\n      exit(1);\n  }\n}\nif (!container_dir){\n  fprintf(stderr,\"\\033[31mError: container directory is not set !\\033[0m\\n\");\n  exit(1);\n}\n```\n注意break就行了。\n这段代码功能有：\n- 获取参数 -v\n- 获取合法容器路径并记录到指针container_dir\n- 若参数异常自动退出\n\n于是你学会了参数获取，让我们继续。\n### 容器目录自动挂载：\n容器内部需要挂载系统运行时所需目录，否则无法正常运行。\nproc目录挂载前记得先umount两次。\nsys直接挂载。\ndev挂载为tmpfs，里面的设备可以根据docker普通容器设备列表进行映射和权限更改。\n实现示例：\n```C\nmkdir(\"/dev\",S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);\nmount(\"tmpfs\",\"/dev\",\"tmpfs\",MS_NOSUID,\"size=65536k,mode=755\");\nmkdir(\"/dev/pts\",S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);\nmount(\"devpts\",\"/dev/pts\",\"devpts\",0,\"gid=4,mode=620\");\nint dev;\ndev=makedev(1,3);\nmknod(\"/dev/null\",S_IFCHR,dev);\nchmod(\"/dev/null\",S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);\nsymlink(\"/proc/self/fd\",\"/dev/fd\");\n```\n具体实现请自行查看moe-container代码及里面的英文注释，懒得翻译回来了。\n于是你学会了所有文件系统挂载所需要的知识。\n### 其他函数定义：\n你可能需要show_helps()和show_version_info()函数来完善你的程序。\n当然猫猫还定义了一个show_greetings()函数作为彩蛋。\n### 于是，你也完成了你自己的完整容器实现。\n## 附加知识：\n### 进程名修改：\n```C\nprctl(PR_SET_NAME,\"moe_container\",NULL,NULL,NULL);\n```\n这样无论编译出的文件名称是什么，进程名都会被程序自身重命名为moe_container。\n### 宏定义：\n移除capability和调用unshare那段，可以在宏中为具体选项定义一个开关，1为开0为关，这样就可以编辑头文件来获得更丰富的自定义了。\n### clang编译相关：\n#### 优化参数：\n-O3用于开启最高优化支持。\n#### 安全相关：\n-z noexecstack -z now -fstack-protector-all -fPIE -pie\n具体能不能用到猫猫也不知道，但是加上也没害处。\n#### 静态编译：\n静态编译可以让程序自己包含自己的依赖库，从而不需要外部依赖，以提供更好的系统兼容性。\n-static选项用于开启静态编译，你需要提前安装静态依赖库。\ntermux中需要-ffunction-sections -fdata-sections -Wl,--gc-sections参数来解决编译出的程序无法运行的问题。\n### Makefile编写：\n贴出猫猫的Makefile，相信你基本能看懂：\n```makefile\nall :\n        cc -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE -pie container.c -o container\n        strip container\nno :\n        cc -lcap container.c -o container\nstatic :\n        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container\n        strip container\nstaticfail :\n        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container ./libcap.a\n        strip container\ninstall :all\n        install -m 777 container ${PREFIX}/bin/container\nclean :\n        rm container||true\n        rm libcap.a||true\nhelp :\n        @printf \"\\033[1;38;2;254;228;208mUsage:\\n\"\n        @echo \"  make all        :compile\"\n        @echo \"  make install    :make all and install container to \\$$PREFIX\"\n        @echo \"  make static     :static compile\"\n        @echo \"  make staticfail :static compile,fix errors\"\n        @echo \"  make no         :compile without optimizations\"\n        @echo \"  make clean      :clean\"\n        @echo \"Dependent libraries:\"\n        @echo \"  libc-client-static,libcap-static\"\n        @printf \"If you got errors like \\`undefined symbol: cap_drop_bound\\` or \\`undefined reference to \\`cap_set_flag' when using static compile,please copy your \\`libcap.a\\` into current directory and use \\`make staticfail\\` instead\\n\\033[0m\"\n\n```\n### 一个chroot命令的简单实现：\n在群里吹水时写的，没啥大用但舍不得删了，就放在这里吧：\n头文件依然遵循共享原则(懒死猫猫算了)\n```C\nint main(int argc,char **argv){\n  if (getuid() != 0){\n    fprintf(stderr,\"\\033[31mError: this program should be run with root privileges !\\033[0m\\n\");\n    exit(1);\n  }\n  if (argc <= 1){\n    fprintf(stderr,\"\\033[31mError: too few arguments !\\033[0m\\n\");\n    exit(1);\n  }\n  char *ld_preload=getenv(\"LD_PRELOAD\");\n  if(ld_preload != NULL){\n    fprintf(stderr,\"\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n\");\n    exit(1);\n  }\n  char *container_dir=argv[1];\n  char *login[1024]={0};\n  if (argc==2){\n    login[0]=\"/bin/su\";\n    login[1]=\"-\";\n    login[2]=NULL;\n  }else{\n    int login_arg=0;\n    for (int arg=2;arg<argc;arg++){\n      login_arg=arg-2;\n      login[login_arg]=argv[arg];\n    }\n    login_arg+=1;\n    login[login_arg]=NULL;\n  }\n  DIR *direxist;\n  if((direxist=opendir(container_dir)) == NULL){\n    fprintf(stderr,\"\\033[31mError: container directory does not exist !\\033[0m\\n\");\n    exit(1);\n  }else{\n    closedir(direxist);\n  }\n  chroot(container_dir);\n  if (execv(login[0],login) == -1){\n    fprintf(stderr,\"\\033[31mFailed to execute `/bin/su`\\n\");\n    fprintf(stderr,\"execv() returned: %d\\n\",errno);\n    fprintf(stderr,\"error reason: %s\\033[0m\\n\",strerror(errno));\n    exit(1);\n  }\n}\n\n```\n本不想声明著作权的，但又担心有人偷猫猫辛苦写出来的东西。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","slug":"moe-container-lab","published":1,"updated":"2023-06-01T10:36:39.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clid27xu80003vttwha72cgpo","content":"<h2 id=\"注意：此文章已过时，新的文章。。。先鸽着\"><a href=\"#注意：此文章已过时，新的文章。。。先鸽着\" class=\"headerlink\" title=\"注意：此文章已过时，新的文章。。。先鸽着\"></a>注意：此文章已过时，新的文章。。。先鸽着</h2><p>欢迎来到猫猫的C语言实验室喵！</p>\n<h2 id=\"序言：\"><a href=\"#序言：\" class=\"headerlink\" title=\"序言：\"></a>序言：</h2><p>文中所述源码是以MIT协议开源的，本文转载请注明原创作者为Moe-hacker，除此之外无其他要求。<br>作者其实想将本文改名为《Re:从零开始的container生活》，不过考虑到搜索引擎可见性就算了吧。<br>文章非基础教程，当然写这个容器实现前咱也是零基础的，所以可以放心观看喵～<br>有关容器安全原理的具体作用请看咱的另一篇文章：<br><a href=\"https://moe-hacker.github.io/2022/12/05/moe-container-sec/\">浅谈Linux容器安全：chroot，capability与namespace技术</a><br>文章所有代码均为C语言实现。<br>所有代码均为root权限执行。<br>内容遵守最简代码原则，尽量以最少的代码展示C语言接口的调用。<br>选修部分代码未给出main()函数，请手动添加测试。<br>程序完善，异常处理与架构设计在选修章节。<br>本文容器目录为&#x2F;data&#x2F;alpine，作为最小测试系统。<br>文章分必修和选修两个部分，选修部分技术要求可能较高，里面用到的函数未给出详细解说，请自行查看相关文档学习。<br>成品展示：<a href=\"https://github.com/Moe-hacker/ruri\">Moe-hacker&#x2F;ruri</a></p>\n<h2 id=\"头文件：\"><a href=\"#头文件：\" class=\"headerlink\" title=\"头文件：\"></a>头文件：</h2><p>为了方便(其实是懒)，本文所有C语言代码将共享以下头文件：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GNU_SOURCE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sched.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;dirent.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/sched.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mount.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/sysmacros.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/capability.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"必修部分：\"><a href=\"#必修部分：\" class=\"headerlink\" title=\"必修部分：\"></a>必修部分：</h2><h3 id=\"chroot实现\"><a href=\"#chroot实现\" class=\"headerlink\" title=\"chroot实现:\"></a>chroot实现:</h3><p>chroot，顾名思义，更改根目录，容器技术的最基本实现。<br>演示代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> container_dir <span class=\"string\">&quot;/data/alpine&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  chroot(container_dir);</span><br><span class=\"line\">  <span class=\"type\">char</span> *login[]=&#123;<span class=\"string\">&quot;/bin/su&quot;</span>,<span class=\"string\">&quot;-&quot;</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">  execv(login[<span class=\"number\">0</span>],login);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在termux中需要在tsu下删除LD_PRELOAD变量执行。<br>你已经完成创建了一个基本容器了，很简单吧，让我们继续喵！</p>\n<h3 id=\"namespace隔离：\"><a href=\"#namespace隔离：\" class=\"headerlink\" title=\"namespace隔离：\"></a>namespace隔离：</h3><p>namespace技术，linux中的内核隔离技术，可使得进程资源互相隔离。<br>此处略有些复杂。<br>运行此段代码请确认内核带有PID namespace支持，否则不会生效。<br>演示代码为pid namespace的简单利用，实现进程信息隔离。<br>演示代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  unshare(CLONE_NEWPID);</span><br><span class=\"line\">  <span class=\"type\">int</span> pid=fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    mount(<span class=\"string\">&quot;proc&quot;</span>,<span class=\"string\">&quot;/proc&quot;</span>,<span class=\"string\">&quot;proc&quot;</span>,MS_NOSUID|MS_NOEXEC|MS_NODEV,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;/bin/ps -ae&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  waitpid(pid,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID TTY          TIME CMD</span><br><span class=\"line\">    1 pts/0    00:00:00 a.out</span><br><span class=\"line\">    2 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure>\n<p>可以看到进程信息被隔离。<br>注释：<br>unshare真正实现隔离后能够不受限制运行命令必须经历一次fork()才能实现，否则容器内部将无法fork出新进程运行命令。<br>fork()函数返回值：父进程返回子进程pid，子进程返回0。<br>waitpid()可以避免产生僵尸进程并解决容器中无法获取console的问题。<br>&#x2F;proc由于在namespace创建之前已被挂载，内部进程信息依然可见，故内部需要重新挂载。</p>\n<h4 id=\"一些可用flags-unshare选项-：\"><a href=\"#一些可用flags-unshare选项-：\" class=\"headerlink\" title=\"一些可用flags(unshare选项)：\"></a>一些可用flags(unshare选项)：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLONE_NEWNS</span><br><span class=\"line\">CLONE_NEWUTS</span><br><span class=\"line\">CLONE_NEWIPC</span><br><span class=\"line\">CLONE_NEWPID</span><br><span class=\"line\">CLONE_NEWCGROUP</span><br><span class=\"line\">CLONE_NEWTIME</span><br><span class=\"line\">CLONE_SYSVSEM</span><br><span class=\"line\">CLONE_FILES</span><br><span class=\"line\">CLONE_FS</span><br></pre></td></tr></table></figure>\n<p>具体功能请自行查看相关文档，不做过多解释。</p>\n<h4 id=\"moe-container未实现功能：\"><a href=\"#moe-container未实现功能：\" class=\"headerlink\" title=\"moe-container未实现功能：\"></a>moe-container未实现功能：</h4><p>CLONE_NEWNET：会导致容器内网络不可用，需手动创建网桥，但用处不大。<br>CLONE_NEWUSER：需要usermap映射，但是有capability在，用处貌似也不大？<br>相信你已经学会如何将进程自身隔离了，那我们继续吧喵～</p>\n<h3 id=\"capability管理：\"><a href=\"#capability管理：\" class=\"headerlink\" title=\"capability管理：\"></a>capability管理：</h3><p>capability，linux内核授予进程的特权，使得进程拥有相应权限。<br>演示代码为CAP_SYS_ADMIN权限的移除。<br>代码依赖于libcap库，需要添加-lcap参数编译。<br>演示代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_ADMIN);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;mount / /&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount: &#x27;/&#x27;-&gt;&#x27;/&#x27;: Operation not permitted</span><br></pre></td></tr></table></figure>\n<p>可以看到虽然以root权限运行，程序内部依然没有挂载权限。<br>原因就是父进程通过cap_drop_bound()函数主动放弃了挂载相应的特权。<br>以上是基于事实验证的结论，让我们也来康一康理论验证：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;drop前的进程权限：\\n&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;cat /proc/self/status|grep Cap&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_ADMIN);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_MODULE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_RAWIO);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_PACCT);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_NICE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_RESOURCE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_TTY_CONFIG);</span><br><span class=\"line\">  cap_drop_bound(CAP_AUDIT_CONTROL);</span><br><span class=\"line\">  cap_drop_bound(CAP_MAC_OVERRIDE);</span><br><span class=\"line\">  cap_drop_bound(CAP_MAC_ADMIN);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_ADMIN);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYSLOG);</span><br><span class=\"line\">  cap_drop_bound(CAP_DAC_READ_SEARCH);</span><br><span class=\"line\">  cap_drop_bound(CAP_LINUX_IMMUTABLE);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_BROADCAST);</span><br><span class=\"line\">  cap_drop_bound(CAP_IPC_LOCK);</span><br><span class=\"line\">  cap_drop_bound(CAP_IPC_OWNER);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_PTRACE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_BOOT);</span><br><span class=\"line\">  cap_drop_bound(CAP_LEASE);</span><br><span class=\"line\">  cap_drop_bound(CAP_WAKE_ALARM);</span><br><span class=\"line\">  cap_drop_bound(CAP_BLOCK_SUSPEND);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_CHROOT);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETPCAP);</span><br><span class=\"line\">  cap_drop_bound(CAP_MKNOD);</span><br><span class=\"line\">  cap_drop_bound(CAP_AUDIT_WRITE);</span><br><span class=\"line\">  cap_drop_bound(CAP_CHOWN);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_RAW);</span><br><span class=\"line\">  cap_drop_bound(CAP_DAC_OVERRIDE);</span><br><span class=\"line\">  cap_drop_bound(CAP_FOWNER);</span><br><span class=\"line\">  cap_drop_bound(CAP_FSETID);</span><br><span class=\"line\">  cap_drop_bound(CAP_KILL);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETGID);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_BIND_SERVICE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETFCAP);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETUID);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_TIME);</span><br><span class=\"line\">  cap_drop_bound(CAP_AUDIT_READ);</span><br><span class=\"line\">  cap_drop_bound(CAP_PERFMON);</span><br><span class=\"line\">  cap_drop_bound(CAP_BPF);</span><br><span class=\"line\">  cap_drop_bound(CAP_CHECKPOINT_RESTORE);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;drop后的进程权限：\\n&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;cat /proc/self/status|grep Cap&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop前的进程权限：</span><br><span class=\"line\">CapInh: 0000000000000000</span><br><span class=\"line\">CapPrm: 000001ffffffffff</span><br><span class=\"line\">CapEff: 000001ffffffffff</span><br><span class=\"line\">CapBnd: 000001ffffffffff</span><br><span class=\"line\">CapAmb: 0000000000000000</span><br><span class=\"line\"></span><br><span class=\"line\">drop后的进程权限：</span><br><span class=\"line\">CapInh: 0000000000000000</span><br><span class=\"line\">CapPrm: 0000000000000000</span><br><span class=\"line\">CapEff: 0000000000000000</span><br><span class=\"line\">CapBnd: 0000000000000000</span><br><span class=\"line\">CapAmb: 0000000000000000</span><br></pre></td></tr></table></figure>\n<p>直接干翻了所有权限喵～<br>具体哪些权限需要移除，那些权限保留可以参照docker的实现。<br>好哎！容器基本原理你已经学会了，是时候为你的容器程序添砖加瓦了。</p>\n<h2 id=\"选修部分：\"><a href=\"#选修部分：\" class=\"headerlink\" title=\"选修部分：\"></a>选修部分：</h2><p>必修课已经学习完毕了，是时候学习一些新的东西了喵！</p>\n<h3 id=\"异常捕获：\"><a href=\"#异常捕获：\" class=\"headerlink\" title=\"异常捕获：\"></a>异常捕获：</h3><p>大多函数都会定义有异常返回，作为是否执行成功的标志，你需要定义出现异常后所要执行的内容而不是出了bug不知道哪里有问题。<br>C语言默认没有bool类型，异常返回值一般为int型。</p>\n<h4 id=\"重点函数unshare-和exec-的异常捕获：\"><a href=\"#重点函数unshare-和exec-的异常捕获：\" class=\"headerlink\" title=\"重点函数unshare()和exec()的异常捕获：\"></a>重点函数unshare()和exec()的异常捕获：</h4><p>若出现异常，这两个函数均会返回-1。<br>unshare异常大概率是由于内核不支持，输出警告即可。<br>如下面这段所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(unshare(CLONE_NEWNS) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[33mWarning: seems that mount namespace is not supported on this device\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exec()函数大概率由于容器内su程序并不存在报错，为异常。<br>如下面这段所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (execv(login[<span class=\"number\">0</span>],login) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mFailed to execute `/bin/su`\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;execv() returned: %d\\n&quot;</span>,errno);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;error reason: %s\\033[0m\\n&quot;</span>,strerror(errno));</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"环境检查：\"><a href=\"#环境检查：\" class=\"headerlink\" title=\"环境检查：\"></a>环境检查：</h3><h4 id=\"termux兼容：\"><a href=\"#termux兼容：\" class=\"headerlink\" title=\"termux兼容：\"></a>termux兼容：</h4><p>termux中默认存在LD_PRELOAD变量，会导致exec()函数由于依赖库不同无法执行容器内命令。<br>解决方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *ld_preload=getenv(<span class=\"string\">&quot;LD_PRELOAD&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ld_preload != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"权限检查：\"><a href=\"#权限检查：\" class=\"headerlink\" title=\"权限检查：\"></a>权限检查：</h4><p>容器需要以特权创建，否则会运行失败。<br>解决方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (getuid() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: this program should be run with root privileges !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器目录存在检查：\"><a href=\"#容器目录存在检查：\" class=\"headerlink\" title=\"容器目录存在检查：\"></a>容器目录存在检查：</h4><p>容器目录不存在会导致chroot()函数失败，检查方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIR *direxist;</span><br><span class=\"line\"><span class=\"keyword\">if</span>((direxist=opendir(container_dir)) == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: container directory does not exist !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  closedir(direxist);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数获取：\"><a href=\"#参数获取：\" class=\"headerlink\" title=\"参数获取：\"></a>参数获取：</h3><p>这段嵌套偏绕，方法有点笨，但是好用。<br>main()函数加入int argc,char **argv两个参数。<br>然后：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *container_dir=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> arg=<span class=\"number\">1</span>;arg&lt;argc;arg++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(argv[arg][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span> :</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(argv[arg][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;v&#x27;</span>:</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;发现参数-v了喵！\\n&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;%s%s%s\\033[0m\\n&quot;</span>,<span class=\"string\">&quot;\\033[31mError: unknow option `&quot;</span>,argv[arg],<span class=\"string\">&quot;`&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;.&#x27;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%s\\n&quot;</span>,<span class=\"string\">&quot;容器目录为&quot;</span>,argv[arg]);</span><br><span class=\"line\">      container_dir=argv[arg];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;%s%s%s\\033[0m\\n&quot;</span>,<span class=\"string\">&quot;\\033[31mError: unknow option `&quot;</span>,argv[arg],<span class=\"string\">&quot;`&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!container_dir)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: container directory is not set !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意break就行了。<br>这段代码功能有：</p>\n<ul>\n<li>获取参数 -v</li>\n<li>获取合法容器路径并记录到指针container_dir</li>\n<li>若参数异常自动退出</li>\n</ul>\n<p>于是你学会了参数获取，让我们继续。</p>\n<h3 id=\"容器目录自动挂载：\"><a href=\"#容器目录自动挂载：\" class=\"headerlink\" title=\"容器目录自动挂载：\"></a>容器目录自动挂载：</h3><p>容器内部需要挂载系统运行时所需目录，否则无法正常运行。<br>proc目录挂载前记得先umount两次。<br>sys直接挂载。<br>dev挂载为tmpfs，里面的设备可以根据docker普通容器设备列表进行映射和权限更改。<br>实现示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir(<span class=\"string\">&quot;/dev&quot;</span>,S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);</span><br><span class=\"line\">mount(<span class=\"string\">&quot;tmpfs&quot;</span>,<span class=\"string\">&quot;/dev&quot;</span>,<span class=\"string\">&quot;tmpfs&quot;</span>,MS_NOSUID,<span class=\"string\">&quot;size=65536k,mode=755&quot;</span>);</span><br><span class=\"line\">mkdir(<span class=\"string\">&quot;/dev/pts&quot;</span>,S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);</span><br><span class=\"line\">mount(<span class=\"string\">&quot;devpts&quot;</span>,<span class=\"string\">&quot;/dev/pts&quot;</span>,<span class=\"string\">&quot;devpts&quot;</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;gid=4,mode=620&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> dev;</span><br><span class=\"line\">dev=makedev(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">mknod(<span class=\"string\">&quot;/dev/null&quot;</span>,S_IFCHR,dev);</span><br><span class=\"line\">chmod(<span class=\"string\">&quot;/dev/null&quot;</span>,S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);</span><br><span class=\"line\">symlink(<span class=\"string\">&quot;/proc/self/fd&quot;</span>,<span class=\"string\">&quot;/dev/fd&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>具体实现请自行查看moe-container代码及里面的英文注释，懒得翻译回来了。<br>于是你学会了所有文件系统挂载所需要的知识。</p>\n<h3 id=\"其他函数定义：\"><a href=\"#其他函数定义：\" class=\"headerlink\" title=\"其他函数定义：\"></a>其他函数定义：</h3><p>你可能需要show_helps()和show_version_info()函数来完善你的程序。<br>当然猫猫还定义了一个show_greetings()函数作为彩蛋。</p>\n<h3 id=\"于是，你也完成了你自己的完整容器实现。\"><a href=\"#于是，你也完成了你自己的完整容器实现。\" class=\"headerlink\" title=\"于是，你也完成了你自己的完整容器实现。\"></a>于是，你也完成了你自己的完整容器实现。</h3><h2 id=\"附加知识：\"><a href=\"#附加知识：\" class=\"headerlink\" title=\"附加知识：\"></a>附加知识：</h2><h3 id=\"进程名修改：\"><a href=\"#进程名修改：\" class=\"headerlink\" title=\"进程名修改：\"></a>进程名修改：</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prctl(PR_SET_NAME,<span class=\"string\">&quot;moe_container&quot;</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>这样无论编译出的文件名称是什么，进程名都会被程序自身重命名为moe_container。</p>\n<h3 id=\"宏定义：\"><a href=\"#宏定义：\" class=\"headerlink\" title=\"宏定义：\"></a>宏定义：</h3><p>移除capability和调用unshare那段，可以在宏中为具体选项定义一个开关，1为开0为关，这样就可以编辑头文件来获得更丰富的自定义了。</p>\n<h3 id=\"clang编译相关：\"><a href=\"#clang编译相关：\" class=\"headerlink\" title=\"clang编译相关：\"></a>clang编译相关：</h3><h4 id=\"优化参数：\"><a href=\"#优化参数：\" class=\"headerlink\" title=\"优化参数：\"></a>优化参数：</h4><p>-O3用于开启最高优化支持。</p>\n<h4 id=\"安全相关：\"><a href=\"#安全相关：\" class=\"headerlink\" title=\"安全相关：\"></a>安全相关：</h4><p>-z noexecstack -z now -fstack-protector-all -fPIE -pie<br>具体能不能用到猫猫也不知道，但是加上也没害处。</p>\n<h4 id=\"静态编译：\"><a href=\"#静态编译：\" class=\"headerlink\" title=\"静态编译：\"></a>静态编译：</h4><p>静态编译可以让程序自己包含自己的依赖库，从而不需要外部依赖，以提供更好的系统兼容性。<br>-static选项用于开启静态编译，你需要提前安装静态依赖库。<br>termux中需要-ffunction-sections -fdata-sections -Wl,–gc-sections参数来解决编译出的程序无法运行的问题。</p>\n<h3 id=\"Makefile编写：\"><a href=\"#Makefile编写：\" class=\"headerlink\" title=\"Makefile编写：\"></a>Makefile编写：</h3><p>贴出猫猫的Makefile，相信你基本能看懂：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all :</span><br><span class=\"line\">        cc -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE -pie container.c -o container</span><br><span class=\"line\">        strip container</span><br><span class=\"line\">no :</span><br><span class=\"line\">        cc -lcap container.c -o container</span><br><span class=\"line\">static :</span><br><span class=\"line\">        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container</span><br><span class=\"line\">        strip container</span><br><span class=\"line\">staticfail :</span><br><span class=\"line\">        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container ./libcap.a</span><br><span class=\"line\">        strip container</span><br><span class=\"line\">install :all</span><br><span class=\"line\">        install -m 777 container $&#123;PREFIX&#125;/bin/container</span><br><span class=\"line\">clean :</span><br><span class=\"line\">        rm container||true</span><br><span class=\"line\">        rm libcap.a||true</span><br><span class=\"line\">help :</span><br><span class=\"line\">        @printf <span class=\"string\">&quot;\\033[1;38;2;254;228;208mUsage:\\n&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make all        :compile&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make install    :make all and install container to \\$$PREFIX&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make static     :static compile&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make staticfail :static compile,fix errors&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make no         :compile without optimizations&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make clean      :clean&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;Dependent libraries:&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  libc-client-static,libcap-static&quot;</span></span><br><span class=\"line\">        @printf <span class=\"string\">&quot;If you got errors like \\`undefined symbol: cap_drop_bound\\` or \\`undefined reference to \\`cap_set_flag&#x27; when using static compile,please copy your \\`libcap.a\\` into current directory and use \\`make staticfail\\` instead\\n\\033[0m&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"一个chroot命令的简单实现：\"><a href=\"#一个chroot命令的简单实现：\" class=\"headerlink\" title=\"一个chroot命令的简单实现：\"></a>一个chroot命令的简单实现：</h3><p>在群里吹水时写的，没啥大用但舍不得删了，就放在这里吧：<br>头文件依然遵循共享原则(懒死猫猫算了)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> **argv)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getuid() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: this program should be run with root privileges !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: too few arguments !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">char</span> *ld_preload=getenv(<span class=\"string\">&quot;LD_PRELOAD&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ld_preload != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">char</span> *container_dir=argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"type\">char</span> *login[<span class=\"number\">1024</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    login[<span class=\"number\">0</span>]=<span class=\"string\">&quot;/bin/su&quot;</span>;</span><br><span class=\"line\">    login[<span class=\"number\">1</span>]=<span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">    login[<span class=\"number\">2</span>]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> login_arg=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> arg=<span class=\"number\">2</span>;arg&lt;argc;arg++)&#123;</span><br><span class=\"line\">      login_arg=arg<span class=\"number\">-2</span>;</span><br><span class=\"line\">      login[login_arg]=argv[arg];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    login_arg+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    login[login_arg]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DIR *direxist;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((direxist=opendir(container_dir)) == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: container directory does not exist !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    closedir(direxist);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  chroot(container_dir);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (execv(login[<span class=\"number\">0</span>],login) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mFailed to execute `/bin/su`\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;execv() returned: %d\\n&quot;</span>,errno);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;error reason: %s\\033[0m\\n&quot;</span>,strerror(errno));</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>本不想声明著作权的，但又担心有人偷猫猫辛苦写出来的东西。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"注意：此文章已过时，新的文章。。。先鸽着\"><a href=\"#注意：此文章已过时，新的文章。。。先鸽着\" class=\"headerlink\" title=\"注意：此文章已过时，新的文章。。。先鸽着\"></a>注意：此文章已过时，新的文章。。。先鸽着</h2><p>欢迎来到猫猫的C语言实验室喵！</p>\n<h2 id=\"序言：\"><a href=\"#序言：\" class=\"headerlink\" title=\"序言：\"></a>序言：</h2><p>文中所述源码是以MIT协议开源的，本文转载请注明原创作者为Moe-hacker，除此之外无其他要求。<br>作者其实想将本文改名为《Re:从零开始的container生活》，不过考虑到搜索引擎可见性就算了吧。<br>文章非基础教程，当然写这个容器实现前咱也是零基础的，所以可以放心观看喵～<br>有关容器安全原理的具体作用请看咱的另一篇文章：<br><a href=\"https://moe-hacker.github.io/2022/12/05/moe-container-sec/\">浅谈Linux容器安全：chroot，capability与namespace技术</a><br>文章所有代码均为C语言实现。<br>所有代码均为root权限执行。<br>内容遵守最简代码原则，尽量以最少的代码展示C语言接口的调用。<br>选修部分代码未给出main()函数，请手动添加测试。<br>程序完善，异常处理与架构设计在选修章节。<br>本文容器目录为&#x2F;data&#x2F;alpine，作为最小测试系统。<br>文章分必修和选修两个部分，选修部分技术要求可能较高，里面用到的函数未给出详细解说，请自行查看相关文档学习。<br>成品展示：<a href=\"https://github.com/Moe-hacker/ruri\">Moe-hacker&#x2F;ruri</a></p>\n<h2 id=\"头文件：\"><a href=\"#头文件：\" class=\"headerlink\" title=\"头文件：\"></a>头文件：</h2><p>为了方便(其实是懒)，本文所有C语言代码将共享以下头文件：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GNU_SOURCE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sched.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;dirent.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/sched.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mount.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/sysmacros.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/capability.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"必修部分：\"><a href=\"#必修部分：\" class=\"headerlink\" title=\"必修部分：\"></a>必修部分：</h2><h3 id=\"chroot实现\"><a href=\"#chroot实现\" class=\"headerlink\" title=\"chroot实现:\"></a>chroot实现:</h3><p>chroot，顾名思义，更改根目录，容器技术的最基本实现。<br>演示代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> container_dir <span class=\"string\">&quot;/data/alpine&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  chroot(container_dir);</span><br><span class=\"line\">  <span class=\"type\">char</span> *login[]=&#123;<span class=\"string\">&quot;/bin/su&quot;</span>,<span class=\"string\">&quot;-&quot;</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">  execv(login[<span class=\"number\">0</span>],login);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在termux中需要在tsu下删除LD_PRELOAD变量执行。<br>你已经完成创建了一个基本容器了，很简单吧，让我们继续喵！</p>\n<h3 id=\"namespace隔离：\"><a href=\"#namespace隔离：\" class=\"headerlink\" title=\"namespace隔离：\"></a>namespace隔离：</h3><p>namespace技术，linux中的内核隔离技术，可使得进程资源互相隔离。<br>此处略有些复杂。<br>运行此段代码请确认内核带有PID namespace支持，否则不会生效。<br>演示代码为pid namespace的简单利用，实现进程信息隔离。<br>演示代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  unshare(CLONE_NEWPID);</span><br><span class=\"line\">  <span class=\"type\">int</span> pid=fork();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    mount(<span class=\"string\">&quot;proc&quot;</span>,<span class=\"string\">&quot;/proc&quot;</span>,<span class=\"string\">&quot;proc&quot;</span>,MS_NOSUID|MS_NOEXEC|MS_NODEV,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;/bin/ps -ae&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  waitpid(pid,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID TTY          TIME CMD</span><br><span class=\"line\">    1 pts/0    00:00:00 a.out</span><br><span class=\"line\">    2 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure>\n<p>可以看到进程信息被隔离。<br>注释：<br>unshare真正实现隔离后能够不受限制运行命令必须经历一次fork()才能实现，否则容器内部将无法fork出新进程运行命令。<br>fork()函数返回值：父进程返回子进程pid，子进程返回0。<br>waitpid()可以避免产生僵尸进程并解决容器中无法获取console的问题。<br>&#x2F;proc由于在namespace创建之前已被挂载，内部进程信息依然可见，故内部需要重新挂载。</p>\n<h4 id=\"一些可用flags-unshare选项-：\"><a href=\"#一些可用flags-unshare选项-：\" class=\"headerlink\" title=\"一些可用flags(unshare选项)：\"></a>一些可用flags(unshare选项)：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLONE_NEWNS</span><br><span class=\"line\">CLONE_NEWUTS</span><br><span class=\"line\">CLONE_NEWIPC</span><br><span class=\"line\">CLONE_NEWPID</span><br><span class=\"line\">CLONE_NEWCGROUP</span><br><span class=\"line\">CLONE_NEWTIME</span><br><span class=\"line\">CLONE_SYSVSEM</span><br><span class=\"line\">CLONE_FILES</span><br><span class=\"line\">CLONE_FS</span><br></pre></td></tr></table></figure>\n<p>具体功能请自行查看相关文档，不做过多解释。</p>\n<h4 id=\"moe-container未实现功能：\"><a href=\"#moe-container未实现功能：\" class=\"headerlink\" title=\"moe-container未实现功能：\"></a>moe-container未实现功能：</h4><p>CLONE_NEWNET：会导致容器内网络不可用，需手动创建网桥，但用处不大。<br>CLONE_NEWUSER：需要usermap映射，但是有capability在，用处貌似也不大？<br>相信你已经学会如何将进程自身隔离了，那我们继续吧喵～</p>\n<h3 id=\"capability管理：\"><a href=\"#capability管理：\" class=\"headerlink\" title=\"capability管理：\"></a>capability管理：</h3><p>capability，linux内核授予进程的特权，使得进程拥有相应权限。<br>演示代码为CAP_SYS_ADMIN权限的移除。<br>代码依赖于libcap库，需要添加-lcap参数编译。<br>演示代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_ADMIN);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;mount / /&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount: &#x27;/&#x27;-&gt;&#x27;/&#x27;: Operation not permitted</span><br></pre></td></tr></table></figure>\n<p>可以看到虽然以root权限运行，程序内部依然没有挂载权限。<br>原因就是父进程通过cap_drop_bound()函数主动放弃了挂载相应的特权。<br>以上是基于事实验证的结论，让我们也来康一康理论验证：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;drop前的进程权限：\\n&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;cat /proc/self/status|grep Cap&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_ADMIN);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_MODULE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_RAWIO);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_PACCT);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_NICE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_RESOURCE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_TTY_CONFIG);</span><br><span class=\"line\">  cap_drop_bound(CAP_AUDIT_CONTROL);</span><br><span class=\"line\">  cap_drop_bound(CAP_MAC_OVERRIDE);</span><br><span class=\"line\">  cap_drop_bound(CAP_MAC_ADMIN);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_ADMIN);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYSLOG);</span><br><span class=\"line\">  cap_drop_bound(CAP_DAC_READ_SEARCH);</span><br><span class=\"line\">  cap_drop_bound(CAP_LINUX_IMMUTABLE);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_BROADCAST);</span><br><span class=\"line\">  cap_drop_bound(CAP_IPC_LOCK);</span><br><span class=\"line\">  cap_drop_bound(CAP_IPC_OWNER);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_PTRACE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_BOOT);</span><br><span class=\"line\">  cap_drop_bound(CAP_LEASE);</span><br><span class=\"line\">  cap_drop_bound(CAP_WAKE_ALARM);</span><br><span class=\"line\">  cap_drop_bound(CAP_BLOCK_SUSPEND);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_CHROOT);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETPCAP);</span><br><span class=\"line\">  cap_drop_bound(CAP_MKNOD);</span><br><span class=\"line\">  cap_drop_bound(CAP_AUDIT_WRITE);</span><br><span class=\"line\">  cap_drop_bound(CAP_CHOWN);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_RAW);</span><br><span class=\"line\">  cap_drop_bound(CAP_DAC_OVERRIDE);</span><br><span class=\"line\">  cap_drop_bound(CAP_FOWNER);</span><br><span class=\"line\">  cap_drop_bound(CAP_FSETID);</span><br><span class=\"line\">  cap_drop_bound(CAP_KILL);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETGID);</span><br><span class=\"line\">  cap_drop_bound(CAP_NET_BIND_SERVICE);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETFCAP);</span><br><span class=\"line\">  cap_drop_bound(CAP_SETUID);</span><br><span class=\"line\">  cap_drop_bound(CAP_SYS_TIME);</span><br><span class=\"line\">  cap_drop_bound(CAP_AUDIT_READ);</span><br><span class=\"line\">  cap_drop_bound(CAP_PERFMON);</span><br><span class=\"line\">  cap_drop_bound(CAP_BPF);</span><br><span class=\"line\">  cap_drop_bound(CAP_CHECKPOINT_RESTORE);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;drop后的进程权限：\\n&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;cat /proc/self/status|grep Cap&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop前的进程权限：</span><br><span class=\"line\">CapInh: 0000000000000000</span><br><span class=\"line\">CapPrm: 000001ffffffffff</span><br><span class=\"line\">CapEff: 000001ffffffffff</span><br><span class=\"line\">CapBnd: 000001ffffffffff</span><br><span class=\"line\">CapAmb: 0000000000000000</span><br><span class=\"line\"></span><br><span class=\"line\">drop后的进程权限：</span><br><span class=\"line\">CapInh: 0000000000000000</span><br><span class=\"line\">CapPrm: 0000000000000000</span><br><span class=\"line\">CapEff: 0000000000000000</span><br><span class=\"line\">CapBnd: 0000000000000000</span><br><span class=\"line\">CapAmb: 0000000000000000</span><br></pre></td></tr></table></figure>\n<p>直接干翻了所有权限喵～<br>具体哪些权限需要移除，那些权限保留可以参照docker的实现。<br>好哎！容器基本原理你已经学会了，是时候为你的容器程序添砖加瓦了。</p>\n<h2 id=\"选修部分：\"><a href=\"#选修部分：\" class=\"headerlink\" title=\"选修部分：\"></a>选修部分：</h2><p>必修课已经学习完毕了，是时候学习一些新的东西了喵！</p>\n<h3 id=\"异常捕获：\"><a href=\"#异常捕获：\" class=\"headerlink\" title=\"异常捕获：\"></a>异常捕获：</h3><p>大多函数都会定义有异常返回，作为是否执行成功的标志，你需要定义出现异常后所要执行的内容而不是出了bug不知道哪里有问题。<br>C语言默认没有bool类型，异常返回值一般为int型。</p>\n<h4 id=\"重点函数unshare-和exec-的异常捕获：\"><a href=\"#重点函数unshare-和exec-的异常捕获：\" class=\"headerlink\" title=\"重点函数unshare()和exec()的异常捕获：\"></a>重点函数unshare()和exec()的异常捕获：</h4><p>若出现异常，这两个函数均会返回-1。<br>unshare异常大概率是由于内核不支持，输出警告即可。<br>如下面这段所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(unshare(CLONE_NEWNS) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[33mWarning: seems that mount namespace is not supported on this device\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exec()函数大概率由于容器内su程序并不存在报错，为异常。<br>如下面这段所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (execv(login[<span class=\"number\">0</span>],login) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mFailed to execute `/bin/su`\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;execv() returned: %d\\n&quot;</span>,errno);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;error reason: %s\\033[0m\\n&quot;</span>,strerror(errno));</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"环境检查：\"><a href=\"#环境检查：\" class=\"headerlink\" title=\"环境检查：\"></a>环境检查：</h3><h4 id=\"termux兼容：\"><a href=\"#termux兼容：\" class=\"headerlink\" title=\"termux兼容：\"></a>termux兼容：</h4><p>termux中默认存在LD_PRELOAD变量，会导致exec()函数由于依赖库不同无法执行容器内命令。<br>解决方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *ld_preload=getenv(<span class=\"string\">&quot;LD_PRELOAD&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ld_preload != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"权限检查：\"><a href=\"#权限检查：\" class=\"headerlink\" title=\"权限检查：\"></a>权限检查：</h4><p>容器需要以特权创建，否则会运行失败。<br>解决方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (getuid() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: this program should be run with root privileges !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器目录存在检查：\"><a href=\"#容器目录存在检查：\" class=\"headerlink\" title=\"容器目录存在检查：\"></a>容器目录存在检查：</h4><p>容器目录不存在会导致chroot()函数失败，检查方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIR *direxist;</span><br><span class=\"line\"><span class=\"keyword\">if</span>((direxist=opendir(container_dir)) == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: container directory does not exist !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  closedir(direxist);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数获取：\"><a href=\"#参数获取：\" class=\"headerlink\" title=\"参数获取：\"></a>参数获取：</h3><p>这段嵌套偏绕，方法有点笨，但是好用。<br>main()函数加入int argc,char **argv两个参数。<br>然后：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *container_dir=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> arg=<span class=\"number\">1</span>;arg&lt;argc;arg++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(argv[arg][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span> :</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(argv[arg][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;v&#x27;</span>:</span><br><span class=\"line\">          <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;发现参数-v了喵！\\n&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;%s%s%s\\033[0m\\n&quot;</span>,<span class=\"string\">&quot;\\033[31mError: unknow option `&quot;</span>,argv[arg],<span class=\"string\">&quot;`&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;.&#x27;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%s\\n&quot;</span>,<span class=\"string\">&quot;容器目录为&quot;</span>,argv[arg]);</span><br><span class=\"line\">      container_dir=argv[arg];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;%s%s%s\\033[0m\\n&quot;</span>,<span class=\"string\">&quot;\\033[31mError: unknow option `&quot;</span>,argv[arg],<span class=\"string\">&quot;`&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!container_dir)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: container directory is not set !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意break就行了。<br>这段代码功能有：</p>\n<ul>\n<li>获取参数 -v</li>\n<li>获取合法容器路径并记录到指针container_dir</li>\n<li>若参数异常自动退出</li>\n</ul>\n<p>于是你学会了参数获取，让我们继续。</p>\n<h3 id=\"容器目录自动挂载：\"><a href=\"#容器目录自动挂载：\" class=\"headerlink\" title=\"容器目录自动挂载：\"></a>容器目录自动挂载：</h3><p>容器内部需要挂载系统运行时所需目录，否则无法正常运行。<br>proc目录挂载前记得先umount两次。<br>sys直接挂载。<br>dev挂载为tmpfs，里面的设备可以根据docker普通容器设备列表进行映射和权限更改。<br>实现示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir(<span class=\"string\">&quot;/dev&quot;</span>,S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);</span><br><span class=\"line\">mount(<span class=\"string\">&quot;tmpfs&quot;</span>,<span class=\"string\">&quot;/dev&quot;</span>,<span class=\"string\">&quot;tmpfs&quot;</span>,MS_NOSUID,<span class=\"string\">&quot;size=65536k,mode=755&quot;</span>);</span><br><span class=\"line\">mkdir(<span class=\"string\">&quot;/dev/pts&quot;</span>,S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH|S_IRGRP|S_IWGRP);</span><br><span class=\"line\">mount(<span class=\"string\">&quot;devpts&quot;</span>,<span class=\"string\">&quot;/dev/pts&quot;</span>,<span class=\"string\">&quot;devpts&quot;</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;gid=4,mode=620&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> dev;</span><br><span class=\"line\">dev=makedev(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">mknod(<span class=\"string\">&quot;/dev/null&quot;</span>,S_IFCHR,dev);</span><br><span class=\"line\">chmod(<span class=\"string\">&quot;/dev/null&quot;</span>,S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);</span><br><span class=\"line\">symlink(<span class=\"string\">&quot;/proc/self/fd&quot;</span>,<span class=\"string\">&quot;/dev/fd&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>具体实现请自行查看moe-container代码及里面的英文注释，懒得翻译回来了。<br>于是你学会了所有文件系统挂载所需要的知识。</p>\n<h3 id=\"其他函数定义：\"><a href=\"#其他函数定义：\" class=\"headerlink\" title=\"其他函数定义：\"></a>其他函数定义：</h3><p>你可能需要show_helps()和show_version_info()函数来完善你的程序。<br>当然猫猫还定义了一个show_greetings()函数作为彩蛋。</p>\n<h3 id=\"于是，你也完成了你自己的完整容器实现。\"><a href=\"#于是，你也完成了你自己的完整容器实现。\" class=\"headerlink\" title=\"于是，你也完成了你自己的完整容器实现。\"></a>于是，你也完成了你自己的完整容器实现。</h3><h2 id=\"附加知识：\"><a href=\"#附加知识：\" class=\"headerlink\" title=\"附加知识：\"></a>附加知识：</h2><h3 id=\"进程名修改：\"><a href=\"#进程名修改：\" class=\"headerlink\" title=\"进程名修改：\"></a>进程名修改：</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prctl(PR_SET_NAME,<span class=\"string\">&quot;moe_container&quot;</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>这样无论编译出的文件名称是什么，进程名都会被程序自身重命名为moe_container。</p>\n<h3 id=\"宏定义：\"><a href=\"#宏定义：\" class=\"headerlink\" title=\"宏定义：\"></a>宏定义：</h3><p>移除capability和调用unshare那段，可以在宏中为具体选项定义一个开关，1为开0为关，这样就可以编辑头文件来获得更丰富的自定义了。</p>\n<h3 id=\"clang编译相关：\"><a href=\"#clang编译相关：\" class=\"headerlink\" title=\"clang编译相关：\"></a>clang编译相关：</h3><h4 id=\"优化参数：\"><a href=\"#优化参数：\" class=\"headerlink\" title=\"优化参数：\"></a>优化参数：</h4><p>-O3用于开启最高优化支持。</p>\n<h4 id=\"安全相关：\"><a href=\"#安全相关：\" class=\"headerlink\" title=\"安全相关：\"></a>安全相关：</h4><p>-z noexecstack -z now -fstack-protector-all -fPIE -pie<br>具体能不能用到猫猫也不知道，但是加上也没害处。</p>\n<h4 id=\"静态编译：\"><a href=\"#静态编译：\" class=\"headerlink\" title=\"静态编译：\"></a>静态编译：</h4><p>静态编译可以让程序自己包含自己的依赖库，从而不需要外部依赖，以提供更好的系统兼容性。<br>-static选项用于开启静态编译，你需要提前安装静态依赖库。<br>termux中需要-ffunction-sections -fdata-sections -Wl,–gc-sections参数来解决编译出的程序无法运行的问题。</p>\n<h3 id=\"Makefile编写：\"><a href=\"#Makefile编写：\" class=\"headerlink\" title=\"Makefile编写：\"></a>Makefile编写：</h3><p>贴出猫猫的Makefile，相信你基本能看懂：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all :</span><br><span class=\"line\">        cc -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE -pie container.c -o container</span><br><span class=\"line\">        strip container</span><br><span class=\"line\">no :</span><br><span class=\"line\">        cc -lcap container.c -o container</span><br><span class=\"line\">static :</span><br><span class=\"line\">        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container</span><br><span class=\"line\">        strip container</span><br><span class=\"line\">staticfail :</span><br><span class=\"line\">        cc -static -ffunction-sections -fdata-sections -Wl,--gc-sections -lcap -O3 -z noexecstack -z now -fstack-protector-all -fPIE container.c -o container ./libcap.a</span><br><span class=\"line\">        strip container</span><br><span class=\"line\">install :all</span><br><span class=\"line\">        install -m 777 container $&#123;PREFIX&#125;/bin/container</span><br><span class=\"line\">clean :</span><br><span class=\"line\">        rm container||true</span><br><span class=\"line\">        rm libcap.a||true</span><br><span class=\"line\">help :</span><br><span class=\"line\">        @printf <span class=\"string\">&quot;\\033[1;38;2;254;228;208mUsage:\\n&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make all        :compile&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make install    :make all and install container to \\$$PREFIX&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make static     :static compile&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make staticfail :static compile,fix errors&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make no         :compile without optimizations&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  make clean      :clean&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;Dependent libraries:&quot;</span></span><br><span class=\"line\">        @echo <span class=\"string\">&quot;  libc-client-static,libcap-static&quot;</span></span><br><span class=\"line\">        @printf <span class=\"string\">&quot;If you got errors like \\`undefined symbol: cap_drop_bound\\` or \\`undefined reference to \\`cap_set_flag&#x27; when using static compile,please copy your \\`libcap.a\\` into current directory and use \\`make staticfail\\` instead\\n\\033[0m&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"一个chroot命令的简单实现：\"><a href=\"#一个chroot命令的简单实现：\" class=\"headerlink\" title=\"一个chroot命令的简单实现：\"></a>一个chroot命令的简单实现：</h3><p>在群里吹水时写的，没啥大用但舍不得删了，就放在这里吧：<br>头文件依然遵循共享原则(懒死猫猫算了)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> **argv)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getuid() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: this program should be run with root privileges !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: too few arguments !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">char</span> *ld_preload=getenv(<span class=\"string\">&quot;LD_PRELOAD&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ld_preload != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: please unset $LD_PRELOAD before running this program or use su -c `COMMAND` to run.\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">char</span> *container_dir=argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"type\">char</span> *login[<span class=\"number\">1024</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    login[<span class=\"number\">0</span>]=<span class=\"string\">&quot;/bin/su&quot;</span>;</span><br><span class=\"line\">    login[<span class=\"number\">1</span>]=<span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">    login[<span class=\"number\">2</span>]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> login_arg=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> arg=<span class=\"number\">2</span>;arg&lt;argc;arg++)&#123;</span><br><span class=\"line\">      login_arg=arg<span class=\"number\">-2</span>;</span><br><span class=\"line\">      login[login_arg]=argv[arg];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    login_arg+=<span class=\"number\">1</span>;</span><br><span class=\"line\">    login[login_arg]=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DIR *direxist;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((direxist=opendir(container_dir)) == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mError: container directory does not exist !\\033[0m\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    closedir(direxist);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  chroot(container_dir);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (execv(login[<span class=\"number\">0</span>],login) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\033[31mFailed to execute `/bin/su`\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;execv() returned: %d\\n&quot;</span>,errno);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;error reason: %s\\033[0m\\n&quot;</span>,strerror(errno));</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>本不想声明著作权的，但又担心有人偷猫猫辛苦写出来的东西。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n"},{"title":"浅谈Linux容器安全：chroot，capability与namespace技术","date":"2022-12-05T08:21:47.000Z","cover":"/img/container-sec.jpg","top_img":"/img/container-sec.jpg","_content":"作者只是个萌新，大佬轻喷。\n文章最终确定以时间顺序浅谈Linux容器安全原理。\n安全原理相关知识网上已经有很多了，咱通过几个具体攻击实例来讲讲它们的真实作用。\n演示均在猫猫自己写的moe-container中进行，使用的是手机，因为实在懒得开电脑了喵………\n有关容器技术的具体实现参照咱的另一篇文章：\n[从零开始实现一个Linux容器](https://moe-hacker.github.io/2022/12/04/moe-container-lab/)\n好了，话不多说让我们开始吧喵！\n### chroot技术：\nchroot，顾名思义，改变应用程序所参考的根目录，是最早的容器隔离技术，据说最早可追溯到1979年的UNIX chroot，确实是个老东西呢喵～\nchroot可以对容器目录进行隔离，听起来还挺安全的………也只是听起来。\nchroot容器一般由root权限创建，但创建后并不会将特权进行移除，也就是说，chroot容器内部一般拥有和外部相等的特权。\n所以如果一个chroot容器被攻击，拿到了root权限会怎么样呢？\n会寄的呢喵！\n举两个简单的例子：\n你的硬盘设备在容器中拥有和宿主机一样的映射，也就是说可通过挂载宿主机目录形式轻松逃逸。\nchroot容器中可以随意杀死宿主机进程，或者制造一起kernel panic。\n让我们创建一个chroot容器，简简单单来玩个kill吧喵～\n```text\nlocalhost:~# pidof com.miui.misound\n21816\nlocalhost:~# kill -9 21816\nlocalhost:~# pidof com.miui.misound\nlocalhost:~#\n```\n没有任何问题呢喵～\n等下……misound是MIUI里干啥的进程……音质音效吧好像？\n不管了重启下接着写吧………\n### capability实现：\ncapability，意为能力，始于Linux2.1，它可以授予普通用户的进程一些特权，也可以使得root用户创建的进程自我降低权限。\n让我们来创建一个已经被移除了大量capability的chroot容器，再次试一试刚才的kill操作吧喵！\n```sh\nps -ae\n```\n```text\n1812 root      0:09 /vendor/bin/msm_irqbalance -f /system/vendor/etc/msm_i\n20079 root      0:00 -ash\n20111 root      0:00 ps -ae\n```\n哎等下，刚才的进程怎么看不到了喵喵喵？\n好吧是ptrace权限被删了，重新打开吧还是，咱好笨喵呜QwQ……\n```text\nlocalhost:~# pidof com.miui.misound\n21816\nlocalhost:~# kill -9 21816\nash: can't kill pid 21816: Operation not permitted\nlocalhost:~#\n```\nroot用户居然杀不死system用户的进程，这是何等的奇耻大辱喵！！！\n其实是因为容器里没有CAP_KILL权限了。\n但是如果我们杀root自己的进程：\n```text\nlocalhost:~# pidof ueventd\n15009\nlocalhost:~# kill -9 15009\nlocalhost:~# pidof ueventd\n13862\nlocalhost:~#\n```\nsystem的进程杀不死，居然能杀死root用户的守护进程喵？\n没错，CAP_KILL只能保护不归root用户创建的进程，阻止root用户进行降维打击，但对于同用户进程并不生效。\n说了半天还是不安全嘛！\n当然还是有办法的喵～\n### namespace技术：\nnamespace，意为命名空间，始于Linux2.4，提供一种内核级别隔离系统资源的方法。\n咱们通过namespace技术隔离下进程pid信息不就好了喵！\n于是我们进入使用unshare隔离了进程信息的容器中：\n```sh\nps -ae\n```\n```text\nPID   USER     TIME  COMMAND\n    1 root      0:00 -ash\n    4 root      0:00 ps -ae\n```\n进程信息确实被隔离了，现在看起来安全多了，所以既然capability和chroot这么鸡肋，那咱们就只用unshare就好了不是吗喵？\n当然是不行的呢！\nunshare容器由特权用户创建，容器内部root用户依然具有特权，即使被隔离也可以轻松逃逸或者损坏宿主机。\n我们来康康设备列表：\n```text\nlocalhost:~# ls /dev\nconsole  mqune    null     pts      shm      stdin    tty      urandom\nfd       net      ptmx     random   stderr   stdout   tty0     zero\nlocalhost:~#\n```\n由于猫猫自己写的容器程序是从内部创建设备文件，所以磁盘设备未被映射，但是：\n```sh\nmdev -s\n```\n设备映射脚本甚至不用自己写。\n```text\nlocalhost:~# dd if=/dev/sde50 of=boot.img\n262144+0 records in\n262144+0 records out\nlocalhost:~# dd if=boot.img of=/dev/sde50\n262144+0 records in\n262144+0 records out\nlocalhost:~#\n```\n于是手机的boot分区被猫猫读取出来又写入了回去………真无聊喵～\n这个过程说明什么呢？说明只用unshare并不安全。\n攻击者可能无法直接逃出当前namespace，但是挂载宿主机目录逃逸和硬盘数据损坏依然可以进行。\n不过面对一个被移除了特权又利用到namespace技术的容器，即使被攻击也很难逃出去了，因为设备写入，映射和挂载都需要有相应的capability才能实现，这便是docker等容器的实现原理了。\n### 总结：\nchroot，capability和namespace技术是Linux容器发展的成果，只有三项技术同时使用，才能达到真正的容器安全。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","source":"_posts/moe-container-sec.md","raw":"---\ntitle: 浅谈Linux容器安全：chroot，capability与namespace技术\ndate: 2022-12-05 16:21:47\ncover: /img/container-sec.jpg\ntop_img: /img/container-sec.jpg\ntags:\n  - Linux\n  - container\n  - Docker\n---\n作者只是个萌新，大佬轻喷。\n文章最终确定以时间顺序浅谈Linux容器安全原理。\n安全原理相关知识网上已经有很多了，咱通过几个具体攻击实例来讲讲它们的真实作用。\n演示均在猫猫自己写的moe-container中进行，使用的是手机，因为实在懒得开电脑了喵………\n有关容器技术的具体实现参照咱的另一篇文章：\n[从零开始实现一个Linux容器](https://moe-hacker.github.io/2022/12/04/moe-container-lab/)\n好了，话不多说让我们开始吧喵！\n### chroot技术：\nchroot，顾名思义，改变应用程序所参考的根目录，是最早的容器隔离技术，据说最早可追溯到1979年的UNIX chroot，确实是个老东西呢喵～\nchroot可以对容器目录进行隔离，听起来还挺安全的………也只是听起来。\nchroot容器一般由root权限创建，但创建后并不会将特权进行移除，也就是说，chroot容器内部一般拥有和外部相等的特权。\n所以如果一个chroot容器被攻击，拿到了root权限会怎么样呢？\n会寄的呢喵！\n举两个简单的例子：\n你的硬盘设备在容器中拥有和宿主机一样的映射，也就是说可通过挂载宿主机目录形式轻松逃逸。\nchroot容器中可以随意杀死宿主机进程，或者制造一起kernel panic。\n让我们创建一个chroot容器，简简单单来玩个kill吧喵～\n```text\nlocalhost:~# pidof com.miui.misound\n21816\nlocalhost:~# kill -9 21816\nlocalhost:~# pidof com.miui.misound\nlocalhost:~#\n```\n没有任何问题呢喵～\n等下……misound是MIUI里干啥的进程……音质音效吧好像？\n不管了重启下接着写吧………\n### capability实现：\ncapability，意为能力，始于Linux2.1，它可以授予普通用户的进程一些特权，也可以使得root用户创建的进程自我降低权限。\n让我们来创建一个已经被移除了大量capability的chroot容器，再次试一试刚才的kill操作吧喵！\n```sh\nps -ae\n```\n```text\n1812 root      0:09 /vendor/bin/msm_irqbalance -f /system/vendor/etc/msm_i\n20079 root      0:00 -ash\n20111 root      0:00 ps -ae\n```\n哎等下，刚才的进程怎么看不到了喵喵喵？\n好吧是ptrace权限被删了，重新打开吧还是，咱好笨喵呜QwQ……\n```text\nlocalhost:~# pidof com.miui.misound\n21816\nlocalhost:~# kill -9 21816\nash: can't kill pid 21816: Operation not permitted\nlocalhost:~#\n```\nroot用户居然杀不死system用户的进程，这是何等的奇耻大辱喵！！！\n其实是因为容器里没有CAP_KILL权限了。\n但是如果我们杀root自己的进程：\n```text\nlocalhost:~# pidof ueventd\n15009\nlocalhost:~# kill -9 15009\nlocalhost:~# pidof ueventd\n13862\nlocalhost:~#\n```\nsystem的进程杀不死，居然能杀死root用户的守护进程喵？\n没错，CAP_KILL只能保护不归root用户创建的进程，阻止root用户进行降维打击，但对于同用户进程并不生效。\n说了半天还是不安全嘛！\n当然还是有办法的喵～\n### namespace技术：\nnamespace，意为命名空间，始于Linux2.4，提供一种内核级别隔离系统资源的方法。\n咱们通过namespace技术隔离下进程pid信息不就好了喵！\n于是我们进入使用unshare隔离了进程信息的容器中：\n```sh\nps -ae\n```\n```text\nPID   USER     TIME  COMMAND\n    1 root      0:00 -ash\n    4 root      0:00 ps -ae\n```\n进程信息确实被隔离了，现在看起来安全多了，所以既然capability和chroot这么鸡肋，那咱们就只用unshare就好了不是吗喵？\n当然是不行的呢！\nunshare容器由特权用户创建，容器内部root用户依然具有特权，即使被隔离也可以轻松逃逸或者损坏宿主机。\n我们来康康设备列表：\n```text\nlocalhost:~# ls /dev\nconsole  mqune    null     pts      shm      stdin    tty      urandom\nfd       net      ptmx     random   stderr   stdout   tty0     zero\nlocalhost:~#\n```\n由于猫猫自己写的容器程序是从内部创建设备文件，所以磁盘设备未被映射，但是：\n```sh\nmdev -s\n```\n设备映射脚本甚至不用自己写。\n```text\nlocalhost:~# dd if=/dev/sde50 of=boot.img\n262144+0 records in\n262144+0 records out\nlocalhost:~# dd if=boot.img of=/dev/sde50\n262144+0 records in\n262144+0 records out\nlocalhost:~#\n```\n于是手机的boot分区被猫猫读取出来又写入了回去………真无聊喵～\n这个过程说明什么呢？说明只用unshare并不安全。\n攻击者可能无法直接逃出当前namespace，但是挂载宿主机目录逃逸和硬盘数据损坏依然可以进行。\n不过面对一个被移除了特权又利用到namespace技术的容器，即使被攻击也很难逃出去了，因为设备写入，映射和挂载都需要有相应的capability才能实现，这便是docker等容器的实现原理了。\n### 总结：\nchroot，capability和namespace技术是Linux容器发展的成果，只有三项技术同时使用，才能达到真正的容器安全。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","slug":"moe-container-sec","published":1,"updated":"2023-05-16T13:05:30.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clid27xud0006vttwhqyv8rww","content":"<p>作者只是个萌新，大佬轻喷。<br>文章最终确定以时间顺序浅谈Linux容器安全原理。<br>安全原理相关知识网上已经有很多了，咱通过几个具体攻击实例来讲讲它们的真实作用。<br>演示均在猫猫自己写的moe-container中进行，使用的是手机，因为实在懒得开电脑了喵………<br>有关容器技术的具体实现参照咱的另一篇文章：<br><a href=\"https://moe-hacker.github.io/2022/12/04/moe-container-lab/\">从零开始实现一个Linux容器</a><br>好了，话不多说让我们开始吧喵！</p>\n<h3 id=\"chroot技术：\"><a href=\"#chroot技术：\" class=\"headerlink\" title=\"chroot技术：\"></a>chroot技术：</h3><p>chroot，顾名思义，改变应用程序所参考的根目录，是最早的容器隔离技术，据说最早可追溯到1979年的UNIX chroot，确实是个老东西呢喵～<br>chroot可以对容器目录进行隔离，听起来还挺安全的………也只是听起来。<br>chroot容器一般由root权限创建，但创建后并不会将特权进行移除，也就是说，chroot容器内部一般拥有和外部相等的特权。<br>所以如果一个chroot容器被攻击，拿到了root权限会怎么样呢？<br>会寄的呢喵！<br>举两个简单的例子：<br>你的硬盘设备在容器中拥有和宿主机一样的映射，也就是说可通过挂载宿主机目录形式轻松逃逸。<br>chroot容器中可以随意杀死宿主机进程，或者制造一起kernel panic。<br>让我们创建一个chroot容器，简简单单来玩个kill吧喵～</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# pidof com.miui.misound</span><br><span class=\"line\">21816</span><br><span class=\"line\">localhost:~# kill -9 21816</span><br><span class=\"line\">localhost:~# pidof com.miui.misound</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>没有任何问题呢喵～<br>等下……misound是MIUI里干啥的进程……音质音效吧好像？<br>不管了重启下接着写吧………</p>\n<h3 id=\"capability实现：\"><a href=\"#capability实现：\" class=\"headerlink\" title=\"capability实现：\"></a>capability实现：</h3><p>capability，意为能力，始于Linux2.1，它可以授予普通用户的进程一些特权，也可以使得root用户创建的进程自我降低权限。<br>让我们来创建一个已经被移除了大量capability的chroot容器，再次试一试刚才的kill操作吧喵！</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ae</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1812 root      0:09 /vendor/bin/msm_irqbalance -f /system/vendor/etc/msm_i</span><br><span class=\"line\">20079 root      0:00 -ash</span><br><span class=\"line\">20111 root      0:00 ps -ae</span><br></pre></td></tr></table></figure>\n<p>哎等下，刚才的进程怎么看不到了喵喵喵？<br>好吧是ptrace权限被删了，重新打开吧还是，咱好笨喵呜QwQ……</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# pidof com.miui.misound</span><br><span class=\"line\">21816</span><br><span class=\"line\">localhost:~# kill -9 21816</span><br><span class=\"line\">ash: can&#x27;t kill pid 21816: Operation not permitted</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>root用户居然杀不死system用户的进程，这是何等的奇耻大辱喵！！！<br>其实是因为容器里没有CAP_KILL权限了。<br>但是如果我们杀root自己的进程：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# pidof ueventd</span><br><span class=\"line\">15009</span><br><span class=\"line\">localhost:~# kill -9 15009</span><br><span class=\"line\">localhost:~# pidof ueventd</span><br><span class=\"line\">13862</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>system的进程杀不死，居然能杀死root用户的守护进程喵？<br>没错，CAP_KILL只能保护不归root用户创建的进程，阻止root用户进行降维打击，但对于同用户进程并不生效。<br>说了半天还是不安全嘛！<br>当然还是有办法的喵～</p>\n<h3 id=\"namespace技术：\"><a href=\"#namespace技术：\" class=\"headerlink\" title=\"namespace技术：\"></a>namespace技术：</h3><p>namespace，意为命名空间，始于Linux2.4，提供一种内核级别隔离系统资源的方法。<br>咱们通过namespace技术隔离下进程pid信息不就好了喵！<br>于是我们进入使用unshare隔离了进程信息的容器中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ae</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID   USER     TIME  COMMAND</span><br><span class=\"line\">    1 root      0:00 -ash</span><br><span class=\"line\">    4 root      0:00 ps -ae</span><br></pre></td></tr></table></figure>\n<p>进程信息确实被隔离了，现在看起来安全多了，所以既然capability和chroot这么鸡肋，那咱们就只用unshare就好了不是吗喵？<br>当然是不行的呢！<br>unshare容器由特权用户创建，容器内部root用户依然具有特权，即使被隔离也可以轻松逃逸或者损坏宿主机。<br>我们来康康设备列表：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# ls /dev</span><br><span class=\"line\">console  mqune    null     pts      shm      stdin    tty      urandom</span><br><span class=\"line\">fd       net      ptmx     random   stderr   stdout   tty0     zero</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>由于猫猫自己写的容器程序是从内部创建设备文件，所以磁盘设备未被映射，但是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mdev -s</span><br></pre></td></tr></table></figure>\n<p>设备映射脚本甚至不用自己写。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# dd if=/dev/sde50 of=boot.img</span><br><span class=\"line\">262144+0 records in</span><br><span class=\"line\">262144+0 records out</span><br><span class=\"line\">localhost:~# dd if=boot.img of=/dev/sde50</span><br><span class=\"line\">262144+0 records in</span><br><span class=\"line\">262144+0 records out</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>于是手机的boot分区被猫猫读取出来又写入了回去………真无聊喵～<br>这个过程说明什么呢？说明只用unshare并不安全。<br>攻击者可能无法直接逃出当前namespace，但是挂载宿主机目录逃逸和硬盘数据损坏依然可以进行。<br>不过面对一个被移除了特权又利用到namespace技术的容器，即使被攻击也很难逃出去了，因为设备写入，映射和挂载都需要有相应的capability才能实现，这便是docker等容器的实现原理了。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>chroot，capability和namespace技术是Linux容器发展的成果，只有三项技术同时使用，才能达到真正的容器安全。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover_type":"img","excerpt":"","more":"<p>作者只是个萌新，大佬轻喷。<br>文章最终确定以时间顺序浅谈Linux容器安全原理。<br>安全原理相关知识网上已经有很多了，咱通过几个具体攻击实例来讲讲它们的真实作用。<br>演示均在猫猫自己写的moe-container中进行，使用的是手机，因为实在懒得开电脑了喵………<br>有关容器技术的具体实现参照咱的另一篇文章：<br><a href=\"https://moe-hacker.github.io/2022/12/04/moe-container-lab/\">从零开始实现一个Linux容器</a><br>好了，话不多说让我们开始吧喵！</p>\n<h3 id=\"chroot技术：\"><a href=\"#chroot技术：\" class=\"headerlink\" title=\"chroot技术：\"></a>chroot技术：</h3><p>chroot，顾名思义，改变应用程序所参考的根目录，是最早的容器隔离技术，据说最早可追溯到1979年的UNIX chroot，确实是个老东西呢喵～<br>chroot可以对容器目录进行隔离，听起来还挺安全的………也只是听起来。<br>chroot容器一般由root权限创建，但创建后并不会将特权进行移除，也就是说，chroot容器内部一般拥有和外部相等的特权。<br>所以如果一个chroot容器被攻击，拿到了root权限会怎么样呢？<br>会寄的呢喵！<br>举两个简单的例子：<br>你的硬盘设备在容器中拥有和宿主机一样的映射，也就是说可通过挂载宿主机目录形式轻松逃逸。<br>chroot容器中可以随意杀死宿主机进程，或者制造一起kernel panic。<br>让我们创建一个chroot容器，简简单单来玩个kill吧喵～</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# pidof com.miui.misound</span><br><span class=\"line\">21816</span><br><span class=\"line\">localhost:~# kill -9 21816</span><br><span class=\"line\">localhost:~# pidof com.miui.misound</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>没有任何问题呢喵～<br>等下……misound是MIUI里干啥的进程……音质音效吧好像？<br>不管了重启下接着写吧………</p>\n<h3 id=\"capability实现：\"><a href=\"#capability实现：\" class=\"headerlink\" title=\"capability实现：\"></a>capability实现：</h3><p>capability，意为能力，始于Linux2.1，它可以授予普通用户的进程一些特权，也可以使得root用户创建的进程自我降低权限。<br>让我们来创建一个已经被移除了大量capability的chroot容器，再次试一试刚才的kill操作吧喵！</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ae</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1812 root      0:09 /vendor/bin/msm_irqbalance -f /system/vendor/etc/msm_i</span><br><span class=\"line\">20079 root      0:00 -ash</span><br><span class=\"line\">20111 root      0:00 ps -ae</span><br></pre></td></tr></table></figure>\n<p>哎等下，刚才的进程怎么看不到了喵喵喵？<br>好吧是ptrace权限被删了，重新打开吧还是，咱好笨喵呜QwQ……</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# pidof com.miui.misound</span><br><span class=\"line\">21816</span><br><span class=\"line\">localhost:~# kill -9 21816</span><br><span class=\"line\">ash: can&#x27;t kill pid 21816: Operation not permitted</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>root用户居然杀不死system用户的进程，这是何等的奇耻大辱喵！！！<br>其实是因为容器里没有CAP_KILL权限了。<br>但是如果我们杀root自己的进程：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# pidof ueventd</span><br><span class=\"line\">15009</span><br><span class=\"line\">localhost:~# kill -9 15009</span><br><span class=\"line\">localhost:~# pidof ueventd</span><br><span class=\"line\">13862</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>system的进程杀不死，居然能杀死root用户的守护进程喵？<br>没错，CAP_KILL只能保护不归root用户创建的进程，阻止root用户进行降维打击，但对于同用户进程并不生效。<br>说了半天还是不安全嘛！<br>当然还是有办法的喵～</p>\n<h3 id=\"namespace技术：\"><a href=\"#namespace技术：\" class=\"headerlink\" title=\"namespace技术：\"></a>namespace技术：</h3><p>namespace，意为命名空间，始于Linux2.4，提供一种内核级别隔离系统资源的方法。<br>咱们通过namespace技术隔离下进程pid信息不就好了喵！<br>于是我们进入使用unshare隔离了进程信息的容器中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ae</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID   USER     TIME  COMMAND</span><br><span class=\"line\">    1 root      0:00 -ash</span><br><span class=\"line\">    4 root      0:00 ps -ae</span><br></pre></td></tr></table></figure>\n<p>进程信息确实被隔离了，现在看起来安全多了，所以既然capability和chroot这么鸡肋，那咱们就只用unshare就好了不是吗喵？<br>当然是不行的呢！<br>unshare容器由特权用户创建，容器内部root用户依然具有特权，即使被隔离也可以轻松逃逸或者损坏宿主机。<br>我们来康康设备列表：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# ls /dev</span><br><span class=\"line\">console  mqune    null     pts      shm      stdin    tty      urandom</span><br><span class=\"line\">fd       net      ptmx     random   stderr   stdout   tty0     zero</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>由于猫猫自己写的容器程序是从内部创建设备文件，所以磁盘设备未被映射，但是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mdev -s</span><br></pre></td></tr></table></figure>\n<p>设备映射脚本甚至不用自己写。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:~# dd if=/dev/sde50 of=boot.img</span><br><span class=\"line\">262144+0 records in</span><br><span class=\"line\">262144+0 records out</span><br><span class=\"line\">localhost:~# dd if=boot.img of=/dev/sde50</span><br><span class=\"line\">262144+0 records in</span><br><span class=\"line\">262144+0 records out</span><br><span class=\"line\">localhost:~#</span><br></pre></td></tr></table></figure>\n<p>于是手机的boot分区被猫猫读取出来又写入了回去………真无聊喵～<br>这个过程说明什么呢？说明只用unshare并不安全。<br>攻击者可能无法直接逃出当前namespace，但是挂载宿主机目录逃逸和硬盘数据损坏依然可以进行。<br>不过面对一个被移除了特权又利用到namespace技术的容器，即使被攻击也很难逃出去了，因为设备写入，映射和挂载都需要有相应的capability才能实现，这便是docker等容器的实现原理了。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>chroot，capability和namespace技术是Linux容器发展的成果，只有三项技术同时使用，才能达到真正的容器安全。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n"},{"title":"为你的手机内核开启docker支持","date":"2022-12-04T15:42:50.000Z","cover":"/img/docker-lab.jpg","top_img":"/img/docker-lab.jpg","_content":"欢迎来到猫猫的Docker实验室喵！\n在这里，你将会学习如何为自己的手机开启docker支持，期待你的成果喵～\n文章会包含一些小技巧和docker基本异常处理，毕竟这只可爱的猫猫是不会向你隐瞒自己知道的东西的，真是一只傻的可爱的猫猫呢～\n文章内所述手机为arm64架构，上古时期的32位架构请自行修改。\n注：pixel系列设备请换用repo工具以及官方构建工具并使用ThinLTO（在内存小于32G的设备上）。\n好了让我们开始吧喵！\n### 首要前提：\n- 手机能够解锁bl并获取root权限\n- 手机内核开源，尽量是有大佬维护源码的\n- 拥有一定Linux基础\n\n如果设备或个人不满足以上条件者请自行退出喵！本猫猫是没时间给你解释为什么的。\n### 前期准备：\n你可能需要准备如下内容：\n- Linux系统环境(理论上手机电脑均可，电脑最佳)\n- 熟练使用搜索工具\n- git和make以及代码编辑工具的使用\n- 基本了解cpu架构差异\n\n这些内容猫猫是不会教你的，毕竟这不是文章重点喵唔……\n当然最好有个脑子，可惜猫猫没有呜QAQ………\n### 正式操作：\n#### 0x0001 root手机，不必多说\n#### 0x0002 获取手机代号和cpu代号\n这一步请通过搜索工具进行。\n比如猫猫现在用的小米10ultra代号cas，cpu代号SM8250。\n#### 0x0003 查找内核源码\n可以去官方仓库，当然咱建议用第三方的，因为官方内核很多时候还不如第三方好跑呢。\n查找方式：官方仓库查找设备代号或github搜索关键字kernel + 设备代号或者反过来或者搜索cpu代号+手机厂商+kernel，各种组合和命名方式都试过了还找不到的话，多半是没有了，猫猫也没有办法呢。\n#### 0x0004 编译工具选择\n手机执行：\n```sh\ncat /proc/version\n```\n猫猫的手机会有如下输出：\n```\nLinux version 4.19.260-Moe-hacker-g0bb1c026ee65-dirty (root@localhost) (Ubuntu clang version 14.0.6-2, GNU ld (GNU Binutils for Ubuntu) 2.39) #3 SMP PREEMPT Sun Oct 2 10:48:46 CST 2022\n```\n当然猫猫已经完成内核编译了，仔细观察会发现内核由clang-14编译。\n对应llvm版本也为14。\n于是你确认了要用的编译器版本。\n如果内核是由谷歌的安卓开发工具构建，请自行查找并下载。\n小技巧：使用原系统内核使用的编译器版本可以降低出错概率。\n#### 0x0005 源码获取：\n使用git clone项目仓库，如果是官方仓库需要加入-b选项克隆机型独立的分支。\n国内用户访问github不方便的可以换用ssh协议（git clone ssh@github.com:用户or组织名称/代码仓库）\n或者换用镜像站kgithub.com或ghproxy.com等。\n#### 0x0006 依赖安装：\n主要依赖有：clang/gcc构建工具,跨架构binutils工具(跨架构编译需要),make,python,libssl-dev,build-essential,bc,bison,flex,unzip,libssl-dev,ca-certificates,xz-utils,mkbootimg,cpio,device-tree-compiler，请自行安装，否则编译会出错。\n编译出现command not found大概率是工具没有安装。\ndebian系的系统解决文件缺失推荐`apt-file search`命令。\n#### 0x0007 尝试编译：\n进入项目目录\n```sh\nls arch/arm64/configs\n```\n康一康有没有你的机型代号相关的文件，一般是[机型代号]_defcofig，也有带stock或者perf的命名，选一个就行。\n没有的话也不要着急，再看一下vendor目录：\n```sh\nls arch/arm64/configs/vendor\n```\n桥豆麻袋，还是找不到啊！！！\ngithub去arch/arm64/configs目录下看看提交记录，最近变更最多的大概率是。比如nothing的三方内核源码配置文件是vendor/lahaina-qgki_defconfig。\n或者根据版本号，三方内核配置中CONFIG_LOCALVERSION值大概率不是默认。\n然后，呐，现在要开始编译了哦喵！\n```sh\nexport ARCH=arm64\nexport SUBARCH=arm64\nmake O=out CC=[clang/gcc-版本号] (vendor/)xxxxxx_defconfig ［可选参数］\n```\n可选参数详解：\n```sh\n#非电脑跨架构编译省略\nARCH=arm64\nCROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-\n#本人基本没用到过，按需开启\nAR=llvm-ar-版本号\nOBJDUMP=llvm-objdump-版本号\nSTRIP=llvm-strip-版本号\nNM=llvm-nm-版本号\nOBJCOPY=llvm-objcopy-版本号\nLD=ld.lld-版本号\n```\n以上可选参数可用于报错处理以及确保llvm工具版本与clang一致，酌情加入。\n然后，其他参数不变，删掉(vendor/)xxxxxx_defconfig这个，改为-j$(nproc)，开始构建内核。\n#### 0x0008 基本异常处理：\n找不到头文件：\n安装相应库。\n找不到命令：\n安装相应软件。\n-Werror,xxxxxxx：\n找报错的文件相应Makefile,把含有-werror的都删了(每一层目录都有，建议从报错文件那一层往父目录找)，或者make选项改为CC=\"[clang/gcc]-版本号 -w\"\n未定义函数或其他未定义：\n查找函数定义开启所依赖的配置项一并开启，可能在头文件或kconfig/makefile中。\n最后一步生成vmlinux时报错大概率是因为配置没开全。\n#### 0x0009 玄学异常：\n在编译pixel3内核时，C语言零基础的猫猫删了一行源码成功生成内核，开机功能一切正常。\n在编译小米10Ultra内核时一行源码少了一个地址符&，手动添加后一切正常。\n遇到这种不可预知的玄学异常建议动用搜索工具，或者学会放弃。\n引用沨鸾在酷安的原文：会修的就修，修不了换源码，换编译器版本，手机电脑换着试，最后放弃就好了。\n如果你跨过了首次编译这道坎，那么恭喜，你离成功不远了喵！\n#### 0x000A 功能开启：\n下载check-config.sh\n```sh\nwget https://github.com/moby/moby/raw/master/contrib/check-config.sh\n```\n网络不好请使用kgithub镜像站，目前可用。\n然后：\n```sh\nsh check-config.sh out/.config|grep missing|sed -E 's/\\-//g'|sed -E \"s/ //g\"|sed -r 's/://'|sed -E \"s/missing/=y/\"\n```\n善良的猫猫甚至帮大家写好了字符替换，猫猫自己都没这待遇呢。\n于是你得到了内核未开启的的配置列表。\n```\nCONFIG_AUFS_FS=y\n/dev/zfs=y\nzfscommand=y\nzpoolcommand=y\n```\n以上这几个输出不用管，删了就好，这几个的源码实现均未并入linux4.x主分支。\n然后把缺失的config加入你的(vendor/)xxxxxx_defconfig中，并将里面带有is not set的字样全部删除，执行编译第一步，再次生成配置。\n这一步你可以更改local version值为你的名字或者你喜欢的单词。\n再次执行扫描命令，获取缺失项目。\n使用make menuconfig命令，按下/键搜索缺失项目的依赖与冲突，依赖添加开启选项，冲突关闭。\n注意：menuconfig配置默认不带CONFIG_头，需要手动添加。\n然后，将配置中所有=m替换为=y，目的是将内核模块built-in。\n请确认最终生成out/.config中不包含=m字样。\n#### 0x000B 再次编译：\n请自行repeat上文所述编译步骤。\n生成文件在out/arch/arm64/boot/目录下，大部分命名为Image.xxx-dtb，但是注意，少数机型只能刷入Image.xx格式镜像。\n#### 0x000C 验证config：\nscripts目录下有个extract-ikconfig，用它把Image的配置扫出来输出到一个文件，check-config.sh除上文所讲述的无法开启的配置全绿即可。\n如果遇到内核config和out/.config内容不一致，查找kernel/Makefile，找到\\$(obj)/config_data.gz:xxxxxxxxxx，把xxxxxxxx改成\\$(obj)/config_data\n#### 0x000D 刷入：\n下载刷入工具：\n```sh\ngit clone https://github.com/osm0sis/AnyKernel3\n```\n编辑anykernel.sh，修改如下内容：\ndevice.name1=设备代号\nblock=/dev/block/bootdevice/by-name/boot;\nis_slot_device=如果是ab架构分区设备填1，否则填0\n将Image.xxx-dtb复制到anykernel根目录下，打包anykernel根目录，twrp刷入。\n注意，少数机型只能刷入Image.xx格式镜像。\n于是你就到了最终环节：开机，验证。\n教程完毕，相信你也可以在手机上运行自己的内核了喵！\n### 基本报错处理：\n如果报错如下：\n```log\ndocker: Error response from daemon: OCI \nruntime create failed: container_linux.go:370: starting \ncontainer process caused: process_linux.go:326: applying \ncgroup configuration for process caused: mountpoint for \ndevices not found: unknown. \n``` \n那么您需要手动挂载cgroupfs(root权限执行):\n```sh\nmount -t tmpfs -o mode=755 tmpfs /sys/fs/cgroup\nmkdir -p /sys/fs/cgroup/devices\nmount -t cgroup -o devices cgroup /sys/fs/cgroup/devices\n```\n然后，重启docker即可。 \n容器中没网可通过在容器中执行以下脚本解决root用户联网问题： \n[group_add.sh](https://github.com/Moe-hacker/termux-container/blob/main/package-zh/data/data/com.termux/files/usr/share/termux-container/group_add.sh)\n猫猫自己没有遇到过的两个异常解决方式：\n添加--iptables=false参数\n设置DOCKER_RAMDISK=true\n本文完。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","source":"_posts/moe-docker-lab.md","raw":"---\ntitle: 为你的手机内核开启docker支持\ndate: 2022-12-04 23:42:50\ntags:\n  - Linux\n  - Termux\n  - Docker\n  - container\ncover: /img/docker-lab.jpg\ntop_img: /img/docker-lab.jpg\n---\n欢迎来到猫猫的Docker实验室喵！\n在这里，你将会学习如何为自己的手机开启docker支持，期待你的成果喵～\n文章会包含一些小技巧和docker基本异常处理，毕竟这只可爱的猫猫是不会向你隐瞒自己知道的东西的，真是一只傻的可爱的猫猫呢～\n文章内所述手机为arm64架构，上古时期的32位架构请自行修改。\n注：pixel系列设备请换用repo工具以及官方构建工具并使用ThinLTO（在内存小于32G的设备上）。\n好了让我们开始吧喵！\n### 首要前提：\n- 手机能够解锁bl并获取root权限\n- 手机内核开源，尽量是有大佬维护源码的\n- 拥有一定Linux基础\n\n如果设备或个人不满足以上条件者请自行退出喵！本猫猫是没时间给你解释为什么的。\n### 前期准备：\n你可能需要准备如下内容：\n- Linux系统环境(理论上手机电脑均可，电脑最佳)\n- 熟练使用搜索工具\n- git和make以及代码编辑工具的使用\n- 基本了解cpu架构差异\n\n这些内容猫猫是不会教你的，毕竟这不是文章重点喵唔……\n当然最好有个脑子，可惜猫猫没有呜QAQ………\n### 正式操作：\n#### 0x0001 root手机，不必多说\n#### 0x0002 获取手机代号和cpu代号\n这一步请通过搜索工具进行。\n比如猫猫现在用的小米10ultra代号cas，cpu代号SM8250。\n#### 0x0003 查找内核源码\n可以去官方仓库，当然咱建议用第三方的，因为官方内核很多时候还不如第三方好跑呢。\n查找方式：官方仓库查找设备代号或github搜索关键字kernel + 设备代号或者反过来或者搜索cpu代号+手机厂商+kernel，各种组合和命名方式都试过了还找不到的话，多半是没有了，猫猫也没有办法呢。\n#### 0x0004 编译工具选择\n手机执行：\n```sh\ncat /proc/version\n```\n猫猫的手机会有如下输出：\n```\nLinux version 4.19.260-Moe-hacker-g0bb1c026ee65-dirty (root@localhost) (Ubuntu clang version 14.0.6-2, GNU ld (GNU Binutils for Ubuntu) 2.39) #3 SMP PREEMPT Sun Oct 2 10:48:46 CST 2022\n```\n当然猫猫已经完成内核编译了，仔细观察会发现内核由clang-14编译。\n对应llvm版本也为14。\n于是你确认了要用的编译器版本。\n如果内核是由谷歌的安卓开发工具构建，请自行查找并下载。\n小技巧：使用原系统内核使用的编译器版本可以降低出错概率。\n#### 0x0005 源码获取：\n使用git clone项目仓库，如果是官方仓库需要加入-b选项克隆机型独立的分支。\n国内用户访问github不方便的可以换用ssh协议（git clone ssh@github.com:用户or组织名称/代码仓库）\n或者换用镜像站kgithub.com或ghproxy.com等。\n#### 0x0006 依赖安装：\n主要依赖有：clang/gcc构建工具,跨架构binutils工具(跨架构编译需要),make,python,libssl-dev,build-essential,bc,bison,flex,unzip,libssl-dev,ca-certificates,xz-utils,mkbootimg,cpio,device-tree-compiler，请自行安装，否则编译会出错。\n编译出现command not found大概率是工具没有安装。\ndebian系的系统解决文件缺失推荐`apt-file search`命令。\n#### 0x0007 尝试编译：\n进入项目目录\n```sh\nls arch/arm64/configs\n```\n康一康有没有你的机型代号相关的文件，一般是[机型代号]_defcofig，也有带stock或者perf的命名，选一个就行。\n没有的话也不要着急，再看一下vendor目录：\n```sh\nls arch/arm64/configs/vendor\n```\n桥豆麻袋，还是找不到啊！！！\ngithub去arch/arm64/configs目录下看看提交记录，最近变更最多的大概率是。比如nothing的三方内核源码配置文件是vendor/lahaina-qgki_defconfig。\n或者根据版本号，三方内核配置中CONFIG_LOCALVERSION值大概率不是默认。\n然后，呐，现在要开始编译了哦喵！\n```sh\nexport ARCH=arm64\nexport SUBARCH=arm64\nmake O=out CC=[clang/gcc-版本号] (vendor/)xxxxxx_defconfig ［可选参数］\n```\n可选参数详解：\n```sh\n#非电脑跨架构编译省略\nARCH=arm64\nCROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-\n#本人基本没用到过，按需开启\nAR=llvm-ar-版本号\nOBJDUMP=llvm-objdump-版本号\nSTRIP=llvm-strip-版本号\nNM=llvm-nm-版本号\nOBJCOPY=llvm-objcopy-版本号\nLD=ld.lld-版本号\n```\n以上可选参数可用于报错处理以及确保llvm工具版本与clang一致，酌情加入。\n然后，其他参数不变，删掉(vendor/)xxxxxx_defconfig这个，改为-j$(nproc)，开始构建内核。\n#### 0x0008 基本异常处理：\n找不到头文件：\n安装相应库。\n找不到命令：\n安装相应软件。\n-Werror,xxxxxxx：\n找报错的文件相应Makefile,把含有-werror的都删了(每一层目录都有，建议从报错文件那一层往父目录找)，或者make选项改为CC=\"[clang/gcc]-版本号 -w\"\n未定义函数或其他未定义：\n查找函数定义开启所依赖的配置项一并开启，可能在头文件或kconfig/makefile中。\n最后一步生成vmlinux时报错大概率是因为配置没开全。\n#### 0x0009 玄学异常：\n在编译pixel3内核时，C语言零基础的猫猫删了一行源码成功生成内核，开机功能一切正常。\n在编译小米10Ultra内核时一行源码少了一个地址符&，手动添加后一切正常。\n遇到这种不可预知的玄学异常建议动用搜索工具，或者学会放弃。\n引用沨鸾在酷安的原文：会修的就修，修不了换源码，换编译器版本，手机电脑换着试，最后放弃就好了。\n如果你跨过了首次编译这道坎，那么恭喜，你离成功不远了喵！\n#### 0x000A 功能开启：\n下载check-config.sh\n```sh\nwget https://github.com/moby/moby/raw/master/contrib/check-config.sh\n```\n网络不好请使用kgithub镜像站，目前可用。\n然后：\n```sh\nsh check-config.sh out/.config|grep missing|sed -E 's/\\-//g'|sed -E \"s/ //g\"|sed -r 's/://'|sed -E \"s/missing/=y/\"\n```\n善良的猫猫甚至帮大家写好了字符替换，猫猫自己都没这待遇呢。\n于是你得到了内核未开启的的配置列表。\n```\nCONFIG_AUFS_FS=y\n/dev/zfs=y\nzfscommand=y\nzpoolcommand=y\n```\n以上这几个输出不用管，删了就好，这几个的源码实现均未并入linux4.x主分支。\n然后把缺失的config加入你的(vendor/)xxxxxx_defconfig中，并将里面带有is not set的字样全部删除，执行编译第一步，再次生成配置。\n这一步你可以更改local version值为你的名字或者你喜欢的单词。\n再次执行扫描命令，获取缺失项目。\n使用make menuconfig命令，按下/键搜索缺失项目的依赖与冲突，依赖添加开启选项，冲突关闭。\n注意：menuconfig配置默认不带CONFIG_头，需要手动添加。\n然后，将配置中所有=m替换为=y，目的是将内核模块built-in。\n请确认最终生成out/.config中不包含=m字样。\n#### 0x000B 再次编译：\n请自行repeat上文所述编译步骤。\n生成文件在out/arch/arm64/boot/目录下，大部分命名为Image.xxx-dtb，但是注意，少数机型只能刷入Image.xx格式镜像。\n#### 0x000C 验证config：\nscripts目录下有个extract-ikconfig，用它把Image的配置扫出来输出到一个文件，check-config.sh除上文所讲述的无法开启的配置全绿即可。\n如果遇到内核config和out/.config内容不一致，查找kernel/Makefile，找到\\$(obj)/config_data.gz:xxxxxxxxxx，把xxxxxxxx改成\\$(obj)/config_data\n#### 0x000D 刷入：\n下载刷入工具：\n```sh\ngit clone https://github.com/osm0sis/AnyKernel3\n```\n编辑anykernel.sh，修改如下内容：\ndevice.name1=设备代号\nblock=/dev/block/bootdevice/by-name/boot;\nis_slot_device=如果是ab架构分区设备填1，否则填0\n将Image.xxx-dtb复制到anykernel根目录下，打包anykernel根目录，twrp刷入。\n注意，少数机型只能刷入Image.xx格式镜像。\n于是你就到了最终环节：开机，验证。\n教程完毕，相信你也可以在手机上运行自己的内核了喵！\n### 基本报错处理：\n如果报错如下：\n```log\ndocker: Error response from daemon: OCI \nruntime create failed: container_linux.go:370: starting \ncontainer process caused: process_linux.go:326: applying \ncgroup configuration for process caused: mountpoint for \ndevices not found: unknown. \n``` \n那么您需要手动挂载cgroupfs(root权限执行):\n```sh\nmount -t tmpfs -o mode=755 tmpfs /sys/fs/cgroup\nmkdir -p /sys/fs/cgroup/devices\nmount -t cgroup -o devices cgroup /sys/fs/cgroup/devices\n```\n然后，重启docker即可。 \n容器中没网可通过在容器中执行以下脚本解决root用户联网问题： \n[group_add.sh](https://github.com/Moe-hacker/termux-container/blob/main/package-zh/data/data/com.termux/files/usr/share/termux-container/group_add.sh)\n猫猫自己没有遇到过的两个异常解决方式：\n添加--iptables=false参数\n设置DOCKER_RAMDISK=true\n本文完。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","slug":"moe-docker-lab","published":1,"updated":"2023-06-01T10:31:37.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clid27xuf0008vttwf7e451lo","content":"<p>欢迎来到猫猫的Docker实验室喵！<br>在这里，你将会学习如何为自己的手机开启docker支持，期待你的成果喵～<br>文章会包含一些小技巧和docker基本异常处理，毕竟这只可爱的猫猫是不会向你隐瞒自己知道的东西的，真是一只傻的可爱的猫猫呢～<br>文章内所述手机为arm64架构，上古时期的32位架构请自行修改。<br>注：pixel系列设备请换用repo工具以及官方构建工具并使用ThinLTO（在内存小于32G的设备上）。<br>好了让我们开始吧喵！</p>\n<h3 id=\"首要前提：\"><a href=\"#首要前提：\" class=\"headerlink\" title=\"首要前提：\"></a>首要前提：</h3><ul>\n<li>手机能够解锁bl并获取root权限</li>\n<li>手机内核开源，尽量是有大佬维护源码的</li>\n<li>拥有一定Linux基础</li>\n</ul>\n<p>如果设备或个人不满足以上条件者请自行退出喵！本猫猫是没时间给你解释为什么的。</p>\n<h3 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h3><p>你可能需要准备如下内容：</p>\n<ul>\n<li>Linux系统环境(理论上手机电脑均可，电脑最佳)</li>\n<li>熟练使用搜索工具</li>\n<li>git和make以及代码编辑工具的使用</li>\n<li>基本了解cpu架构差异</li>\n</ul>\n<p>这些内容猫猫是不会教你的，毕竟这不是文章重点喵唔……<br>当然最好有个脑子，可惜猫猫没有呜QAQ………</p>\n<h3 id=\"正式操作：\"><a href=\"#正式操作：\" class=\"headerlink\" title=\"正式操作：\"></a>正式操作：</h3><h4 id=\"0x0001-root手机，不必多说\"><a href=\"#0x0001-root手机，不必多说\" class=\"headerlink\" title=\"0x0001 root手机，不必多说\"></a>0x0001 root手机，不必多说</h4><h4 id=\"0x0002-获取手机代号和cpu代号\"><a href=\"#0x0002-获取手机代号和cpu代号\" class=\"headerlink\" title=\"0x0002 获取手机代号和cpu代号\"></a>0x0002 获取手机代号和cpu代号</h4><p>这一步请通过搜索工具进行。<br>比如猫猫现在用的小米10ultra代号cas，cpu代号SM8250。</p>\n<h4 id=\"0x0003-查找内核源码\"><a href=\"#0x0003-查找内核源码\" class=\"headerlink\" title=\"0x0003 查找内核源码\"></a>0x0003 查找内核源码</h4><p>可以去官方仓库，当然咱建议用第三方的，因为官方内核很多时候还不如第三方好跑呢。<br>查找方式：官方仓库查找设备代号或github搜索关键字kernel + 设备代号或者反过来或者搜索cpu代号+手机厂商+kernel，各种组合和命名方式都试过了还找不到的话，多半是没有了，猫猫也没有办法呢。</p>\n<h4 id=\"0x0004-编译工具选择\"><a href=\"#0x0004-编译工具选择\" class=\"headerlink\" title=\"0x0004 编译工具选择\"></a>0x0004 编译工具选择</h4><p>手机执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/version</span><br></pre></td></tr></table></figure>\n<p>猫猫的手机会有如下输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux version 4.19.260-Moe-hacker-g0bb1c026ee65-dirty (root@localhost) (Ubuntu clang version 14.0.6-2, GNU ld (GNU Binutils for Ubuntu) 2.39) #3 SMP PREEMPT Sun Oct 2 10:48:46 CST 2022</span><br></pre></td></tr></table></figure>\n<p>当然猫猫已经完成内核编译了，仔细观察会发现内核由clang-14编译。<br>对应llvm版本也为14。<br>于是你确认了要用的编译器版本。<br>如果内核是由谷歌的安卓开发工具构建，请自行查找并下载。<br>小技巧：使用原系统内核使用的编译器版本可以降低出错概率。</p>\n<h4 id=\"0x0005-源码获取：\"><a href=\"#0x0005-源码获取：\" class=\"headerlink\" title=\"0x0005 源码获取：\"></a>0x0005 源码获取：</h4><p>使用git clone项目仓库，如果是官方仓库需要加入-b选项克隆机型独立的分支。<br>国内用户访问github不方便的可以换用ssh协议（git clone <a href=\"mailto:&#115;&#115;&#x68;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;\">&#115;&#115;&#x68;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:用户or组织名称&#x2F;代码仓库）<br>或者换用镜像站kgithub.com或ghproxy.com等。</p>\n<h4 id=\"0x0006-依赖安装：\"><a href=\"#0x0006-依赖安装：\" class=\"headerlink\" title=\"0x0006 依赖安装：\"></a>0x0006 依赖安装：</h4><p>主要依赖有：clang&#x2F;gcc构建工具,跨架构binutils工具(跨架构编译需要),make,python,libssl-dev,build-essential,bc,bison,flex,unzip,libssl-dev,ca-certificates,xz-utils,mkbootimg,cpio,device-tree-compiler，请自行安装，否则编译会出错。<br>编译出现command not found大概率是工具没有安装。<br>debian系的系统解决文件缺失推荐<code>apt-file search</code>命令。</p>\n<h4 id=\"0x0007-尝试编译：\"><a href=\"#0x0007-尝试编译：\" class=\"headerlink\" title=\"0x0007 尝试编译：\"></a>0x0007 尝试编译：</h4><p>进入项目目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> <span class=\"built_in\">arch</span>/arm64/configs</span><br></pre></td></tr></table></figure>\n<p>康一康有没有你的机型代号相关的文件，一般是[机型代号]_defcofig，也有带stock或者perf的命名，选一个就行。<br>没有的话也不要着急，再看一下vendor目录：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> <span class=\"built_in\">arch</span>/arm64/configs/vendor</span><br></pre></td></tr></table></figure>\n<p>桥豆麻袋，还是找不到啊！！！<br>github去arch&#x2F;arm64&#x2F;configs目录下看看提交记录，最近变更最多的大概率是。比如nothing的三方内核源码配置文件是vendor&#x2F;lahaina-qgki_defconfig。<br>或者根据版本号，三方内核配置中CONFIG_LOCALVERSION值大概率不是默认。<br>然后，呐，现在要开始编译了哦喵！</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> ARCH=arm64</span><br><span class=\"line\"><span class=\"built_in\">export</span> SUBARCH=arm64</span><br><span class=\"line\">make O=out CC=[clang/gcc-版本号] (vendor/)xxxxxx_defconfig ［可选参数］</span><br></pre></td></tr></table></figure>\n<p>可选参数详解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#非电脑跨架构编译省略</span></span><br><span class=\"line\">ARCH=arm64</span><br><span class=\"line\">CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-</span><br><span class=\"line\"><span class=\"comment\">#本人基本没用到过，按需开启</span></span><br><span class=\"line\">AR=llvm-ar-版本号</span><br><span class=\"line\">OBJDUMP=llvm-objdump-版本号</span><br><span class=\"line\">STRIP=llvm-strip-版本号</span><br><span class=\"line\">NM=llvm-nm-版本号</span><br><span class=\"line\">OBJCOPY=llvm-objcopy-版本号</span><br><span class=\"line\">LD=ld.lld-版本号</span><br></pre></td></tr></table></figure>\n<p>以上可选参数可用于报错处理以及确保llvm工具版本与clang一致，酌情加入。<br>然后，其他参数不变，删掉(vendor&#x2F;)xxxxxx_defconfig这个，改为-j$(nproc)，开始构建内核。</p>\n<h4 id=\"0x0008-基本异常处理：\"><a href=\"#0x0008-基本异常处理：\" class=\"headerlink\" title=\"0x0008 基本异常处理：\"></a>0x0008 基本异常处理：</h4><p>找不到头文件：<br>安装相应库。<br>找不到命令：<br>安装相应软件。<br>-Werror,xxxxxxx：<br>找报错的文件相应Makefile,把含有-werror的都删了(每一层目录都有，建议从报错文件那一层往父目录找)，或者make选项改为CC&#x3D;”[clang&#x2F;gcc]-版本号 -w”<br>未定义函数或其他未定义：<br>查找函数定义开启所依赖的配置项一并开启，可能在头文件或kconfig&#x2F;makefile中。<br>最后一步生成vmlinux时报错大概率是因为配置没开全。</p>\n<h4 id=\"0x0009-玄学异常：\"><a href=\"#0x0009-玄学异常：\" class=\"headerlink\" title=\"0x0009 玄学异常：\"></a>0x0009 玄学异常：</h4><p>在编译pixel3内核时，C语言零基础的猫猫删了一行源码成功生成内核，开机功能一切正常。<br>在编译小米10Ultra内核时一行源码少了一个地址符&amp;，手动添加后一切正常。<br>遇到这种不可预知的玄学异常建议动用搜索工具，或者学会放弃。<br>引用沨鸾在酷安的原文：会修的就修，修不了换源码，换编译器版本，手机电脑换着试，最后放弃就好了。<br>如果你跨过了首次编译这道坎，那么恭喜，你离成功不远了喵！</p>\n<h4 id=\"0x000A-功能开启：\"><a href=\"#0x000A-功能开启：\" class=\"headerlink\" title=\"0x000A 功能开启：\"></a>0x000A 功能开启：</h4><p>下载check-config.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/moby/moby/raw/master/contrib/check-config.sh</span><br></pre></td></tr></table></figure>\n<p>网络不好请使用kgithub镜像站，目前可用。<br>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh check-config.sh out/.config|grep missing|sed -E <span class=\"string\">&#x27;s/\\-//g&#x27;</span>|sed -E <span class=\"string\">&quot;s/ //g&quot;</span>|sed -r <span class=\"string\">&#x27;s/://&#x27;</span>|sed -E <span class=\"string\">&quot;s/missing/=y/&quot;</span></span><br></pre></td></tr></table></figure>\n<p>善良的猫猫甚至帮大家写好了字符替换，猫猫自己都没这待遇呢。<br>于是你得到了内核未开启的的配置列表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_AUFS_FS=y</span><br><span class=\"line\">/dev/zfs=y</span><br><span class=\"line\">zfscommand=y</span><br><span class=\"line\">zpoolcommand=y</span><br></pre></td></tr></table></figure>\n<p>以上这几个输出不用管，删了就好，这几个的源码实现均未并入linux4.x主分支。<br>然后把缺失的config加入你的(vendor&#x2F;)xxxxxx_defconfig中，并将里面带有is not set的字样全部删除，执行编译第一步，再次生成配置。<br>这一步你可以更改local version值为你的名字或者你喜欢的单词。<br>再次执行扫描命令，获取缺失项目。<br>使用make menuconfig命令，按下&#x2F;键搜索缺失项目的依赖与冲突，依赖添加开启选项，冲突关闭。<br>注意：menuconfig配置默认不带CONFIG_头，需要手动添加。<br>然后，将配置中所有&#x3D;m替换为&#x3D;y，目的是将内核模块built-in。<br>请确认最终生成out&#x2F;.config中不包含&#x3D;m字样。</p>\n<h4 id=\"0x000B-再次编译：\"><a href=\"#0x000B-再次编译：\" class=\"headerlink\" title=\"0x000B 再次编译：\"></a>0x000B 再次编译：</h4><p>请自行repeat上文所述编译步骤。<br>生成文件在out&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;目录下，大部分命名为Image.xxx-dtb，但是注意，少数机型只能刷入Image.xx格式镜像。</p>\n<h4 id=\"0x000C-验证config：\"><a href=\"#0x000C-验证config：\" class=\"headerlink\" title=\"0x000C 验证config：\"></a>0x000C 验证config：</h4><p>scripts目录下有个extract-ikconfig，用它把Image的配置扫出来输出到一个文件，check-config.sh除上文所讲述的无法开启的配置全绿即可。<br>如果遇到内核config和out&#x2F;.config内容不一致，查找kernel&#x2F;Makefile，找到$(obj)&#x2F;config_data.gz:xxxxxxxxxx，把xxxxxxxx改成$(obj)&#x2F;config_data</p>\n<h4 id=\"0x000D-刷入：\"><a href=\"#0x000D-刷入：\" class=\"headerlink\" title=\"0x000D 刷入：\"></a>0x000D 刷入：</h4><p>下载刷入工具：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/osm0sis/AnyKernel3</span><br></pre></td></tr></table></figure>\n<p>编辑anykernel.sh，修改如下内容：<br>device.name1&#x3D;设备代号<br>block&#x3D;&#x2F;dev&#x2F;block&#x2F;bootdevice&#x2F;by-name&#x2F;boot;<br>is_slot_device&#x3D;如果是ab架构分区设备填1，否则填0<br>将Image.xxx-dtb复制到anykernel根目录下，打包anykernel根目录，twrp刷入。<br>注意，少数机型只能刷入Image.xx格式镜像。<br>于是你就到了最终环节：开机，验证。<br>教程完毕，相信你也可以在手机上运行自己的内核了喵！</p>\n<h3 id=\"基本报错处理：\"><a href=\"#基本报错处理：\" class=\"headerlink\" title=\"基本报错处理：\"></a>基本报错处理：</h3><p>如果报错如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker: Error response from daemon: OCI </span><br><span class=\"line\">runtime create failed: container_linux.go:370: starting </span><br><span class=\"line\">container process caused: process_linux.go:326: applying </span><br><span class=\"line\">cgroup configuration for process caused: mountpoint for </span><br><span class=\"line\">devices not found: unknown. </span><br></pre></td></tr></table></figure>\n<p>那么您需要手动挂载cgroupfs(root权限执行):</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -t tmpfs -o mode=755 tmpfs /sys/fs/cgroup</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /sys/fs/cgroup/devices</span><br><span class=\"line\">mount -t cgroup -o devices cgroup /sys/fs/cgroup/devices</span><br></pre></td></tr></table></figure>\n<p>然后，重启docker即可。<br>容器中没网可通过在容器中执行以下脚本解决root用户联网问题：<br><a href=\"https://github.com/Moe-hacker/termux-container/blob/main/package-zh/data/data/com.termux/files/usr/share/termux-container/group_add.sh\">group_add.sh</a><br>猫猫自己没有遇到过的两个异常解决方式：<br>添加–iptables&#x3D;false参数<br>设置DOCKER_RAMDISK&#x3D;true<br>本文完。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover_type":"img","excerpt":"","more":"<p>欢迎来到猫猫的Docker实验室喵！<br>在这里，你将会学习如何为自己的手机开启docker支持，期待你的成果喵～<br>文章会包含一些小技巧和docker基本异常处理，毕竟这只可爱的猫猫是不会向你隐瞒自己知道的东西的，真是一只傻的可爱的猫猫呢～<br>文章内所述手机为arm64架构，上古时期的32位架构请自行修改。<br>注：pixel系列设备请换用repo工具以及官方构建工具并使用ThinLTO（在内存小于32G的设备上）。<br>好了让我们开始吧喵！</p>\n<h3 id=\"首要前提：\"><a href=\"#首要前提：\" class=\"headerlink\" title=\"首要前提：\"></a>首要前提：</h3><ul>\n<li>手机能够解锁bl并获取root权限</li>\n<li>手机内核开源，尽量是有大佬维护源码的</li>\n<li>拥有一定Linux基础</li>\n</ul>\n<p>如果设备或个人不满足以上条件者请自行退出喵！本猫猫是没时间给你解释为什么的。</p>\n<h3 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h3><p>你可能需要准备如下内容：</p>\n<ul>\n<li>Linux系统环境(理论上手机电脑均可，电脑最佳)</li>\n<li>熟练使用搜索工具</li>\n<li>git和make以及代码编辑工具的使用</li>\n<li>基本了解cpu架构差异</li>\n</ul>\n<p>这些内容猫猫是不会教你的，毕竟这不是文章重点喵唔……<br>当然最好有个脑子，可惜猫猫没有呜QAQ………</p>\n<h3 id=\"正式操作：\"><a href=\"#正式操作：\" class=\"headerlink\" title=\"正式操作：\"></a>正式操作：</h3><h4 id=\"0x0001-root手机，不必多说\"><a href=\"#0x0001-root手机，不必多说\" class=\"headerlink\" title=\"0x0001 root手机，不必多说\"></a>0x0001 root手机，不必多说</h4><h4 id=\"0x0002-获取手机代号和cpu代号\"><a href=\"#0x0002-获取手机代号和cpu代号\" class=\"headerlink\" title=\"0x0002 获取手机代号和cpu代号\"></a>0x0002 获取手机代号和cpu代号</h4><p>这一步请通过搜索工具进行。<br>比如猫猫现在用的小米10ultra代号cas，cpu代号SM8250。</p>\n<h4 id=\"0x0003-查找内核源码\"><a href=\"#0x0003-查找内核源码\" class=\"headerlink\" title=\"0x0003 查找内核源码\"></a>0x0003 查找内核源码</h4><p>可以去官方仓库，当然咱建议用第三方的，因为官方内核很多时候还不如第三方好跑呢。<br>查找方式：官方仓库查找设备代号或github搜索关键字kernel + 设备代号或者反过来或者搜索cpu代号+手机厂商+kernel，各种组合和命名方式都试过了还找不到的话，多半是没有了，猫猫也没有办法呢。</p>\n<h4 id=\"0x0004-编译工具选择\"><a href=\"#0x0004-编译工具选择\" class=\"headerlink\" title=\"0x0004 编译工具选择\"></a>0x0004 编译工具选择</h4><p>手机执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/version</span><br></pre></td></tr></table></figure>\n<p>猫猫的手机会有如下输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux version 4.19.260-Moe-hacker-g0bb1c026ee65-dirty (root@localhost) (Ubuntu clang version 14.0.6-2, GNU ld (GNU Binutils for Ubuntu) 2.39) #3 SMP PREEMPT Sun Oct 2 10:48:46 CST 2022</span><br></pre></td></tr></table></figure>\n<p>当然猫猫已经完成内核编译了，仔细观察会发现内核由clang-14编译。<br>对应llvm版本也为14。<br>于是你确认了要用的编译器版本。<br>如果内核是由谷歌的安卓开发工具构建，请自行查找并下载。<br>小技巧：使用原系统内核使用的编译器版本可以降低出错概率。</p>\n<h4 id=\"0x0005-源码获取：\"><a href=\"#0x0005-源码获取：\" class=\"headerlink\" title=\"0x0005 源码获取：\"></a>0x0005 源码获取：</h4><p>使用git clone项目仓库，如果是官方仓库需要加入-b选项克隆机型独立的分支。<br>国内用户访问github不方便的可以换用ssh协议（git clone <a href=\"mailto:&#115;&#115;&#x68;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;\">&#115;&#115;&#x68;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:用户or组织名称&#x2F;代码仓库）<br>或者换用镜像站kgithub.com或ghproxy.com等。</p>\n<h4 id=\"0x0006-依赖安装：\"><a href=\"#0x0006-依赖安装：\" class=\"headerlink\" title=\"0x0006 依赖安装：\"></a>0x0006 依赖安装：</h4><p>主要依赖有：clang&#x2F;gcc构建工具,跨架构binutils工具(跨架构编译需要),make,python,libssl-dev,build-essential,bc,bison,flex,unzip,libssl-dev,ca-certificates,xz-utils,mkbootimg,cpio,device-tree-compiler，请自行安装，否则编译会出错。<br>编译出现command not found大概率是工具没有安装。<br>debian系的系统解决文件缺失推荐<code>apt-file search</code>命令。</p>\n<h4 id=\"0x0007-尝试编译：\"><a href=\"#0x0007-尝试编译：\" class=\"headerlink\" title=\"0x0007 尝试编译：\"></a>0x0007 尝试编译：</h4><p>进入项目目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> <span class=\"built_in\">arch</span>/arm64/configs</span><br></pre></td></tr></table></figure>\n<p>康一康有没有你的机型代号相关的文件，一般是[机型代号]_defcofig，也有带stock或者perf的命名，选一个就行。<br>没有的话也不要着急，再看一下vendor目录：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> <span class=\"built_in\">arch</span>/arm64/configs/vendor</span><br></pre></td></tr></table></figure>\n<p>桥豆麻袋，还是找不到啊！！！<br>github去arch&#x2F;arm64&#x2F;configs目录下看看提交记录，最近变更最多的大概率是。比如nothing的三方内核源码配置文件是vendor&#x2F;lahaina-qgki_defconfig。<br>或者根据版本号，三方内核配置中CONFIG_LOCALVERSION值大概率不是默认。<br>然后，呐，现在要开始编译了哦喵！</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> ARCH=arm64</span><br><span class=\"line\"><span class=\"built_in\">export</span> SUBARCH=arm64</span><br><span class=\"line\">make O=out CC=[clang/gcc-版本号] (vendor/)xxxxxx_defconfig ［可选参数］</span><br></pre></td></tr></table></figure>\n<p>可选参数详解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#非电脑跨架构编译省略</span></span><br><span class=\"line\">ARCH=arm64</span><br><span class=\"line\">CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-</span><br><span class=\"line\"><span class=\"comment\">#本人基本没用到过，按需开启</span></span><br><span class=\"line\">AR=llvm-ar-版本号</span><br><span class=\"line\">OBJDUMP=llvm-objdump-版本号</span><br><span class=\"line\">STRIP=llvm-strip-版本号</span><br><span class=\"line\">NM=llvm-nm-版本号</span><br><span class=\"line\">OBJCOPY=llvm-objcopy-版本号</span><br><span class=\"line\">LD=ld.lld-版本号</span><br></pre></td></tr></table></figure>\n<p>以上可选参数可用于报错处理以及确保llvm工具版本与clang一致，酌情加入。<br>然后，其他参数不变，删掉(vendor&#x2F;)xxxxxx_defconfig这个，改为-j$(nproc)，开始构建内核。</p>\n<h4 id=\"0x0008-基本异常处理：\"><a href=\"#0x0008-基本异常处理：\" class=\"headerlink\" title=\"0x0008 基本异常处理：\"></a>0x0008 基本异常处理：</h4><p>找不到头文件：<br>安装相应库。<br>找不到命令：<br>安装相应软件。<br>-Werror,xxxxxxx：<br>找报错的文件相应Makefile,把含有-werror的都删了(每一层目录都有，建议从报错文件那一层往父目录找)，或者make选项改为CC&#x3D;”[clang&#x2F;gcc]-版本号 -w”<br>未定义函数或其他未定义：<br>查找函数定义开启所依赖的配置项一并开启，可能在头文件或kconfig&#x2F;makefile中。<br>最后一步生成vmlinux时报错大概率是因为配置没开全。</p>\n<h4 id=\"0x0009-玄学异常：\"><a href=\"#0x0009-玄学异常：\" class=\"headerlink\" title=\"0x0009 玄学异常：\"></a>0x0009 玄学异常：</h4><p>在编译pixel3内核时，C语言零基础的猫猫删了一行源码成功生成内核，开机功能一切正常。<br>在编译小米10Ultra内核时一行源码少了一个地址符&amp;，手动添加后一切正常。<br>遇到这种不可预知的玄学异常建议动用搜索工具，或者学会放弃。<br>引用沨鸾在酷安的原文：会修的就修，修不了换源码，换编译器版本，手机电脑换着试，最后放弃就好了。<br>如果你跨过了首次编译这道坎，那么恭喜，你离成功不远了喵！</p>\n<h4 id=\"0x000A-功能开启：\"><a href=\"#0x000A-功能开启：\" class=\"headerlink\" title=\"0x000A 功能开启：\"></a>0x000A 功能开启：</h4><p>下载check-config.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/moby/moby/raw/master/contrib/check-config.sh</span><br></pre></td></tr></table></figure>\n<p>网络不好请使用kgithub镜像站，目前可用。<br>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh check-config.sh out/.config|grep missing|sed -E <span class=\"string\">&#x27;s/\\-//g&#x27;</span>|sed -E <span class=\"string\">&quot;s/ //g&quot;</span>|sed -r <span class=\"string\">&#x27;s/://&#x27;</span>|sed -E <span class=\"string\">&quot;s/missing/=y/&quot;</span></span><br></pre></td></tr></table></figure>\n<p>善良的猫猫甚至帮大家写好了字符替换，猫猫自己都没这待遇呢。<br>于是你得到了内核未开启的的配置列表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_AUFS_FS=y</span><br><span class=\"line\">/dev/zfs=y</span><br><span class=\"line\">zfscommand=y</span><br><span class=\"line\">zpoolcommand=y</span><br></pre></td></tr></table></figure>\n<p>以上这几个输出不用管，删了就好，这几个的源码实现均未并入linux4.x主分支。<br>然后把缺失的config加入你的(vendor&#x2F;)xxxxxx_defconfig中，并将里面带有is not set的字样全部删除，执行编译第一步，再次生成配置。<br>这一步你可以更改local version值为你的名字或者你喜欢的单词。<br>再次执行扫描命令，获取缺失项目。<br>使用make menuconfig命令，按下&#x2F;键搜索缺失项目的依赖与冲突，依赖添加开启选项，冲突关闭。<br>注意：menuconfig配置默认不带CONFIG_头，需要手动添加。<br>然后，将配置中所有&#x3D;m替换为&#x3D;y，目的是将内核模块built-in。<br>请确认最终生成out&#x2F;.config中不包含&#x3D;m字样。</p>\n<h4 id=\"0x000B-再次编译：\"><a href=\"#0x000B-再次编译：\" class=\"headerlink\" title=\"0x000B 再次编译：\"></a>0x000B 再次编译：</h4><p>请自行repeat上文所述编译步骤。<br>生成文件在out&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;目录下，大部分命名为Image.xxx-dtb，但是注意，少数机型只能刷入Image.xx格式镜像。</p>\n<h4 id=\"0x000C-验证config：\"><a href=\"#0x000C-验证config：\" class=\"headerlink\" title=\"0x000C 验证config：\"></a>0x000C 验证config：</h4><p>scripts目录下有个extract-ikconfig，用它把Image的配置扫出来输出到一个文件，check-config.sh除上文所讲述的无法开启的配置全绿即可。<br>如果遇到内核config和out&#x2F;.config内容不一致，查找kernel&#x2F;Makefile，找到$(obj)&#x2F;config_data.gz:xxxxxxxxxx，把xxxxxxxx改成$(obj)&#x2F;config_data</p>\n<h4 id=\"0x000D-刷入：\"><a href=\"#0x000D-刷入：\" class=\"headerlink\" title=\"0x000D 刷入：\"></a>0x000D 刷入：</h4><p>下载刷入工具：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/osm0sis/AnyKernel3</span><br></pre></td></tr></table></figure>\n<p>编辑anykernel.sh，修改如下内容：<br>device.name1&#x3D;设备代号<br>block&#x3D;&#x2F;dev&#x2F;block&#x2F;bootdevice&#x2F;by-name&#x2F;boot;<br>is_slot_device&#x3D;如果是ab架构分区设备填1，否则填0<br>将Image.xxx-dtb复制到anykernel根目录下，打包anykernel根目录，twrp刷入。<br>注意，少数机型只能刷入Image.xx格式镜像。<br>于是你就到了最终环节：开机，验证。<br>教程完毕，相信你也可以在手机上运行自己的内核了喵！</p>\n<h3 id=\"基本报错处理：\"><a href=\"#基本报错处理：\" class=\"headerlink\" title=\"基本报错处理：\"></a>基本报错处理：</h3><p>如果报错如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker: Error response from daemon: OCI </span><br><span class=\"line\">runtime create failed: container_linux.go:370: starting </span><br><span class=\"line\">container process caused: process_linux.go:326: applying </span><br><span class=\"line\">cgroup configuration for process caused: mountpoint for </span><br><span class=\"line\">devices not found: unknown. </span><br></pre></td></tr></table></figure>\n<p>那么您需要手动挂载cgroupfs(root权限执行):</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -t tmpfs -o mode=755 tmpfs /sys/fs/cgroup</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /sys/fs/cgroup/devices</span><br><span class=\"line\">mount -t cgroup -o devices cgroup /sys/fs/cgroup/devices</span><br></pre></td></tr></table></figure>\n<p>然后，重启docker即可。<br>容器中没网可通过在容器中执行以下脚本解决root用户联网问题：<br><a href=\"https://github.com/Moe-hacker/termux-container/blob/main/package-zh/data/data/com.termux/files/usr/share/termux-container/group_add.sh\">group_add.sh</a><br>猫猫自己没有遇到过的两个异常解决方式：<br>添加–iptables&#x3D;false参数<br>设置DOCKER_RAMDISK&#x3D;true<br>本文完。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n"},{"title":"hexo博客配置教程","date":"2022-12-04T03:27:43.000Z","top_img":"/img/gura.jpg","cover":"/img/gura.jpg","_content":"咱自己的博客配置教程喵～\n### 前期准备：\n本博客在linux环境下搭建，部分内容于windows下稍有不同。\n你需要：git，ssh，nodejs，npm，github-cli。\n你可能还需要：一个脑子。\n可惜猫猫是没有脑子的喵呜………\n去github账号设置=>开发者设置=>令牌中获取一个token。\n在你的github账户下创建 用户名.github.io这个仓库。\n注：github-cli的token为明文存储，请勿在不受您本人信任的设备上用这种方式登录。\n然后：\n```sh\ngh auth login\ngit config --global user.email \"你的电子邮件地址\"\ngit config --global user.name \"你的github用户名\"\n```\n### hexo部署：\n```sh\ncd ~\nmkdir hexo\nnpm config set registry https://registry.npmmirror.com/\nnpm install -g hexo\ncd hexo\nhexo init\nnpm install hexo-theme-butterfly hexo-renderer-pug hexo-renderer-stylus cheerio hexo-deployer-git hexo-wordcount --save\n```\n### hexo配置：\n```sh\nnano ~/hexo/_config.yml\n```\n更改以下配置：\n```yaml\ntitle: 网站标题\nsubtitle: 网站子标题\ndescription: 网站描述\nkeywords:\n    - 关键字\n    - 关键字\nauthor: 你的名字\nlanguage: zh-CN\ntimezone: Asia/Shanghai\nurl: 你的网站地址\ntheme: butterfly\ndeploy:\n  type: git\n  repository: 'git@github.com:你的用户名/你的博客仓库'\n```\n### 主题配置：\n请熟练使用nano等编辑器的跳转功能！！！\n```sh\nnano ~/hexo/node_modules/hexo-theme-butterfly/_config.yml\n```\n目前个人修改：\n```yaml\nmenu:\n   主页: / || fas fa-home\n   归档: /archives/ || fas fa-archive\n   标签: /tags/ || fas fa-tags\n   分类: /categories/ || fas fa-folder-open\n  # List||fas fa-list:\n  #   Music: /music/ || fas fa-music\n  #   Movie: /movies/ || fas fa-video\n   友情链接: /link/ || fas fa-link\n   关于: /about/ || fas fa-heart\nsocial:\n   fab fa-github: https://github.com/Moe-hacker || Github\n   fas fa-envelope: mailto:moe-hacker@outlook.com || Email\nfavicon: /img/face.png\navatar:\n  img: /img/face.jpg\n  effect: false\nindex_img: /img/fufu.jpg\ndefault_top_img: /img/cover.jpg\narchive_img: /img/cover.jpg\ntag_img: /img/cover.jpg\ntag_per_img: /img/cover.jpg\ncategory_img: /img/cover.jpg\ncategory_per_img: /img/cover.jpg\n\ndefault_cover: /img/cover.jpg\nwordcount:\n  enable: true\n  post_wordcount: true\n  min2read: true\n  total_wordcount: true\ntheme_color:\n   enable: true\n   main: \"#FEE4D0\"\n   paginator: \"#fee4d0\"\n   button_hover: \"#fee4d0\"\n   text_selection: \"#000000\"\n   link_color: \"#99a9bf\"\n   meta_color: \"#fee4d0\"\n   hr_color: \"#A6E3A1\"\n#   code_foreground: \"#F47466\"\n#   code_background: \"rgba(27, 31, 35, .05)\"\n   toc_color: \"#fee4d0\"\n#   blockquote_padding_color: \"#49b1f5\"\n#   blockquote_background_color: \"#49b1f5\"\n#   scrollbar_color: \"#49b1f5\"\n   meta_theme_color_light: \"ffffff\"\n   meta_theme_color_dark: \"#0d0d0d\"\nbackground: url(https://moe-hacker.github.io/img/fufu_background.jpg)\n# Footer Background\nfooter_bg: true\nenter_transitions: true\nactivate_power_mode:\n  enable: true\n  colorful: true # open particle animation (冒光特效)\n  shake: true #  open shake (抖動特效)\n  mobile: false\nfireworks:\n  enable: true\n  zIndex: 9999 # -1 or 9999\n  mobile: true\nbeautify:\n  enable: true\n  field: post # site/post\n  title-prefix-icon: # '\\f0c1'\n  title-prefix-icon-color: # '#F47466'\nhr_icon:\n  enable: true\n  icon: # the unicode value of Font Awesome icon, such as '\\3423'\n  icon-top:\nsubtitle:\n  enable: true\n  # Typewriter Effect (打字效果)\n  effect: true\n  # Effect Speed Options (打字效果速度參數)\n  startDelay: 300 # time before typing starts in milliseconds\n  typeSpeed: 150 # type speed in milliseconds\n  backSpeed: 50 # backspacing speed in milliseconds\n  # loop (循環打字)\n  loop: true\n  # source 調用第三方服務\n  # source: false 關閉調用\n  # source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/\n  # source: 2  調用一句網（簡體） http://yijuzhan.com/\n  # source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/\n  # subtitle 會先顯示 source , 再顯示 sub 的內容\n  source: false\n  # 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字\n  sub:\n    - Keep moe.\n    - Keep cool.\n    - keep hacking.\n    - ——Talk is cheap，\n    - show me the code.\naside:\n  enable: true\n  hide: false\n  button: true\n  mobile: true # display on mobile\n  position: right # left or right\n  display:\n    archive: true\n    tag: true\n    category: true\n  card_author:\n    enable: true\n    description:\n    button:\n      enable: true\n      icon: fab fa-github\n      text: Follow Me\n      link: https://github.com/Moe-hacker\n  card_announcement:\n    enable: true\n    content: 沨鸾的小窝\n  card_recent_post:\n    enable: true\n    limit: 5 # if set 0 will show all\n    sort: date # date or updated\n    sort_order: # Don't modify the setting unless you know how it works\n```\n几张图片具体内容在猫猫博客仓库里有，请在github打开本项目仓库。\n### 链接配置：\n```\nhexo new page link\nhexo new page tags\nhexo new page categories\nhexo new page about\n```\n友链页面：\nnano ~/hexo/source/link/index.md\n两行横线中间添加：\ntype: \"link\"\n另外三个页面同理。\nabout页面记得写点你的自我介绍啥的，要不然关于页面会是空的。\n### 友链配置：\n```sh\nmkdir -p ~/hexo/source/_data\nnano ~/hexo/source/_data/link.yml\n```\n示例：\n```yaml\n- class_name: 友情链接\n  class_desc: 欢迎互关喵～\n  link_list:\n    - name: Moe-hacker\n      link: https://moe-hacker.github.io\n      avatar: /img/face.jpg\n      descr: 咱自己喵～\n```\n### 开始写博客：\n```sh\nrm /hexo/source/_posts/hello-world.md\nhexo new test\nnano /hexo/source/_posts/test.md\n```\n首先更改以下内容，加入两行横线中间：\n```md\ntitle: 标题\ntags:\n  - tag1\n  - tag2\n  - tag3\ntop_img: /img/cover.jpg\ncover: /img/cover.jpg\n```\n然后便是markdown书写了，具体语法自行百度，仅展示两个技巧。\n#### 居中文字：\n```html\n<p align=\"center\">文字</p>\n```\n#### 行首缩进：\n本人的博客遇到了&emsp;等字符不生效的问题，事实上这个就是这么直接打出来的。\n不过咱有办法：\n```html\n<style>\n.sj{ text-indent:2em}\n</style>\n<div class=\"sj\">文字</div>\n```\n可以看到文字缩进了两个空格。\n### 博客部署：\n```sh\nhexo g\nhexo s\n```\n去访问localhost:4000，内容满意就可以部署到仓库了：\n```\nhexo d\n```\n### 注释：\n图片放在 ~/hexo/public/img中，命名别搞混就行。\n配置开启了一些动效，可以关闭。\n部分配置自己试一下就知道是什么内容了。\n配置里面图片混用一张是因为这只猫猫太懒，千万别学习。\n最后就是，学习下md语法，写博客别跟猫猫一样水就好了。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","source":"_posts/moe-hexo.md","raw":"---\ntitle: hexo博客配置教程\ndate: 2022-12-04 11:27:43\ntags:\n  - Linux\n  - hexo\n  - blog\ntop_img: /img/gura.jpg\ncover: /img/gura.jpg\n---\n咱自己的博客配置教程喵～\n### 前期准备：\n本博客在linux环境下搭建，部分内容于windows下稍有不同。\n你需要：git，ssh，nodejs，npm，github-cli。\n你可能还需要：一个脑子。\n可惜猫猫是没有脑子的喵呜………\n去github账号设置=>开发者设置=>令牌中获取一个token。\n在你的github账户下创建 用户名.github.io这个仓库。\n注：github-cli的token为明文存储，请勿在不受您本人信任的设备上用这种方式登录。\n然后：\n```sh\ngh auth login\ngit config --global user.email \"你的电子邮件地址\"\ngit config --global user.name \"你的github用户名\"\n```\n### hexo部署：\n```sh\ncd ~\nmkdir hexo\nnpm config set registry https://registry.npmmirror.com/\nnpm install -g hexo\ncd hexo\nhexo init\nnpm install hexo-theme-butterfly hexo-renderer-pug hexo-renderer-stylus cheerio hexo-deployer-git hexo-wordcount --save\n```\n### hexo配置：\n```sh\nnano ~/hexo/_config.yml\n```\n更改以下配置：\n```yaml\ntitle: 网站标题\nsubtitle: 网站子标题\ndescription: 网站描述\nkeywords:\n    - 关键字\n    - 关键字\nauthor: 你的名字\nlanguage: zh-CN\ntimezone: Asia/Shanghai\nurl: 你的网站地址\ntheme: butterfly\ndeploy:\n  type: git\n  repository: 'git@github.com:你的用户名/你的博客仓库'\n```\n### 主题配置：\n请熟练使用nano等编辑器的跳转功能！！！\n```sh\nnano ~/hexo/node_modules/hexo-theme-butterfly/_config.yml\n```\n目前个人修改：\n```yaml\nmenu:\n   主页: / || fas fa-home\n   归档: /archives/ || fas fa-archive\n   标签: /tags/ || fas fa-tags\n   分类: /categories/ || fas fa-folder-open\n  # List||fas fa-list:\n  #   Music: /music/ || fas fa-music\n  #   Movie: /movies/ || fas fa-video\n   友情链接: /link/ || fas fa-link\n   关于: /about/ || fas fa-heart\nsocial:\n   fab fa-github: https://github.com/Moe-hacker || Github\n   fas fa-envelope: mailto:moe-hacker@outlook.com || Email\nfavicon: /img/face.png\navatar:\n  img: /img/face.jpg\n  effect: false\nindex_img: /img/fufu.jpg\ndefault_top_img: /img/cover.jpg\narchive_img: /img/cover.jpg\ntag_img: /img/cover.jpg\ntag_per_img: /img/cover.jpg\ncategory_img: /img/cover.jpg\ncategory_per_img: /img/cover.jpg\n\ndefault_cover: /img/cover.jpg\nwordcount:\n  enable: true\n  post_wordcount: true\n  min2read: true\n  total_wordcount: true\ntheme_color:\n   enable: true\n   main: \"#FEE4D0\"\n   paginator: \"#fee4d0\"\n   button_hover: \"#fee4d0\"\n   text_selection: \"#000000\"\n   link_color: \"#99a9bf\"\n   meta_color: \"#fee4d0\"\n   hr_color: \"#A6E3A1\"\n#   code_foreground: \"#F47466\"\n#   code_background: \"rgba(27, 31, 35, .05)\"\n   toc_color: \"#fee4d0\"\n#   blockquote_padding_color: \"#49b1f5\"\n#   blockquote_background_color: \"#49b1f5\"\n#   scrollbar_color: \"#49b1f5\"\n   meta_theme_color_light: \"ffffff\"\n   meta_theme_color_dark: \"#0d0d0d\"\nbackground: url(https://moe-hacker.github.io/img/fufu_background.jpg)\n# Footer Background\nfooter_bg: true\nenter_transitions: true\nactivate_power_mode:\n  enable: true\n  colorful: true # open particle animation (冒光特效)\n  shake: true #  open shake (抖動特效)\n  mobile: false\nfireworks:\n  enable: true\n  zIndex: 9999 # -1 or 9999\n  mobile: true\nbeautify:\n  enable: true\n  field: post # site/post\n  title-prefix-icon: # '\\f0c1'\n  title-prefix-icon-color: # '#F47466'\nhr_icon:\n  enable: true\n  icon: # the unicode value of Font Awesome icon, such as '\\3423'\n  icon-top:\nsubtitle:\n  enable: true\n  # Typewriter Effect (打字效果)\n  effect: true\n  # Effect Speed Options (打字效果速度參數)\n  startDelay: 300 # time before typing starts in milliseconds\n  typeSpeed: 150 # type speed in milliseconds\n  backSpeed: 50 # backspacing speed in milliseconds\n  # loop (循環打字)\n  loop: true\n  # source 調用第三方服務\n  # source: false 關閉調用\n  # source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/\n  # source: 2  調用一句網（簡體） http://yijuzhan.com/\n  # source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/\n  # subtitle 會先顯示 source , 再顯示 sub 的內容\n  source: false\n  # 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字\n  sub:\n    - Keep moe.\n    - Keep cool.\n    - keep hacking.\n    - ——Talk is cheap，\n    - show me the code.\naside:\n  enable: true\n  hide: false\n  button: true\n  mobile: true # display on mobile\n  position: right # left or right\n  display:\n    archive: true\n    tag: true\n    category: true\n  card_author:\n    enable: true\n    description:\n    button:\n      enable: true\n      icon: fab fa-github\n      text: Follow Me\n      link: https://github.com/Moe-hacker\n  card_announcement:\n    enable: true\n    content: 沨鸾的小窝\n  card_recent_post:\n    enable: true\n    limit: 5 # if set 0 will show all\n    sort: date # date or updated\n    sort_order: # Don't modify the setting unless you know how it works\n```\n几张图片具体内容在猫猫博客仓库里有，请在github打开本项目仓库。\n### 链接配置：\n```\nhexo new page link\nhexo new page tags\nhexo new page categories\nhexo new page about\n```\n友链页面：\nnano ~/hexo/source/link/index.md\n两行横线中间添加：\ntype: \"link\"\n另外三个页面同理。\nabout页面记得写点你的自我介绍啥的，要不然关于页面会是空的。\n### 友链配置：\n```sh\nmkdir -p ~/hexo/source/_data\nnano ~/hexo/source/_data/link.yml\n```\n示例：\n```yaml\n- class_name: 友情链接\n  class_desc: 欢迎互关喵～\n  link_list:\n    - name: Moe-hacker\n      link: https://moe-hacker.github.io\n      avatar: /img/face.jpg\n      descr: 咱自己喵～\n```\n### 开始写博客：\n```sh\nrm /hexo/source/_posts/hello-world.md\nhexo new test\nnano /hexo/source/_posts/test.md\n```\n首先更改以下内容，加入两行横线中间：\n```md\ntitle: 标题\ntags:\n  - tag1\n  - tag2\n  - tag3\ntop_img: /img/cover.jpg\ncover: /img/cover.jpg\n```\n然后便是markdown书写了，具体语法自行百度，仅展示两个技巧。\n#### 居中文字：\n```html\n<p align=\"center\">文字</p>\n```\n#### 行首缩进：\n本人的博客遇到了&emsp;等字符不生效的问题，事实上这个就是这么直接打出来的。\n不过咱有办法：\n```html\n<style>\n.sj{ text-indent:2em}\n</style>\n<div class=\"sj\">文字</div>\n```\n可以看到文字缩进了两个空格。\n### 博客部署：\n```sh\nhexo g\nhexo s\n```\n去访问localhost:4000，内容满意就可以部署到仓库了：\n```\nhexo d\n```\n### 注释：\n图片放在 ~/hexo/public/img中，命名别搞混就行。\n配置开启了一些动效，可以关闭。\n部分配置自己试一下就知道是什么内容了。\n配置里面图片混用一张是因为这只猫猫太懒，千万别学习。\n最后就是，学习下md语法，写博客别跟猫猫一样水就好了。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","slug":"moe-hexo","published":1,"updated":"2023-06-01T10:31:03.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clid27xuh0009vttw62ina8qc","content":"<p>咱自己的博客配置教程喵～</p>\n<h3 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h3><p>本博客在linux环境下搭建，部分内容于windows下稍有不同。<br>你需要：git，ssh，nodejs，npm，github-cli。<br>你可能还需要：一个脑子。<br>可惜猫猫是没有脑子的喵呜………<br>去github账号设置&#x3D;&gt;开发者设置&#x3D;&gt;令牌中获取一个token。<br>在你的github账户下创建 用户名.github.io这个仓库。<br>注：github-cli的token为明文存储，请勿在不受您本人信任的设备上用这种方式登录。<br>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh auth login</span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;你的电子邮件地址&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;你的github用户名&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo部署：\"><a href=\"#hexo部署：\" class=\"headerlink\" title=\"hexo部署：\"></a>hexo部署：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> hexo</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com/</span><br><span class=\"line\">npm install -g hexo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm install hexo-theme-butterfly hexo-renderer-pug hexo-renderer-stylus cheerio hexo-deployer-git hexo-wordcount --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo配置：\"><a href=\"#hexo配置：\" class=\"headerlink\" title=\"hexo配置：\"></a>hexo配置：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/hexo/_config.yml</span><br></pre></td></tr></table></figure>\n<p>更改以下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">网站子标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">网站描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">关键字</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">关键字</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">你的名字</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">你的网站地址</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">&#x27;git@github.com:你的用户名/你的博客仓库&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题配置：\"><a href=\"#主题配置：\" class=\"headerlink\" title=\"主题配置：\"></a>主题配置：</h3><p>请熟练使用nano等编辑器的跳转功能！！！</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/hexo/node_modules/hexo-theme-butterfly/_config.yml</span><br></pre></td></tr></table></figure>\n<p>目前个人修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">   <span class=\"string\">主页:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">   <span class=\"string\">归档:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">   <span class=\"string\">标签:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">   <span class=\"string\">分类:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-folder-open</span></span><br><span class=\"line\">  <span class=\"comment\"># List||fas fa-list:</span></span><br><span class=\"line\">  <span class=\"comment\">#   Music: /music/ || fas fa-music</span></span><br><span class=\"line\">  <span class=\"comment\">#   Movie: /movies/ || fas fa-video</span></span><br><span class=\"line\">   <span class=\"string\">友情链接:</span> <span class=\"string\">/link/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-link</span></span><br><span class=\"line\">   <span class=\"string\">关于:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-heart</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">   <span class=\"attr\">fab fa-github:</span> <span class=\"string\">https://github.com/Moe-hacker</span> <span class=\"string\">||</span> <span class=\"string\">Github</span></span><br><span class=\"line\">   <span class=\"attr\">fas fa-envelope:</span> <span class=\"string\">mailto:moe-hacker@outlook.com</span> <span class=\"string\">||</span> <span class=\"string\">Email</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">/img/face.png</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">img:</span> <span class=\"string\">/img/face.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">effect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">index_img:</span> <span class=\"string\">/img/fufu.jpg</span></span><br><span class=\"line\"><span class=\"attr\">default_top_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archive_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">tag_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">tag_per_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">category_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">category_per_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">default_cover:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">post_wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">theme_color:</span></span><br><span class=\"line\">   <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">main:</span> <span class=\"string\">&quot;#FEE4D0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">paginator:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">button_hover:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">text_selection:</span> <span class=\"string\">&quot;#000000&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">link_color:</span> <span class=\"string\">&quot;#99a9bf&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">meta_color:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">hr_color:</span> <span class=\"string\">&quot;#A6E3A1&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   code_foreground: &quot;#F47466&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   code_background: &quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">toc_color:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   blockquote_padding_color: &quot;#49b1f5&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   blockquote_background_color: &quot;#49b1f5&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   scrollbar_color: &quot;#49b1f5&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">meta_theme_color_light:</span> <span class=\"string\">&quot;ffffff&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">meta_theme_color_dark:</span> <span class=\"string\">&quot;#0d0d0d&quot;</span></span><br><span class=\"line\"><span class=\"attr\">background:</span> <span class=\"string\">url(https://moe-hacker.github.io/img/fufu_background.jpg)</span></span><br><span class=\"line\"><span class=\"comment\"># Footer Background</span></span><br><span class=\"line\"><span class=\"attr\">footer_bg:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">enter_transitions:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">activate_power_mode:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">colorful:</span> <span class=\"literal\">true</span> <span class=\"comment\"># open particle animation (冒光特效)</span></span><br><span class=\"line\">  <span class=\"attr\">shake:</span> <span class=\"literal\">true</span> <span class=\"comment\">#  open shake (抖動特效)</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">fireworks:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">zIndex:</span> <span class=\"number\">9999</span> <span class=\"comment\"># -1 or 9999</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">beautify:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span> <span class=\"comment\"># site/post</span></span><br><span class=\"line\">  <span class=\"attr\">title-prefix-icon:</span> <span class=\"comment\"># &#x27;\\f0c1&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">title-prefix-icon-color:</span> <span class=\"comment\"># &#x27;#F47466&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">hr_icon:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"comment\"># the unicode value of Font Awesome icon, such as &#x27;\\3423&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">icon-top:</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Typewriter Effect (打字效果)</span></span><br><span class=\"line\">  <span class=\"attr\">effect:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Effect Speed Options (打字效果速度參數)</span></span><br><span class=\"line\">  <span class=\"attr\">startDelay:</span> <span class=\"number\">300</span> <span class=\"comment\"># time before typing starts in milliseconds</span></span><br><span class=\"line\">  <span class=\"attr\">typeSpeed:</span> <span class=\"number\">150</span> <span class=\"comment\"># type speed in milliseconds</span></span><br><span class=\"line\">  <span class=\"attr\">backSpeed:</span> <span class=\"number\">50</span> <span class=\"comment\"># backspacing speed in milliseconds</span></span><br><span class=\"line\">  <span class=\"comment\"># loop (循環打字)</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># source 調用第三方服務</span></span><br><span class=\"line\">  <span class=\"comment\"># source: false 關閉調用</span></span><br><span class=\"line\">  <span class=\"comment\"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class=\"line\">  <span class=\"comment\"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class=\"line\">  <span class=\"comment\"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class=\"line\">  <span class=\"comment\"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class=\"line\">  <span class=\"attr\">source:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class=\"line\">  <span class=\"attr\">sub:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Keep</span> <span class=\"string\">moe.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Keep</span> <span class=\"string\">cool.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">keep</span> <span class=\"string\">hacking.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">——Talk</span> <span class=\"string\">is</span> <span class=\"string\">cheap，</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">show</span> <span class=\"string\">me</span> <span class=\"string\">the</span> <span class=\"string\">code.</span></span><br><span class=\"line\"><span class=\"attr\">aside:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hide:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">button:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile</span></span><br><span class=\"line\">  <span class=\"attr\">position:</span> <span class=\"string\">right</span> <span class=\"comment\"># left or right</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span></span><br><span class=\"line\">    <span class=\"attr\">archive:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">tag:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">category:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">card_author:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span></span><br><span class=\"line\">    <span class=\"attr\">button:</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">icon:</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\">      <span class=\"attr\">text:</span> <span class=\"string\">Follow</span> <span class=\"string\">Me</span></span><br><span class=\"line\">      <span class=\"attr\">link:</span> <span class=\"string\">https://github.com/Moe-hacker</span></span><br><span class=\"line\">  <span class=\"attr\">card_announcement:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">content:</span> <span class=\"string\">沨鸾的小窝</span></span><br><span class=\"line\">  <span class=\"attr\">card_recent_post:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">5</span> <span class=\"comment\"># if set 0 will show all</span></span><br><span class=\"line\">    <span class=\"attr\">sort:</span> <span class=\"string\">date</span> <span class=\"comment\"># date or updated</span></span><br><span class=\"line\">    <span class=\"attr\">sort_order:</span> <span class=\"comment\"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure>\n<p>几张图片具体内容在猫猫博客仓库里有，请在github打开本项目仓库。</p>\n<h3 id=\"链接配置：\"><a href=\"#链接配置：\" class=\"headerlink\" title=\"链接配置：\"></a>链接配置：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page link</span><br><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<p>友链页面：<br>nano ~&#x2F;hexo&#x2F;source&#x2F;link&#x2F;index.md<br>两行横线中间添加：<br>type: “link”<br>另外三个页面同理。<br>about页面记得写点你的自我介绍啥的，要不然关于页面会是空的。</p>\n<h3 id=\"友链配置：\"><a href=\"#友链配置：\" class=\"headerlink\" title=\"友链配置：\"></a>友链配置：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/hexo/source/_data</span><br><span class=\"line\">nano ~/hexo/source/_data/link.yml</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">class_name:</span> <span class=\"string\">友情链接</span></span><br><span class=\"line\">  <span class=\"attr\">class_desc:</span> <span class=\"string\">欢迎互关喵～</span></span><br><span class=\"line\">  <span class=\"attr\">link_list:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Moe-hacker</span></span><br><span class=\"line\">      <span class=\"attr\">link:</span> <span class=\"string\">https://moe-hacker.github.io</span></span><br><span class=\"line\">      <span class=\"attr\">avatar:</span> <span class=\"string\">/img/face.jpg</span></span><br><span class=\"line\">      <span class=\"attr\">descr:</span> <span class=\"string\">咱自己喵～</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"开始写博客：\"><a href=\"#开始写博客：\" class=\"headerlink\" title=\"开始写博客：\"></a>开始写博客：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> /hexo/source/_posts/hello-world.md</span><br><span class=\"line\">hexo new <span class=\"built_in\">test</span></span><br><span class=\"line\">nano /hexo/source/_posts/test.md</span><br></pre></td></tr></table></figure>\n<p>首先更改以下内容，加入两行横线中间：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标题</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> tag1</span><br><span class=\"line\"><span class=\"bullet\">  -</span> tag2</span><br><span class=\"line\"><span class=\"bullet\">  -</span> tag3</span><br><span class=\"line\">top<span class=\"emphasis\">_img: /img/cover.jpg</span></span><br><span class=\"line\"><span class=\"emphasis\">cover: /img/cover.jpg</span></span><br></pre></td></tr></table></figure>\n<p>然后便是markdown书写了，具体语法自行百度，仅展示两个技巧。</p>\n<h4 id=\"居中文字：\"><a href=\"#居中文字：\" class=\"headerlink\" title=\"居中文字：\"></a>居中文字：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>文字<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"行首缩进：\"><a href=\"#行首缩进：\" class=\"headerlink\" title=\"行首缩进：\"></a>行首缩进：</h4><p>本人的博客遇到了&amp;emsp;等字符不生效的问题，事实上这个就是这么直接打出来的。<br>不过咱有办法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.sj</span>&#123; <span class=\"attribute\">text-indent</span>:<span class=\"number\">2em</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sj&quot;</span>&gt;</span>文字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到文字缩进了两个空格。</p>\n<h3 id=\"博客部署：\"><a href=\"#博客部署：\" class=\"headerlink\" title=\"博客部署：\"></a>博客部署：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>去访问localhost:4000，内容满意就可以部署到仓库了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释：\"><a href=\"#注释：\" class=\"headerlink\" title=\"注释：\"></a>注释：</h3><p>图片放在 ~&#x2F;hexo&#x2F;public&#x2F;img中，命名别搞混就行。<br>配置开启了一些动效，可以关闭。<br>部分配置自己试一下就知道是什么内容了。<br>配置里面图片混用一张是因为这只猫猫太懒，千万别学习。<br>最后就是，学习下md语法，写博客别跟猫猫一样水就好了。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover_type":"img","excerpt":"","more":"<p>咱自己的博客配置教程喵～</p>\n<h3 id=\"前期准备：\"><a href=\"#前期准备：\" class=\"headerlink\" title=\"前期准备：\"></a>前期准备：</h3><p>本博客在linux环境下搭建，部分内容于windows下稍有不同。<br>你需要：git，ssh，nodejs，npm，github-cli。<br>你可能还需要：一个脑子。<br>可惜猫猫是没有脑子的喵呜………<br>去github账号设置&#x3D;&gt;开发者设置&#x3D;&gt;令牌中获取一个token。<br>在你的github账户下创建 用户名.github.io这个仓库。<br>注：github-cli的token为明文存储，请勿在不受您本人信任的设备上用这种方式登录。<br>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh auth login</span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;你的电子邮件地址&quot;</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;你的github用户名&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo部署：\"><a href=\"#hexo部署：\" class=\"headerlink\" title=\"hexo部署：\"></a>hexo部署：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> hexo</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com/</span><br><span class=\"line\">npm install -g hexo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm install hexo-theme-butterfly hexo-renderer-pug hexo-renderer-stylus cheerio hexo-deployer-git hexo-wordcount --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo配置：\"><a href=\"#hexo配置：\" class=\"headerlink\" title=\"hexo配置：\"></a>hexo配置：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/hexo/_config.yml</span><br></pre></td></tr></table></figure>\n<p>更改以下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">网站子标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">网站描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">关键字</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">关键字</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">你的名字</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">你的网站地址</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">&#x27;git@github.com:你的用户名/你的博客仓库&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"主题配置：\"><a href=\"#主题配置：\" class=\"headerlink\" title=\"主题配置：\"></a>主题配置：</h3><p>请熟练使用nano等编辑器的跳转功能！！！</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/hexo/node_modules/hexo-theme-butterfly/_config.yml</span><br></pre></td></tr></table></figure>\n<p>目前个人修改：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">   <span class=\"string\">主页:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">   <span class=\"string\">归档:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">   <span class=\"string\">标签:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">   <span class=\"string\">分类:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-folder-open</span></span><br><span class=\"line\">  <span class=\"comment\"># List||fas fa-list:</span></span><br><span class=\"line\">  <span class=\"comment\">#   Music: /music/ || fas fa-music</span></span><br><span class=\"line\">  <span class=\"comment\">#   Movie: /movies/ || fas fa-video</span></span><br><span class=\"line\">   <span class=\"string\">友情链接:</span> <span class=\"string\">/link/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-link</span></span><br><span class=\"line\">   <span class=\"string\">关于:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-heart</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">   <span class=\"attr\">fab fa-github:</span> <span class=\"string\">https://github.com/Moe-hacker</span> <span class=\"string\">||</span> <span class=\"string\">Github</span></span><br><span class=\"line\">   <span class=\"attr\">fas fa-envelope:</span> <span class=\"string\">mailto:moe-hacker@outlook.com</span> <span class=\"string\">||</span> <span class=\"string\">Email</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">/img/face.png</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">img:</span> <span class=\"string\">/img/face.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">effect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">index_img:</span> <span class=\"string\">/img/fufu.jpg</span></span><br><span class=\"line\"><span class=\"attr\">default_top_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">archive_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">tag_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">tag_per_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">category_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">category_per_img:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">default_cover:</span> <span class=\"string\">/img/cover.jpg</span></span><br><span class=\"line\"><span class=\"attr\">wordcount:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">post_wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">theme_color:</span></span><br><span class=\"line\">   <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">main:</span> <span class=\"string\">&quot;#FEE4D0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">paginator:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">button_hover:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">text_selection:</span> <span class=\"string\">&quot;#000000&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">link_color:</span> <span class=\"string\">&quot;#99a9bf&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">meta_color:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">hr_color:</span> <span class=\"string\">&quot;#A6E3A1&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   code_foreground: &quot;#F47466&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   code_background: &quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">toc_color:</span> <span class=\"string\">&quot;#fee4d0&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   blockquote_padding_color: &quot;#49b1f5&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   blockquote_background_color: &quot;#49b1f5&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#   scrollbar_color: &quot;#49b1f5&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">meta_theme_color_light:</span> <span class=\"string\">&quot;ffffff&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">meta_theme_color_dark:</span> <span class=\"string\">&quot;#0d0d0d&quot;</span></span><br><span class=\"line\"><span class=\"attr\">background:</span> <span class=\"string\">url(https://moe-hacker.github.io/img/fufu_background.jpg)</span></span><br><span class=\"line\"><span class=\"comment\"># Footer Background</span></span><br><span class=\"line\"><span class=\"attr\">footer_bg:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">enter_transitions:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">activate_power_mode:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">colorful:</span> <span class=\"literal\">true</span> <span class=\"comment\"># open particle animation (冒光特效)</span></span><br><span class=\"line\">  <span class=\"attr\">shake:</span> <span class=\"literal\">true</span> <span class=\"comment\">#  open shake (抖動特效)</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">fireworks:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">zIndex:</span> <span class=\"number\">9999</span> <span class=\"comment\"># -1 or 9999</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">beautify:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span> <span class=\"comment\"># site/post</span></span><br><span class=\"line\">  <span class=\"attr\">title-prefix-icon:</span> <span class=\"comment\"># &#x27;\\f0c1&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">title-prefix-icon-color:</span> <span class=\"comment\"># &#x27;#F47466&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">hr_icon:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"comment\"># the unicode value of Font Awesome icon, such as &#x27;\\3423&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">icon-top:</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Typewriter Effect (打字效果)</span></span><br><span class=\"line\">  <span class=\"attr\">effect:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Effect Speed Options (打字效果速度參數)</span></span><br><span class=\"line\">  <span class=\"attr\">startDelay:</span> <span class=\"number\">300</span> <span class=\"comment\"># time before typing starts in milliseconds</span></span><br><span class=\"line\">  <span class=\"attr\">typeSpeed:</span> <span class=\"number\">150</span> <span class=\"comment\"># type speed in milliseconds</span></span><br><span class=\"line\">  <span class=\"attr\">backSpeed:</span> <span class=\"number\">50</span> <span class=\"comment\"># backspacing speed in milliseconds</span></span><br><span class=\"line\">  <span class=\"comment\"># loop (循環打字)</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># source 調用第三方服務</span></span><br><span class=\"line\">  <span class=\"comment\"># source: false 關閉調用</span></span><br><span class=\"line\">  <span class=\"comment\"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class=\"line\">  <span class=\"comment\"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class=\"line\">  <span class=\"comment\"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class=\"line\">  <span class=\"comment\"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class=\"line\">  <span class=\"attr\">source:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class=\"line\">  <span class=\"attr\">sub:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Keep</span> <span class=\"string\">moe.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">Keep</span> <span class=\"string\">cool.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">keep</span> <span class=\"string\">hacking.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">——Talk</span> <span class=\"string\">is</span> <span class=\"string\">cheap，</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">show</span> <span class=\"string\">me</span> <span class=\"string\">the</span> <span class=\"string\">code.</span></span><br><span class=\"line\"><span class=\"attr\">aside:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hide:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">button:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile</span></span><br><span class=\"line\">  <span class=\"attr\">position:</span> <span class=\"string\">right</span> <span class=\"comment\"># left or right</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span></span><br><span class=\"line\">    <span class=\"attr\">archive:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">tag:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">category:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">card_author:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span></span><br><span class=\"line\">    <span class=\"attr\">button:</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">icon:</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\">      <span class=\"attr\">text:</span> <span class=\"string\">Follow</span> <span class=\"string\">Me</span></span><br><span class=\"line\">      <span class=\"attr\">link:</span> <span class=\"string\">https://github.com/Moe-hacker</span></span><br><span class=\"line\">  <span class=\"attr\">card_announcement:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">content:</span> <span class=\"string\">沨鸾的小窝</span></span><br><span class=\"line\">  <span class=\"attr\">card_recent_post:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">5</span> <span class=\"comment\"># if set 0 will show all</span></span><br><span class=\"line\">    <span class=\"attr\">sort:</span> <span class=\"string\">date</span> <span class=\"comment\"># date or updated</span></span><br><span class=\"line\">    <span class=\"attr\">sort_order:</span> <span class=\"comment\"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure>\n<p>几张图片具体内容在猫猫博客仓库里有，请在github打开本项目仓库。</p>\n<h3 id=\"链接配置：\"><a href=\"#链接配置：\" class=\"headerlink\" title=\"链接配置：\"></a>链接配置：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page link</span><br><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<p>友链页面：<br>nano ~&#x2F;hexo&#x2F;source&#x2F;link&#x2F;index.md<br>两行横线中间添加：<br>type: “link”<br>另外三个页面同理。<br>about页面记得写点你的自我介绍啥的，要不然关于页面会是空的。</p>\n<h3 id=\"友链配置：\"><a href=\"#友链配置：\" class=\"headerlink\" title=\"友链配置：\"></a>友链配置：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/hexo/source/_data</span><br><span class=\"line\">nano ~/hexo/source/_data/link.yml</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">class_name:</span> <span class=\"string\">友情链接</span></span><br><span class=\"line\">  <span class=\"attr\">class_desc:</span> <span class=\"string\">欢迎互关喵～</span></span><br><span class=\"line\">  <span class=\"attr\">link_list:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Moe-hacker</span></span><br><span class=\"line\">      <span class=\"attr\">link:</span> <span class=\"string\">https://moe-hacker.github.io</span></span><br><span class=\"line\">      <span class=\"attr\">avatar:</span> <span class=\"string\">/img/face.jpg</span></span><br><span class=\"line\">      <span class=\"attr\">descr:</span> <span class=\"string\">咱自己喵～</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"开始写博客：\"><a href=\"#开始写博客：\" class=\"headerlink\" title=\"开始写博客：\"></a>开始写博客：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> /hexo/source/_posts/hello-world.md</span><br><span class=\"line\">hexo new <span class=\"built_in\">test</span></span><br><span class=\"line\">nano /hexo/source/_posts/test.md</span><br></pre></td></tr></table></figure>\n<p>首先更改以下内容，加入两行横线中间：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标题</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> tag1</span><br><span class=\"line\"><span class=\"bullet\">  -</span> tag2</span><br><span class=\"line\"><span class=\"bullet\">  -</span> tag3</span><br><span class=\"line\">top<span class=\"emphasis\">_img: /img/cover.jpg</span></span><br><span class=\"line\"><span class=\"emphasis\">cover: /img/cover.jpg</span></span><br></pre></td></tr></table></figure>\n<p>然后便是markdown书写了，具体语法自行百度，仅展示两个技巧。</p>\n<h4 id=\"居中文字：\"><a href=\"#居中文字：\" class=\"headerlink\" title=\"居中文字：\"></a>居中文字：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>文字<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"行首缩进：\"><a href=\"#行首缩进：\" class=\"headerlink\" title=\"行首缩进：\"></a>行首缩进：</h4><p>本人的博客遇到了&amp;emsp;等字符不生效的问题，事实上这个就是这么直接打出来的。<br>不过咱有办法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.sj</span>&#123; <span class=\"attribute\">text-indent</span>:<span class=\"number\">2em</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sj&quot;</span>&gt;</span>文字<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到文字缩进了两个空格。</p>\n<h3 id=\"博客部署：\"><a href=\"#博客部署：\" class=\"headerlink\" title=\"博客部署：\"></a>博客部署：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>去访问localhost:4000，内容满意就可以部署到仓库了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释：\"><a href=\"#注释：\" class=\"headerlink\" title=\"注释：\"></a>注释：</h3><p>图片放在 ~&#x2F;hexo&#x2F;public&#x2F;img中，命名别搞混就行。<br>配置开启了一些动效，可以关闭。<br>部分配置自己试一下就知道是什么内容了。<br>配置里面图片混用一张是因为这只猫猫太懒，千万别学习。<br>最后就是，学习下md语法，写博客别跟猫猫一样水就好了。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n"},{"title":"沨鸾的Shell小技巧","date":"2022-12-03T18:56:57.000Z","top_img":"/img/cover.jpg","cover":"/img/cover.jpg","_content":"欢迎来到猫猫的Shell实验室喵！\n跟着沨鸾学shell，学到最后只会喵喵喵。 \n文章非入门教程，不要妄想本猫亲自教你基础知识，哼！ \n生草部分也会包含有一些花式操作。\n本文不定期更新。 \n## 正经部分：\n### 语法规范：\n变量要加{}括起来。\n函数最好加个function关键字。\n头部一定要有释伴(shebang)。\n记得写注释，要不然也就上帝能看懂你写的什么了。\n退出时要有返回状态。\n能用[[]]就别用[]。\n尽量用printf代替echo使用以提供更好的兼容性。\n没用的输出记得丢弃。\n\\> /dev/null丢不掉就2>&1 > /dev/null。\n不要定义太复杂的架构，比如函数互相调用。\n当然猫猫基本没怎么遵守过。\n### 三元表达式：\n比如你想要这样一段的功能：\n```sh\nif [[ $x == 1 ]];then\n  echo test\nelse\n  echo fail\nfi\n```\n你可以这么写：\n```sh\n([[ $x == 1 ]]&&echo test)||echo fail\n```\n测试一下：\n```sh\nx=0\n([[ $x == 1 ]]&&echo test)||echo fail\nx=1\n([[ $x == 1 ]]&&echo test)||echo fail\n```\n当然，在写脚本时你会遇到很多个这样的判等，我们不妨直接封装：\n```sh\nis_value(){\n  ([[ $1 == $2 ]]&&return 0)||return 1\n}\n(is_value 1 2&&echo test)||echo fail\n(is_value 1 1&&echo test)||echo fail\n```\n水代码又少了一个理由。\n等下语法规范呢？\n遵守是不可能遵守的了。。。\n### 三元表达式+：\n比如你想要这一段的功能：\n```sh\nif [[ $x == 1 ]];then\n  echo 1\nelif [[ $x == 2 ]];then\n  echo 2\nelse\n  echo fail\nfi\n```\n你可以写成这样：\n```sh\n([[ $x == 1 ]]&&echo 1)||([[ $x == 2 ]]&&echo 2)||echo fail\n```\n看你写的代码的人会感谢你的。\n### 最高端的输出颜色自定义：\n使用rgb代码定义输出颜色。\n```\n\\033[1;38;2;R;G;Bm\n```\n比如moe-container里的这行：\n```C\nprintf(\"\\033[1;38;2;254;228;208mUsage:\\n\");\n```\n当然这是C语言。\n等下这是shell技巧……对吧。 \n### 输出居中：\n首先你得知道要居中的输出有多长。\n然后：\n```sh\nWIDTH=$(($(($(stty size|awk '{print $2}')))/2-居中字符长度的一半))\necho -e \"\\033[${WIDTH}C内容\"\n```\n除了花哨点也没啥大用。\n### 输出一行分割线：\n```sh\nWIDTH=$(stty size|awk '{print $2}')\necho $(yes \"=\"|sed $WIDTH'q'|tr -d '\\n')\n```\n当然可以玩的更花哨一点：\n```sh\nWIDTH=$(stty size|awk '{print $2}')\nWIDTH=$((WIDTH/2-2))\necho \"$(yes \"=\"|sed $WIDTH'q'|tr -d '\\n')xxxx$(yes \"=\"|sed $WIDTH'q'|tr -d '\\n')\"\n```\n$WIDTH定义参照上一条。\n或者像termux-container里这样：\n```sh\nWIDTH=$(stty size|awk '{print $2}')\nWIDTH=$((WIDTH-13))\necho -e \"\\e[30;48;5;159mCONTAINER_RUN$(yes \" \"|sed $WIDTH'q'|tr -d '\\n')\\033[0m\"\n```\n莫名科技感。\n### sed正则匹配：\n```\necho 123abc > test\nsed -i \"s/[0-9]*/数字替换/\" test\ncat test\n```\n正则表达式具体内容请自行利用搜索引擎。\n想当年猫猫要是会用，termux-container里的屎山也能少点。\n### 更改光标样式：\n```sh\nprintf '\\e[2 q'\nprintf '\\e[6 q'\nprintf '\\e[4 q'\n```\n仅在termux验证成功过。\n### Ctrl+D信号捕获：\n不是说好EOF不是信号的吗？\n事实上read可以捕获。\nread无论读到什么东西加回车都会将结果记录并正常退出。\n但是，读到EOF却未换行会返回1。\n可以read后用$?的值是否为0来作为条件进行捕获。\n当然read逐字读取时不适用，但是我们还有方法专门针对逐字读取：\n```sh\nwhile :; do read -N 1 key&&if [[ ${key} == $(printf \"\\004\") ]];then echo CTRL-D;fi; done\n```\n似乎挺没用的。\n(termux-container将会利用这一特性)\n### 网易云歌曲名称格式化：\n网易云默认下载的音乐命名格式是这样的：\n```\nAkie秋绘 - なんでもないや 没什么大不了的（翻自 Radwimps）.mp3\nENE - パズル.mp3\nHanser - 勾指起誓.mp3\nのぶなが - 深海少女.mp3\n南杉 - 樱花樱花想见你.mp3\n鹿乃 - 小夜子.mp3\n鹿乃 - 心拍数#0822.mp3\n鹿乃 - 桜のような恋でした.mp3\n```\n(浓度过纯)\n咱们可以这样：\n```sh\nls *.mp3|while read music\ndo\nartist=${music%% -*}\nname=${music##*-\\ }\nname=${name%%.mp3}\nname=${name%%\"（\"*}\nname=${name%%\"(\"*}\nmv \"$music\" \"$name-[$artist].mp3\"\ndone\n```\n于是文件名就成了这样：\n```\nなんでもないや 没什么大不了的-[Akie秋绘].mp3\nパズル-[ENE].mp3\n勾指起誓-[Hanser].mp3\n深海少女-[のぶなが].mp3\n樱花樱花想见你-[南杉].mp3\n小夜子-[鹿乃].mp3\n心拍数#0822-[鹿乃].mp3\n桜のような恋でした-[鹿乃].mp3\n```\n个人感觉好看多了。\n### 用Shell写代码：\n(怕是人家shell自己写的代码都比你规范)\nmoe-container里有这样一段头文件：\n```C\n#define DROP_CAP_SYS_ADMIN 1\n#define DROP_CAP_SYS_MODULE 1\n#define DROP_CAP_SYS_RAWIO 1\n#define DROP_CAP_SYS_PACCT 1\n#define DROP_CAP_SYS_NICE 1\n#define DROP_CAP_SYS_RESOURCE 1\n#define DROP_CAP_SYS_TTY_CONFIG 1\n………………\n```\n可以看到#define DROP_和后面的1都是重复的\n于是我们可以单独写一个caplist文件来记录那些不同的部分：\n```\nCAP_SYS_ADMIN\nCAP_SYS_MODULE\nCAP_SYS_RAWIO\nCAP_SYS_PACCT\nCAP_SYS_NICE\nCAP_SYS_RESOURCE\nCAP_SYS_TTY_CONFIG\n```\n然后：\n```sh\ncat caplist|while read cap\ndo\necho \"#define DROP_${cap} 1\"\ndone\n```\n事实上这一段：\n```C\n    if(DROP_CAP_SYS_ADMIN == 1){\n      cap_drop_bound(CAP_SYS_ADMIN);\n    }\n    if(DROP_CAP_SYS_MODULE == 1){\n      cap_drop_bound(CAP_SYS_MODULE);\n    }\n    if(DROP_CAP_SYS_RAWIO == 1){\n      cap_drop_bound(CAP_SYS_RAWIO);\n    }\n………………\n```\n是这么生成的：\n```sh\ncat caplist|while read cap\ndo\necho \"    if(DROP_$cap==1){\\n      cap_drop_bound($cap);\\n    }\"\ndone\n```\n非常规范，非常工整。\nC语言实现了shell，shell可以生成简单重复的C语言代码，双向奔赴，非常美好。\n### 萌新代码生成：\n```sh\nx(){\necho -e \"number=input(\\\"请输入一个数字:\\\")\"\necho -e \"if number == 0:\\n    print(\\\"0是一个偶数\\\")\"\nfor i in {1..114514}\ndo\n[[ $(($i%2)) == 0 ]]&&echo -e \"elif number == $i:\\n    print(\\\"$i是一个偶数\\\")\"||echo -e \"elif number == $i:\\n    print(\\\"$i是一个奇数\\\")\"\ndone\necho -e \"else:\\n    print(\\\"数太大了我还不会\\\")\"\n}\nx > 1.py\n```\n逝python，但是运行会直接内存错误。\n## 生草部分：\n### 变量当函数/命令名执行：\n```sh\ntest(){\n  $1\n}\ntest ls\n```\n不做类型检查你就可以为所欲为了是吧。\n### 忽略Ctrl+C：\n用户别想用Ctrl+C杀死你的进程(大草)。\n```sh\ntrap \"\" SIGINT\n```\n### 用shell实现一个shell：\n一个shell要有：\n- 指令解析\n- 不能被ctrl-c杀死\n- ctrl-d后会退出\n- 上下键显示命令历史记录\n- 命令历史记录可编辑\n\n没问题，都安排上。\n(代码部分判断依赖于hexdump)\nSHELL_CONSOLE()函数建议照抄，原本是以Apache2协议开源的，不过猫猫也不介意用MIT协议在这里重复开源一遍：\n```sh\nSHELL_CONSOLE(){\n  HISTORY=0\n  COMMAND=\"\"\n  while :\n  do\n    HISTORY_LINES=$(awk 'END{print NR}' $HOME/.shell_history)\n    HISTORY_LINES=$(( ${HISTORY_LINES}-1))\n    SIZE=$(stty size|awk '{printf $2}')\n    stty erase '^?'\n    printf \"${COLOR}\"\n    printf \"\\033[?25l\"\n    printf \"\\r\"\n    printf \"\\033[1G$(yes \" \"|sed $SIZE'q'|tr -d '\\n')\"\n    printf \"\\033[1GConsole > ${COMMAND}\"\n    printf \"\\033[?25h\"\n    read -s -N1 COMMAND0\n    if [[ ${COMMAND0} == $(echo -e \"\\004\") ]];then\n      echo -e \"\\n\\nExit.\\033[0m\"&&exit\n    fi\n    if [[ $(echo ${COMMAND0}|hexdump|head -n1|awk '{print $2}') == \"000a\" ]]&&[[ ${COMMAND0} != \" \" ]];then\n      echo\n      SHELL_CONSOLE_MAIN ${COMMAND}\n      COMMAND=\"\"\n      continue\n    fi\n    if [[ $(echo ${COMMAND0}|hexdump|head -n1|awk '{print $2}') == \"0a7f\" ]];then\n      COMMAND=${COMMAND%?}\n      continue\n    elif [[ $(echo ${COMMAND0}|hexdump|head -n1|awk '{print $2}') == \"0a08\" ]];then\n      COMMAND=${COMMAND%?}\n      continue\n    elif [[ ${COMMAND0} == $(printf \"\\033\") ]];then\n      read -s -N 2 COMMAND1\n      if [[ ${COMMAND1} == \"[A\" ]];then\n        if (($HISTORY <= ${HISTORY_LINES}));then\n          HISTORY=$(($HISTORY+1))\n        fi\n        COMMAND=$(cat $HOME/.shell_history|tail -${HISTORY}|head -n1)\n        continue\n      elif [[ ${COMMAND1} == \"[B\" ]];then\n        if (($HISTORY >= 2));then\n          HISTORY=$(($HISTORY-1))\n        fi\n        COMMAND=$(cat $HOME/.shell_history|tail -${HISTORY}|head -n1)\n        continue\n      else\n        continue\n      fi\n    else\n      COMMAND+=${COMMAND0}\n      continue\n    fi\n  done\n}\n```\n这段代码是优化过的，原来那段简直是黑历史喵！！！\n作用是获取命令并传递给SHELL_CONSOLE_MAIN函数进行解析。\n于是你只需要自己写一个SHELL_CONSOLE_MAIN函数，大概长这样(从termux-container v9复制过来的)：\n```sh\nSHELL_CONSOLE_MAIN(){\n  if [[ $1 != \"\" ]];then\n    echo $@ >> $HOME/.shell_history\n  fi\n  case $1 in\n    \"help\") SHOW_HELPS;;\n    \"search\") SEARCH_IMAGES $2 $3;;\n    \"login\") RUN_CONTAINER $2;;\n    \"pull\") PULL_ROOTFS $2 $3 $4;;\n    \"import\") IMPORT_ROOTFS $2;;\n    \"export\") EXPORT_CONTAINER $2;;\n    \"new\") CONTAINER_NEW;;\n    \"ls\") LIST;;\n    \"exit\") echo -e \"\\nExit.\\033[0m\"&&exit;;\n    \"rm\") REMOVE_CONTAINER $2;;\n    \"cp\") CONTAINER_CP $2 $3;;\n    \"\") return;;\n    *) echo -e \"\\033[31mError: Unknow command \\`$@\\`,type \\`help\\` to show helps.\\033[0m${COLOR}\"\n  esac\n}\n```\n最后在这段shell的头部加上：\n```sh\ntrap \"echo&&SHELL_CONSOLE\" SIGINT\nRGB=\"254;228;208\"\nCOLOR=\"\\033[1;38;2;${RGB}m\"\n```\n第一行可以确保shell不被杀死，每次收到ctrl-c信号都会终止当前命令并跳转到SHELL_CONSOLE。\n二三行是shell输出颜色的定义，为rgb十进制值。\n在尾部调用一下SHELL_CONSOLE函数，就完了。\n### 仿windows安装界面用户许可：\n没啥好说的，直接上代码就是了：\n```sh\ntrap \"printf '\\033[?25h'&&exit\" SIGINT\nRGB=\"254;228;208\"\nCOLOR=\"\\033[1;38;2;${RGB}m\"\nWIDTH=$(stty size|awk '{print $2}')\nHEIGHT=$(stty size|awk '{print $1}')\nHEIGHT=$(($HEIGHT-4))\nclear\necho -e \"${COLOR}\\033[?25l╔$(yes \"═\"|sed $(($WIDTH-2))'q'|tr -d '\\n')╗\"\nprintf \"║ \\033[1;31m○ \\033[1;33m○ \\033[1;32m○${COLOR}\\033[${WIDTH}G║\\n\"\necho -e \"\\033[?25l║$(yes \"═\"|sed $(($WIDTH-2))'q'|tr -d '\\n')║\"\nprintf \"║  TERMUX-CONTAINER\\033[${WIDTH}G║\\n\"\ni=2\nwhile (( $i<=$HEIGHT ));do\ni=$(($i+1))\nprintf \"║\\033[${WIDTH}G║\\n\"\ndone\nprintf \"\\033[$(($HEIGHT+4));1H╚$(yes \"═\"|sed $(($WIDTH-2))'q'|tr -d '\\n')╝\"\nprintf \"\\033[$(($HEIGHT));4H╚$(yes \"═\"|sed $(($WIDTH-8))'q'|tr -d '\\n')╝\"\nWIDTH=$(($WIDTH-5))\nWIDTH_=$(($WIDTH+2))\nprintf \"\\033[10;4H║\\033[${WIDTH}G\\033[1;48;2;114;114;114;38;2;0;0;0m/\\\\ \\033[0m${COLOR}\\033[${WIDTH_}G║\\n\"\nprintf \"\\033[11;4H║\\033[${WIDTH}G\\033[1;48;2;66;66;66m  \\033[0m${COLOR}║\\n\"\nWIDTH=$(($WIDTH+5))\ni=11\nHEIGHT=$(($HEIGHT-3))\nWIDTH=$(($WIDTH-5))\nwhile (( $i<=$HEIGHT ));do\ni=$(($i+1))\nprintf \"\\033[${i};4H║\\033[${WIDTH}G\\033[1;48;2;114;114;114m  \\033[0m${COLOR}║\\n\"\ndone\ni=$(($i+1))\nprintf \"\\033[${i};4H║\\033[${WIDTH}G\\033[1;48;2;114;114;114;38;2;0;0;0m\\\\/\\033[0m${COLOR}║\\n\"\nprintf \"\\033[9;4H╔$(yes \"═\"|sed $(($WIDTH-3))'q'|tr -d '\\n')╗\"\necho -e \"\\033[7;5H适用的声明和许可条款\"\nWIDTH=$(($WIDTH-26))\necho -e \"\\033[10;${WIDTH}H最后更新日期：2022年12月\"\necho -e \"\\033[11;7Htermux-container许可条款:\"\necho -e \"\\033[13;7H本程序以Apache2.0协议授权。\"\necho -e \"\\033[14;7H参见：\\033[4mhttp://www.apache.org/licenses/\\033[0m${COLOR}\"\necho -e \"\\033[15;7H您至少需要了解以下几点：\"\necho -e \"\\033[17;7H  ● 本程序\\`无担保\\`。\"\necho -e \"\\033[18;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`损失，作者概不负责。\"\necho -e \"\\033[19;7H  ● 您应当在遵守当地法律规定的前提下使用本程序。\"\necho -e \"\\033[20;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`法律责任，作者概不负责。\"\necho -e \"\\033[21;7H  ● 本程序作者保留其著作权，严禁在不遵循其许可的情况下二次分发。\"\necho -e \"\\033[${HEIGHT};7H Copyright 2022 Moe-hacker\"\nHEIGHT=$(($HEIGHT+5))\necho -e \"\\033[${HEIGHT};7H \\033[1;32m[✓]\\033[0m${COLOR} 我已阅读并接受许可条款 ， 按回车键同意\"\nHEIGHT=$(($HEIGHT+2))\nprintf \"\\033[${HEIGHT};1H\"\nread\nprintf \"\\033[?25h\\033[0m\"\ntouch $PREFIX/share/termux-container/licenses.allowed\nclear\n```\n运行效果自行测试。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n\n","source":"_posts/moe-shell-lab.md","raw":"---\ntitle: 沨鸾的Shell小技巧\ndate: 2022-12-04 02:56:57\ntags:\n  - Linux\n  - Shell\n  - Termux\ntop_img: /img/cover.jpg\ncover: /img/cover.jpg\n---\n欢迎来到猫猫的Shell实验室喵！\n跟着沨鸾学shell，学到最后只会喵喵喵。 \n文章非入门教程，不要妄想本猫亲自教你基础知识，哼！ \n生草部分也会包含有一些花式操作。\n本文不定期更新。 \n## 正经部分：\n### 语法规范：\n变量要加{}括起来。\n函数最好加个function关键字。\n头部一定要有释伴(shebang)。\n记得写注释，要不然也就上帝能看懂你写的什么了。\n退出时要有返回状态。\n能用[[]]就别用[]。\n尽量用printf代替echo使用以提供更好的兼容性。\n没用的输出记得丢弃。\n\\> /dev/null丢不掉就2>&1 > /dev/null。\n不要定义太复杂的架构，比如函数互相调用。\n当然猫猫基本没怎么遵守过。\n### 三元表达式：\n比如你想要这样一段的功能：\n```sh\nif [[ $x == 1 ]];then\n  echo test\nelse\n  echo fail\nfi\n```\n你可以这么写：\n```sh\n([[ $x == 1 ]]&&echo test)||echo fail\n```\n测试一下：\n```sh\nx=0\n([[ $x == 1 ]]&&echo test)||echo fail\nx=1\n([[ $x == 1 ]]&&echo test)||echo fail\n```\n当然，在写脚本时你会遇到很多个这样的判等，我们不妨直接封装：\n```sh\nis_value(){\n  ([[ $1 == $2 ]]&&return 0)||return 1\n}\n(is_value 1 2&&echo test)||echo fail\n(is_value 1 1&&echo test)||echo fail\n```\n水代码又少了一个理由。\n等下语法规范呢？\n遵守是不可能遵守的了。。。\n### 三元表达式+：\n比如你想要这一段的功能：\n```sh\nif [[ $x == 1 ]];then\n  echo 1\nelif [[ $x == 2 ]];then\n  echo 2\nelse\n  echo fail\nfi\n```\n你可以写成这样：\n```sh\n([[ $x == 1 ]]&&echo 1)||([[ $x == 2 ]]&&echo 2)||echo fail\n```\n看你写的代码的人会感谢你的。\n### 最高端的输出颜色自定义：\n使用rgb代码定义输出颜色。\n```\n\\033[1;38;2;R;G;Bm\n```\n比如moe-container里的这行：\n```C\nprintf(\"\\033[1;38;2;254;228;208mUsage:\\n\");\n```\n当然这是C语言。\n等下这是shell技巧……对吧。 \n### 输出居中：\n首先你得知道要居中的输出有多长。\n然后：\n```sh\nWIDTH=$(($(($(stty size|awk '{print $2}')))/2-居中字符长度的一半))\necho -e \"\\033[${WIDTH}C内容\"\n```\n除了花哨点也没啥大用。\n### 输出一行分割线：\n```sh\nWIDTH=$(stty size|awk '{print $2}')\necho $(yes \"=\"|sed $WIDTH'q'|tr -d '\\n')\n```\n当然可以玩的更花哨一点：\n```sh\nWIDTH=$(stty size|awk '{print $2}')\nWIDTH=$((WIDTH/2-2))\necho \"$(yes \"=\"|sed $WIDTH'q'|tr -d '\\n')xxxx$(yes \"=\"|sed $WIDTH'q'|tr -d '\\n')\"\n```\n$WIDTH定义参照上一条。\n或者像termux-container里这样：\n```sh\nWIDTH=$(stty size|awk '{print $2}')\nWIDTH=$((WIDTH-13))\necho -e \"\\e[30;48;5;159mCONTAINER_RUN$(yes \" \"|sed $WIDTH'q'|tr -d '\\n')\\033[0m\"\n```\n莫名科技感。\n### sed正则匹配：\n```\necho 123abc > test\nsed -i \"s/[0-9]*/数字替换/\" test\ncat test\n```\n正则表达式具体内容请自行利用搜索引擎。\n想当年猫猫要是会用，termux-container里的屎山也能少点。\n### 更改光标样式：\n```sh\nprintf '\\e[2 q'\nprintf '\\e[6 q'\nprintf '\\e[4 q'\n```\n仅在termux验证成功过。\n### Ctrl+D信号捕获：\n不是说好EOF不是信号的吗？\n事实上read可以捕获。\nread无论读到什么东西加回车都会将结果记录并正常退出。\n但是，读到EOF却未换行会返回1。\n可以read后用$?的值是否为0来作为条件进行捕获。\n当然read逐字读取时不适用，但是我们还有方法专门针对逐字读取：\n```sh\nwhile :; do read -N 1 key&&if [[ ${key} == $(printf \"\\004\") ]];then echo CTRL-D;fi; done\n```\n似乎挺没用的。\n(termux-container将会利用这一特性)\n### 网易云歌曲名称格式化：\n网易云默认下载的音乐命名格式是这样的：\n```\nAkie秋绘 - なんでもないや 没什么大不了的（翻自 Radwimps）.mp3\nENE - パズル.mp3\nHanser - 勾指起誓.mp3\nのぶなが - 深海少女.mp3\n南杉 - 樱花樱花想见你.mp3\n鹿乃 - 小夜子.mp3\n鹿乃 - 心拍数#0822.mp3\n鹿乃 - 桜のような恋でした.mp3\n```\n(浓度过纯)\n咱们可以这样：\n```sh\nls *.mp3|while read music\ndo\nartist=${music%% -*}\nname=${music##*-\\ }\nname=${name%%.mp3}\nname=${name%%\"（\"*}\nname=${name%%\"(\"*}\nmv \"$music\" \"$name-[$artist].mp3\"\ndone\n```\n于是文件名就成了这样：\n```\nなんでもないや 没什么大不了的-[Akie秋绘].mp3\nパズル-[ENE].mp3\n勾指起誓-[Hanser].mp3\n深海少女-[のぶなが].mp3\n樱花樱花想见你-[南杉].mp3\n小夜子-[鹿乃].mp3\n心拍数#0822-[鹿乃].mp3\n桜のような恋でした-[鹿乃].mp3\n```\n个人感觉好看多了。\n### 用Shell写代码：\n(怕是人家shell自己写的代码都比你规范)\nmoe-container里有这样一段头文件：\n```C\n#define DROP_CAP_SYS_ADMIN 1\n#define DROP_CAP_SYS_MODULE 1\n#define DROP_CAP_SYS_RAWIO 1\n#define DROP_CAP_SYS_PACCT 1\n#define DROP_CAP_SYS_NICE 1\n#define DROP_CAP_SYS_RESOURCE 1\n#define DROP_CAP_SYS_TTY_CONFIG 1\n………………\n```\n可以看到#define DROP_和后面的1都是重复的\n于是我们可以单独写一个caplist文件来记录那些不同的部分：\n```\nCAP_SYS_ADMIN\nCAP_SYS_MODULE\nCAP_SYS_RAWIO\nCAP_SYS_PACCT\nCAP_SYS_NICE\nCAP_SYS_RESOURCE\nCAP_SYS_TTY_CONFIG\n```\n然后：\n```sh\ncat caplist|while read cap\ndo\necho \"#define DROP_${cap} 1\"\ndone\n```\n事实上这一段：\n```C\n    if(DROP_CAP_SYS_ADMIN == 1){\n      cap_drop_bound(CAP_SYS_ADMIN);\n    }\n    if(DROP_CAP_SYS_MODULE == 1){\n      cap_drop_bound(CAP_SYS_MODULE);\n    }\n    if(DROP_CAP_SYS_RAWIO == 1){\n      cap_drop_bound(CAP_SYS_RAWIO);\n    }\n………………\n```\n是这么生成的：\n```sh\ncat caplist|while read cap\ndo\necho \"    if(DROP_$cap==1){\\n      cap_drop_bound($cap);\\n    }\"\ndone\n```\n非常规范，非常工整。\nC语言实现了shell，shell可以生成简单重复的C语言代码，双向奔赴，非常美好。\n### 萌新代码生成：\n```sh\nx(){\necho -e \"number=input(\\\"请输入一个数字:\\\")\"\necho -e \"if number == 0:\\n    print(\\\"0是一个偶数\\\")\"\nfor i in {1..114514}\ndo\n[[ $(($i%2)) == 0 ]]&&echo -e \"elif number == $i:\\n    print(\\\"$i是一个偶数\\\")\"||echo -e \"elif number == $i:\\n    print(\\\"$i是一个奇数\\\")\"\ndone\necho -e \"else:\\n    print(\\\"数太大了我还不会\\\")\"\n}\nx > 1.py\n```\n逝python，但是运行会直接内存错误。\n## 生草部分：\n### 变量当函数/命令名执行：\n```sh\ntest(){\n  $1\n}\ntest ls\n```\n不做类型检查你就可以为所欲为了是吧。\n### 忽略Ctrl+C：\n用户别想用Ctrl+C杀死你的进程(大草)。\n```sh\ntrap \"\" SIGINT\n```\n### 用shell实现一个shell：\n一个shell要有：\n- 指令解析\n- 不能被ctrl-c杀死\n- ctrl-d后会退出\n- 上下键显示命令历史记录\n- 命令历史记录可编辑\n\n没问题，都安排上。\n(代码部分判断依赖于hexdump)\nSHELL_CONSOLE()函数建议照抄，原本是以Apache2协议开源的，不过猫猫也不介意用MIT协议在这里重复开源一遍：\n```sh\nSHELL_CONSOLE(){\n  HISTORY=0\n  COMMAND=\"\"\n  while :\n  do\n    HISTORY_LINES=$(awk 'END{print NR}' $HOME/.shell_history)\n    HISTORY_LINES=$(( ${HISTORY_LINES}-1))\n    SIZE=$(stty size|awk '{printf $2}')\n    stty erase '^?'\n    printf \"${COLOR}\"\n    printf \"\\033[?25l\"\n    printf \"\\r\"\n    printf \"\\033[1G$(yes \" \"|sed $SIZE'q'|tr -d '\\n')\"\n    printf \"\\033[1GConsole > ${COMMAND}\"\n    printf \"\\033[?25h\"\n    read -s -N1 COMMAND0\n    if [[ ${COMMAND0} == $(echo -e \"\\004\") ]];then\n      echo -e \"\\n\\nExit.\\033[0m\"&&exit\n    fi\n    if [[ $(echo ${COMMAND0}|hexdump|head -n1|awk '{print $2}') == \"000a\" ]]&&[[ ${COMMAND0} != \" \" ]];then\n      echo\n      SHELL_CONSOLE_MAIN ${COMMAND}\n      COMMAND=\"\"\n      continue\n    fi\n    if [[ $(echo ${COMMAND0}|hexdump|head -n1|awk '{print $2}') == \"0a7f\" ]];then\n      COMMAND=${COMMAND%?}\n      continue\n    elif [[ $(echo ${COMMAND0}|hexdump|head -n1|awk '{print $2}') == \"0a08\" ]];then\n      COMMAND=${COMMAND%?}\n      continue\n    elif [[ ${COMMAND0} == $(printf \"\\033\") ]];then\n      read -s -N 2 COMMAND1\n      if [[ ${COMMAND1} == \"[A\" ]];then\n        if (($HISTORY <= ${HISTORY_LINES}));then\n          HISTORY=$(($HISTORY+1))\n        fi\n        COMMAND=$(cat $HOME/.shell_history|tail -${HISTORY}|head -n1)\n        continue\n      elif [[ ${COMMAND1} == \"[B\" ]];then\n        if (($HISTORY >= 2));then\n          HISTORY=$(($HISTORY-1))\n        fi\n        COMMAND=$(cat $HOME/.shell_history|tail -${HISTORY}|head -n1)\n        continue\n      else\n        continue\n      fi\n    else\n      COMMAND+=${COMMAND0}\n      continue\n    fi\n  done\n}\n```\n这段代码是优化过的，原来那段简直是黑历史喵！！！\n作用是获取命令并传递给SHELL_CONSOLE_MAIN函数进行解析。\n于是你只需要自己写一个SHELL_CONSOLE_MAIN函数，大概长这样(从termux-container v9复制过来的)：\n```sh\nSHELL_CONSOLE_MAIN(){\n  if [[ $1 != \"\" ]];then\n    echo $@ >> $HOME/.shell_history\n  fi\n  case $1 in\n    \"help\") SHOW_HELPS;;\n    \"search\") SEARCH_IMAGES $2 $3;;\n    \"login\") RUN_CONTAINER $2;;\n    \"pull\") PULL_ROOTFS $2 $3 $4;;\n    \"import\") IMPORT_ROOTFS $2;;\n    \"export\") EXPORT_CONTAINER $2;;\n    \"new\") CONTAINER_NEW;;\n    \"ls\") LIST;;\n    \"exit\") echo -e \"\\nExit.\\033[0m\"&&exit;;\n    \"rm\") REMOVE_CONTAINER $2;;\n    \"cp\") CONTAINER_CP $2 $3;;\n    \"\") return;;\n    *) echo -e \"\\033[31mError: Unknow command \\`$@\\`,type \\`help\\` to show helps.\\033[0m${COLOR}\"\n  esac\n}\n```\n最后在这段shell的头部加上：\n```sh\ntrap \"echo&&SHELL_CONSOLE\" SIGINT\nRGB=\"254;228;208\"\nCOLOR=\"\\033[1;38;2;${RGB}m\"\n```\n第一行可以确保shell不被杀死，每次收到ctrl-c信号都会终止当前命令并跳转到SHELL_CONSOLE。\n二三行是shell输出颜色的定义，为rgb十进制值。\n在尾部调用一下SHELL_CONSOLE函数，就完了。\n### 仿windows安装界面用户许可：\n没啥好说的，直接上代码就是了：\n```sh\ntrap \"printf '\\033[?25h'&&exit\" SIGINT\nRGB=\"254;228;208\"\nCOLOR=\"\\033[1;38;2;${RGB}m\"\nWIDTH=$(stty size|awk '{print $2}')\nHEIGHT=$(stty size|awk '{print $1}')\nHEIGHT=$(($HEIGHT-4))\nclear\necho -e \"${COLOR}\\033[?25l╔$(yes \"═\"|sed $(($WIDTH-2))'q'|tr -d '\\n')╗\"\nprintf \"║ \\033[1;31m○ \\033[1;33m○ \\033[1;32m○${COLOR}\\033[${WIDTH}G║\\n\"\necho -e \"\\033[?25l║$(yes \"═\"|sed $(($WIDTH-2))'q'|tr -d '\\n')║\"\nprintf \"║  TERMUX-CONTAINER\\033[${WIDTH}G║\\n\"\ni=2\nwhile (( $i<=$HEIGHT ));do\ni=$(($i+1))\nprintf \"║\\033[${WIDTH}G║\\n\"\ndone\nprintf \"\\033[$(($HEIGHT+4));1H╚$(yes \"═\"|sed $(($WIDTH-2))'q'|tr -d '\\n')╝\"\nprintf \"\\033[$(($HEIGHT));4H╚$(yes \"═\"|sed $(($WIDTH-8))'q'|tr -d '\\n')╝\"\nWIDTH=$(($WIDTH-5))\nWIDTH_=$(($WIDTH+2))\nprintf \"\\033[10;4H║\\033[${WIDTH}G\\033[1;48;2;114;114;114;38;2;0;0;0m/\\\\ \\033[0m${COLOR}\\033[${WIDTH_}G║\\n\"\nprintf \"\\033[11;4H║\\033[${WIDTH}G\\033[1;48;2;66;66;66m  \\033[0m${COLOR}║\\n\"\nWIDTH=$(($WIDTH+5))\ni=11\nHEIGHT=$(($HEIGHT-3))\nWIDTH=$(($WIDTH-5))\nwhile (( $i<=$HEIGHT ));do\ni=$(($i+1))\nprintf \"\\033[${i};4H║\\033[${WIDTH}G\\033[1;48;2;114;114;114m  \\033[0m${COLOR}║\\n\"\ndone\ni=$(($i+1))\nprintf \"\\033[${i};4H║\\033[${WIDTH}G\\033[1;48;2;114;114;114;38;2;0;0;0m\\\\/\\033[0m${COLOR}║\\n\"\nprintf \"\\033[9;4H╔$(yes \"═\"|sed $(($WIDTH-3))'q'|tr -d '\\n')╗\"\necho -e \"\\033[7;5H适用的声明和许可条款\"\nWIDTH=$(($WIDTH-26))\necho -e \"\\033[10;${WIDTH}H最后更新日期：2022年12月\"\necho -e \"\\033[11;7Htermux-container许可条款:\"\necho -e \"\\033[13;7H本程序以Apache2.0协议授权。\"\necho -e \"\\033[14;7H参见：\\033[4mhttp://www.apache.org/licenses/\\033[0m${COLOR}\"\necho -e \"\\033[15;7H您至少需要了解以下几点：\"\necho -e \"\\033[17;7H  ● 本程序\\`无担保\\`。\"\necho -e \"\\033[18;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`损失，作者概不负责。\"\necho -e \"\\033[19;7H  ● 您应当在遵守当地法律规定的前提下使用本程序。\"\necho -e \"\\033[20;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`法律责任，作者概不负责。\"\necho -e \"\\033[21;7H  ● 本程序作者保留其著作权，严禁在不遵循其许可的情况下二次分发。\"\necho -e \"\\033[${HEIGHT};7H Copyright 2022 Moe-hacker\"\nHEIGHT=$(($HEIGHT+5))\necho -e \"\\033[${HEIGHT};7H \\033[1;32m[✓]\\033[0m${COLOR} 我已阅读并接受许可条款 ， 按回车键同意\"\nHEIGHT=$(($HEIGHT+2))\nprintf \"\\033[${HEIGHT};1H\"\nread\nprintf \"\\033[?25h\\033[0m\"\ntouch $PREFIX/share/termux-container/licenses.allowed\nclear\n```\n运行效果自行测试。\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n\n","slug":"moe-shell-lab","published":1,"updated":"2023-05-16T13:05:30.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clid27xuk000bvttwb9g08i7o","content":"<p>欢迎来到猫猫的Shell实验室喵！<br>跟着沨鸾学shell，学到最后只会喵喵喵。<br>文章非入门教程，不要妄想本猫亲自教你基础知识，哼！<br>生草部分也会包含有一些花式操作。<br>本文不定期更新。 </p>\n<h2 id=\"正经部分：\"><a href=\"#正经部分：\" class=\"headerlink\" title=\"正经部分：\"></a>正经部分：</h2><h3 id=\"语法规范：\"><a href=\"#语法规范：\" class=\"headerlink\" title=\"语法规范：\"></a>语法规范：</h3><p>变量要加{}括起来。<br>函数最好加个function关键字。<br>头部一定要有释伴(shebang)。<br>记得写注释，要不然也就上帝能看懂你写的什么了。<br>退出时要有返回状态。<br>能用[[]]就别用[]。<br>尽量用printf代替echo使用以提供更好的兼容性。<br>没用的输出记得丢弃。<br>&gt; &#x2F;dev&#x2F;null丢不掉就2&gt;&amp;1 &gt; &#x2F;dev&#x2F;null。<br>不要定义太复杂的架构，比如函数互相调用。<br>当然猫猫基本没怎么遵守过。</p>\n<h3 id=\"三元表达式：\"><a href=\"#三元表达式：\" class=\"headerlink\" title=\"三元表达式：\"></a>三元表达式：</h3><p>比如你想要这样一段的功能：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$x</span> == 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> fail</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>你可以这么写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>测试一下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0</span><br><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br><span class=\"line\">x=1</span><br><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>当然，在写脚本时你会遇到很多个这样的判等，我们不妨直接封装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">is_value</span></span>()&#123;</span><br><span class=\"line\">  ([[ <span class=\"variable\">$1</span> == <span class=\"variable\">$2</span> ]]&amp;&amp;<span class=\"built_in\">return</span> 0)||<span class=\"built_in\">return</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(is_value 1 2&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br><span class=\"line\">(is_value 1 1&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>水代码又少了一个理由。<br>等下语法规范呢？<br>遵守是不可能遵守的了。。。</p>\n<h3 id=\"三元表达式-：\"><a href=\"#三元表达式-：\" class=\"headerlink\" title=\"三元表达式+：\"></a>三元表达式+：</h3><p>比如你想要这一段的功能：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$x</span> == 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ <span class=\"variable\">$x</span> == 2 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 2</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> fail</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>你可以写成这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> 1)||([[ <span class=\"variable\">$x</span> == 2 ]]&amp;&amp;<span class=\"built_in\">echo</span> 2)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>看你写的代码的人会感谢你的。</p>\n<h3 id=\"最高端的输出颜色自定义：\"><a href=\"#最高端的输出颜色自定义：\" class=\"headerlink\" title=\"最高端的输出颜色自定义：\"></a>最高端的输出颜色自定义：</h3><p>使用rgb代码定义输出颜色。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\033[1;38;2;R;G;Bm</span><br></pre></td></tr></table></figure>\n<p>比如moe-container里的这行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;38;2;254;228;208mUsage:\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>当然这是C语言。<br>等下这是shell技巧……对吧。 </p>\n<h3 id=\"输出居中：\"><a href=\"#输出居中：\" class=\"headerlink\" title=\"输出居中：\"></a>输出居中：</h3><p>首先你得知道要居中的输出有多长。<br>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(($(($(stty size|awk &#x27;&#123;print <span class=\"variable\">$2</span>&#125;&#x27;)))/2-居中字符长度的一半))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>C内容&quot;</span></span><br></pre></td></tr></table></figure>\n<p>除了花哨点也没啥大用。</p>\n<h3 id=\"输出一行分割线：\"><a href=\"#输出一行分割线：\" class=\"headerlink\" title=\"输出一行分割线：\"></a>输出一行分割线：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(<span class=\"built_in\">yes</span> <span class=\"string\">&quot;=&quot;</span>|sed <span class=\"variable\">$WIDTH</span><span class=\"string\">&#x27;q&#x27;</span>|<span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>当然可以玩的更花哨一点：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">WIDTH=$((WIDTH/<span class=\"number\">2</span>-<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(yes <span class=\"string\">&quot;=&quot;</span>|sed $WIDTH&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>xxxx<span class=\"subst\">$(yes <span class=\"string\">&quot;=&quot;</span>|sed $WIDTH&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>$WIDTH定义参照上一条。<br>或者像termux-container里这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">WIDTH=$((WIDTH-<span class=\"number\">13</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\e[30;48;5;159mCONTAINER_RUN<span class=\"subst\">$(yes <span class=\"string\">&quot; &quot;</span>|sed $WIDTH&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>\\033[0m&quot;</span></span><br></pre></td></tr></table></figure>\n<p>莫名科技感。</p>\n<h3 id=\"sed正则匹配：\"><a href=\"#sed正则匹配：\" class=\"headerlink\" title=\"sed正则匹配：\"></a>sed正则匹配：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 123abc &gt; test</span><br><span class=\"line\">sed -i &quot;s/[0-9]*/数字替换/&quot; test</span><br><span class=\"line\">cat test</span><br></pre></td></tr></table></figure>\n<p>正则表达式具体内容请自行利用搜索引擎。<br>想当年猫猫要是会用，termux-container里的屎山也能少点。</p>\n<h3 id=\"更改光标样式：\"><a href=\"#更改光标样式：\" class=\"headerlink\" title=\"更改光标样式：\"></a>更改光标样式：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;\\e[2 q&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;\\e[6 q&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;\\e[4 q&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>仅在termux验证成功过。</p>\n<h3 id=\"Ctrl-D信号捕获：\"><a href=\"#Ctrl-D信号捕获：\" class=\"headerlink\" title=\"Ctrl+D信号捕获：\"></a>Ctrl+D信号捕获：</h3><p>不是说好EOF不是信号的吗？<br>事实上read可以捕获。<br>read无论读到什么东西加回车都会将结果记录并正常退出。<br>但是，读到EOF却未换行会返回1。<br>可以read后用$?的值是否为0来作为条件进行捕获。<br>当然read逐字读取时不适用，但是我们还有方法专门针对逐字读取：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> :; <span class=\"keyword\">do</span> <span class=\"built_in\">read</span> -N 1 key&amp;&amp;<span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;key&#125;</span> == $(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\004&quot;</span>) ]];<span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> CTRL-D;<span class=\"keyword\">fi</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>似乎挺没用的。<br>(termux-container将会利用这一特性)</p>\n<h3 id=\"网易云歌曲名称格式化：\"><a href=\"#网易云歌曲名称格式化：\" class=\"headerlink\" title=\"网易云歌曲名称格式化：\"></a>网易云歌曲名称格式化：</h3><p>网易云默认下载的音乐命名格式是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Akie秋绘 - なんでもないや 没什么大不了的（翻自 Radwimps）.mp3</span><br><span class=\"line\">ENE - パズル.mp3</span><br><span class=\"line\">Hanser - 勾指起誓.mp3</span><br><span class=\"line\">のぶなが - 深海少女.mp3</span><br><span class=\"line\">南杉 - 樱花樱花想见你.mp3</span><br><span class=\"line\">鹿乃 - 小夜子.mp3</span><br><span class=\"line\">鹿乃 - 心拍数#0822.mp3</span><br><span class=\"line\">鹿乃 - 桜のような恋でした.mp3</span><br></pre></td></tr></table></figure>\n<p>(浓度过纯)<br>咱们可以这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> *.mp3|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> music</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">artist=<span class=\"variable\">$&#123;music%% -*&#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;music##*-\\ &#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;name%%.mp3&#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;name%%&quot;（&quot;*&#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;name%%&quot;(&quot;*&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> <span class=\"string\">&quot;<span class=\"variable\">$music</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$name</span>-[<span class=\"variable\">$artist</span>].mp3&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>于是文件名就成了这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">なんでもないや 没什么大不了的-[Akie秋绘].mp3</span><br><span class=\"line\">パズル-[ENE].mp3</span><br><span class=\"line\">勾指起誓-[Hanser].mp3</span><br><span class=\"line\">深海少女-[のぶなが].mp3</span><br><span class=\"line\">樱花樱花想见你-[南杉].mp3</span><br><span class=\"line\">小夜子-[鹿乃].mp3</span><br><span class=\"line\">心拍数#0822-[鹿乃].mp3</span><br><span class=\"line\">桜のような恋でした-[鹿乃].mp3</span><br></pre></td></tr></table></figure>\n<p>个人感觉好看多了。</p>\n<h3 id=\"用Shell写代码：\"><a href=\"#用Shell写代码：\" class=\"headerlink\" title=\"用Shell写代码：\"></a>用Shell写代码：</h3><p>(怕是人家shell自己写的代码都比你规范)<br>moe-container里有这样一段头文件：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_ADMIN 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_MODULE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_RAWIO 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_PACCT 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_NICE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_RESOURCE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_TTY_CONFIG 1</span></span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure>\n<p>可以看到#define DROP_和后面的1都是重复的<br>于是我们可以单独写一个caplist文件来记录那些不同的部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAP_SYS_ADMIN</span><br><span class=\"line\">CAP_SYS_MODULE</span><br><span class=\"line\">CAP_SYS_RAWIO</span><br><span class=\"line\">CAP_SYS_PACCT</span><br><span class=\"line\">CAP_SYS_NICE</span><br><span class=\"line\">CAP_SYS_RESOURCE</span><br><span class=\"line\">CAP_SYS_TTY_CONFIG</span><br></pre></td></tr></table></figure>\n<p>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> caplist|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> <span class=\"built_in\">cap</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;#define DROP_<span class=\"variable\">$&#123;cap&#125;</span> 1&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>事实上这一段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span>(DROP_CAP_SYS_ADMIN == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      cap_drop_bound(CAP_SYS_ADMIN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(DROP_CAP_SYS_MODULE == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      cap_drop_bound(CAP_SYS_MODULE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(DROP_CAP_SYS_RAWIO == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      cap_drop_bound(CAP_SYS_RAWIO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure>\n<p>是这么生成的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> caplist|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> <span class=\"built_in\">cap</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;    if(DROP_<span class=\"variable\">$cap</span>==1)&#123;\\n      cap_drop_bound(<span class=\"variable\">$cap</span>);\\n    &#125;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>非常规范，非常工整。<br>C语言实现了shell，shell可以生成简单重复的C语言代码，双向奔赴，非常美好。</p>\n<h3 id=\"萌新代码生成：\"><a href=\"#萌新代码生成：\" class=\"headerlink\" title=\"萌新代码生成：\"></a>萌新代码生成：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">x</span></span>()&#123;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;number=input(\\&quot;请输入一个数字:\\&quot;)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;if number == 0:\\n    print(\\&quot;0是一个偶数\\&quot;)&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..114514&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">[[ $((<span class=\"variable\">$i</span>%<span class=\"number\">2</span>)) == 0 ]]&amp;&amp;<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;elif number == <span class=\"variable\">$i</span>:\\n    print(\\&quot;<span class=\"variable\">$i</span>是一个偶数\\&quot;)&quot;</span>||<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;elif number == <span class=\"variable\">$i</span>:\\n    print(\\&quot;<span class=\"variable\">$i</span>是一个奇数\\&quot;)&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;else:\\n    print(\\&quot;数太大了我还不会\\&quot;)&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">x &gt; 1.py</span><br></pre></td></tr></table></figure>\n<p>逝python，但是运行会直接内存错误。</p>\n<h2 id=\"生草部分：\"><a href=\"#生草部分：\" class=\"headerlink\" title=\"生草部分：\"></a>生草部分：</h2><h3 id=\"变量当函数-x2F-命令名执行：\"><a href=\"#变量当函数-x2F-命令名执行：\" class=\"headerlink\" title=\"变量当函数&#x2F;命令名执行：\"></a>变量当函数&#x2F;命令名执行：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">test</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"variable\">$1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n<p>不做类型检查你就可以为所欲为了是吧。</p>\n<h3 id=\"忽略Ctrl-C：\"><a href=\"#忽略Ctrl-C：\" class=\"headerlink\" title=\"忽略Ctrl+C：\"></a>忽略Ctrl+C：</h3><p>用户别想用Ctrl+C杀死你的进程(大草)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;&quot;</span> SIGINT</span><br></pre></td></tr></table></figure>\n<h3 id=\"用shell实现一个shell：\"><a href=\"#用shell实现一个shell：\" class=\"headerlink\" title=\"用shell实现一个shell：\"></a>用shell实现一个shell：</h3><p>一个shell要有：</p>\n<ul>\n<li>指令解析</li>\n<li>不能被ctrl-c杀死</li>\n<li>ctrl-d后会退出</li>\n<li>上下键显示命令历史记录</li>\n<li>命令历史记录可编辑</li>\n</ul>\n<p>没问题，都安排上。<br>(代码部分判断依赖于hexdump)<br>SHELL_CONSOLE()函数建议照抄，原本是以Apache2协议开源的，不过猫猫也不介意用MIT协议在这里重复开源一遍：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">SHELL_CONSOLE</span></span>()&#123;</span><br><span class=\"line\">  HISTORY=0</span><br><span class=\"line\">  COMMAND=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> :</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    HISTORY_LINES=$(awk <span class=\"string\">&#x27;END&#123;print NR&#125;&#x27;</span> <span class=\"variable\">$HOME</span>/.shell_history)</span><br><span class=\"line\">    HISTORY_LINES=$(( <span class=\"variable\">$&#123;HISTORY_LINES&#125;</span>-<span class=\"number\">1</span>))</span><br><span class=\"line\">    SIZE=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;printf $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">stty</span> erase <span class=\"string\">&#x27;^?&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;COLOR&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[?25l&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\r&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[1G<span class=\"subst\">$(yes <span class=\"string\">&quot; &quot;</span>|sed $SIZE&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[1GConsole &gt; <span class=\"variable\">$&#123;COMMAND&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[?25h&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -s -N1 COMMAND0</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;COMMAND0&#125;</span> == $(<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\004&quot;</span>) ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\n\\nExit.\\033[0m&quot;</span>&amp;&amp;<span class=\"built_in\">exit</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;COMMAND0&#125;</span>|hexdump|<span class=\"built_in\">head</span> -n1|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>) == <span class=\"string\">&quot;000a&quot;</span> ]]&amp;&amp;[[ <span class=\"variable\">$&#123;COMMAND0&#125;</span> != <span class=\"string\">&quot; &quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span></span><br><span class=\"line\">      SHELL_CONSOLE_MAIN <span class=\"variable\">$&#123;COMMAND&#125;</span></span><br><span class=\"line\">      COMMAND=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;COMMAND0&#125;</span>|hexdump|<span class=\"built_in\">head</span> -n1|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>) == <span class=\"string\">&quot;0a7f&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      COMMAND=<span class=\"variable\">$&#123;COMMAND%?&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;COMMAND0&#125;</span>|hexdump|<span class=\"built_in\">head</span> -n1|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>) == <span class=\"string\">&quot;0a08&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      COMMAND=<span class=\"variable\">$&#123;COMMAND%?&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ <span class=\"variable\">$&#123;COMMAND0&#125;</span> == $(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033&quot;</span>) ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -s -N 2 COMMAND1</span><br><span class=\"line\">      <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;COMMAND1&#125;</span> == <span class=\"string\">&quot;[A&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"variable\">$HISTORY</span> &lt;= <span class=\"variable\">$&#123;HISTORY_LINES&#125;</span>));<span class=\"keyword\">then</span></span><br><span class=\"line\">          HISTORY=$((<span class=\"variable\">$HISTORY</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        COMMAND=$(<span class=\"built_in\">cat</span> <span class=\"variable\">$HOME</span>/.shell_history|<span class=\"built_in\">tail</span> -<span class=\"variable\">$&#123;HISTORY&#125;</span>|<span class=\"built_in\">head</span> -n1)</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">      <span class=\"keyword\">elif</span> [[ <span class=\"variable\">$&#123;COMMAND1&#125;</span> == <span class=\"string\">&quot;[B&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"variable\">$HISTORY</span> &gt;= <span class=\"number\">2</span>));<span class=\"keyword\">then</span></span><br><span class=\"line\">          HISTORY=$((<span class=\"variable\">$HISTORY</span>-<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        COMMAND=$(<span class=\"built_in\">cat</span> <span class=\"variable\">$HOME</span>/.shell_history|<span class=\"built_in\">tail</span> -<span class=\"variable\">$&#123;HISTORY&#125;</span>|<span class=\"built_in\">head</span> -n1)</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      COMMAND+=<span class=\"variable\">$&#123;COMMAND0&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码是优化过的，原来那段简直是黑历史喵！！！<br>作用是获取命令并传递给SHELL_CONSOLE_MAIN函数进行解析。<br>于是你只需要自己写一个SHELL_CONSOLE_MAIN函数，大概长这样(从termux-container v9复制过来的)：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">SHELL_CONSOLE_MAIN</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ <span class=\"variable\">$1</span> != <span class=\"string\">&quot;&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$@</span> &gt;&gt; <span class=\"variable\">$HOME</span>/.shell_history</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"string\">&quot;help&quot;</span>) SHOW_HELPS;;</span><br><span class=\"line\">    <span class=\"string\">&quot;search&quot;</span>) SEARCH_IMAGES <span class=\"variable\">$2</span> <span class=\"variable\">$3</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;login&quot;</span>) RUN_CONTAINER <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;pull&quot;</span>) PULL_ROOTFS <span class=\"variable\">$2</span> <span class=\"variable\">$3</span> <span class=\"variable\">$4</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;import&quot;</span>) IMPORT_ROOTFS <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;export&quot;</span>) EXPORT_CONTAINER <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;new&quot;</span>) CONTAINER_NEW;;</span><br><span class=\"line\">    <span class=\"string\">&quot;ls&quot;</span>) LIST;;</span><br><span class=\"line\">    <span class=\"string\">&quot;exit&quot;</span>) <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\nExit.\\033[0m&quot;</span>&amp;&amp;<span class=\"built_in\">exit</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;rm&quot;</span>) REMOVE_CONTAINER <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;cp&quot;</span>) CONTAINER_CP <span class=\"variable\">$2</span> <span class=\"variable\">$3</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;</span>) <span class=\"built_in\">return</span>;;</span><br><span class=\"line\">    *) <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[31mError: Unknow command \\`<span class=\"variable\">$@</span>\\`,type \\`help\\` to show helps.\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后在这段shell的头部加上：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;echo&amp;&amp;SHELL_CONSOLE&quot;</span> SIGINT</span><br><span class=\"line\">RGB=<span class=\"string\">&quot;254;228;208&quot;</span></span><br><span class=\"line\">COLOR=<span class=\"string\">&quot;\\033[1;38;2;<span class=\"variable\">$&#123;RGB&#125;</span>m&quot;</span></span><br></pre></td></tr></table></figure>\n<p>第一行可以确保shell不被杀死，每次收到ctrl-c信号都会终止当前命令并跳转到SHELL_CONSOLE。<br>二三行是shell输出颜色的定义，为rgb十进制值。<br>在尾部调用一下SHELL_CONSOLE函数，就完了。</p>\n<h3 id=\"仿windows安装界面用户许可：\"><a href=\"#仿windows安装界面用户许可：\" class=\"headerlink\" title=\"仿windows安装界面用户许可：\"></a>仿windows安装界面用户许可：</h3><p>没啥好说的，直接上代码就是了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;printf &#x27;\\033[?25h&#x27;&amp;&amp;exit&quot;</span> SIGINT</span><br><span class=\"line\">RGB=<span class=\"string\">&quot;254;228;208&quot;</span></span><br><span class=\"line\">COLOR=<span class=\"string\">&quot;\\033[1;38;2;<span class=\"variable\">$&#123;RGB&#125;</span>m&quot;</span></span><br><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">HEIGHT=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>-<span class=\"number\">4</span>))</span><br><span class=\"line\">clear</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;COLOR&#125;</span>\\033[?25l╔<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-2)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╗&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;║ \\033[1;31m○ \\033[1;33m○ \\033[1;32m○<span class=\"variable\">$&#123;COLOR&#125;</span>\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[?25l║<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-2)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)║&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;║  TERMUX-CONTAINER\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\">i=2</span><br><span class=\"line\"><span class=\"keyword\">while</span> (( <span class=\"variable\">$i</span>&lt;=<span class=\"variable\">$HEIGHT</span> ));<span class=\"keyword\">do</span></span><br><span class=\"line\">i=$((<span class=\"variable\">$i</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"subst\">$(($HEIGHT+4)</span>);1H╚<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-2)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╝&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"subst\">$(($HEIGHT)</span>);4H╚<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-8)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╝&quot;</span></span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>-<span class=\"number\">5</span>))</span><br><span class=\"line\">WIDTH_=$((<span class=\"variable\">$WIDTH</span>+<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[10;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;114;114;114;38;2;0;0;0m/\\\\ \\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>\\033[<span class=\"variable\">$&#123;WIDTH_&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[11;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;66;66;66m  \\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>║\\n&quot;</span></span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>+<span class=\"number\">5</span>))</span><br><span class=\"line\">i=11</span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>-<span class=\"number\">3</span>))</span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>-<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"keyword\">while</span> (( <span class=\"variable\">$i</span>&lt;=<span class=\"variable\">$HEIGHT</span> ));<span class=\"keyword\">do</span></span><br><span class=\"line\">i=$((<span class=\"variable\">$i</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;i&#125;</span>;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;114;114;114m  \\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>║\\n&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">i=$((<span class=\"variable\">$i</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;i&#125;</span>;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;114;114;114;38;2;0;0;0m\\\\/\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>║\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[9;4H╔<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-3)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╗&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[7;5H适用的声明和许可条款&quot;</span></span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>-<span class=\"number\">26</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[10;<span class=\"variable\">$&#123;WIDTH&#125;</span>H最后更新日期：2022年12月&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[11;7Htermux-container许可条款:&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[13;7H本程序以Apache2.0协议授权。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[14;7H参见：\\033[4mhttp://www.apache.org/licenses/\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[15;7H您至少需要了解以下几点：&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[17;7H  ● 本程序\\`无担保\\`。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[18;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`损失，作者概不负责。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[19;7H  ● 您应当在遵守当地法律规定的前提下使用本程序。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[20;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`法律责任，作者概不负责。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[21;7H  ● 本程序作者保留其著作权，严禁在不遵循其许可的情况下二次分发。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;HEIGHT&#125;</span>;7H Copyright 2022 Moe-hacker&quot;</span></span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>+<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;HEIGHT&#125;</span>;7H \\033[1;32m[✓]\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span> 我已阅读并接受许可条款 ， 按回车键同意&quot;</span></span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>+<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;HEIGHT&#125;</span>;1H&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">read</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[?25h\\033[0m&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"variable\">$PREFIX</span>/share/termux-container/licenses.allowed</span><br><span class=\"line\">clear</span><br></pre></td></tr></table></figure>\n<p>运行效果自行测试。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover_type":"img","excerpt":"","more":"<p>欢迎来到猫猫的Shell实验室喵！<br>跟着沨鸾学shell，学到最后只会喵喵喵。<br>文章非入门教程，不要妄想本猫亲自教你基础知识，哼！<br>生草部分也会包含有一些花式操作。<br>本文不定期更新。 </p>\n<h2 id=\"正经部分：\"><a href=\"#正经部分：\" class=\"headerlink\" title=\"正经部分：\"></a>正经部分：</h2><h3 id=\"语法规范：\"><a href=\"#语法规范：\" class=\"headerlink\" title=\"语法规范：\"></a>语法规范：</h3><p>变量要加{}括起来。<br>函数最好加个function关键字。<br>头部一定要有释伴(shebang)。<br>记得写注释，要不然也就上帝能看懂你写的什么了。<br>退出时要有返回状态。<br>能用[[]]就别用[]。<br>尽量用printf代替echo使用以提供更好的兼容性。<br>没用的输出记得丢弃。<br>&gt; &#x2F;dev&#x2F;null丢不掉就2&gt;&amp;1 &gt; &#x2F;dev&#x2F;null。<br>不要定义太复杂的架构，比如函数互相调用。<br>当然猫猫基本没怎么遵守过。</p>\n<h3 id=\"三元表达式：\"><a href=\"#三元表达式：\" class=\"headerlink\" title=\"三元表达式：\"></a>三元表达式：</h3><p>比如你想要这样一段的功能：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$x</span> == 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> fail</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>你可以这么写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>测试一下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0</span><br><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br><span class=\"line\">x=1</span><br><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>当然，在写脚本时你会遇到很多个这样的判等，我们不妨直接封装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">is_value</span></span>()&#123;</span><br><span class=\"line\">  ([[ <span class=\"variable\">$1</span> == <span class=\"variable\">$2</span> ]]&amp;&amp;<span class=\"built_in\">return</span> 0)||<span class=\"built_in\">return</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(is_value 1 2&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br><span class=\"line\">(is_value 1 1&amp;&amp;<span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>水代码又少了一个理由。<br>等下语法规范呢？<br>遵守是不可能遵守的了。。。</p>\n<h3 id=\"三元表达式-：\"><a href=\"#三元表达式-：\" class=\"headerlink\" title=\"三元表达式+：\"></a>三元表达式+：</h3><p>比如你想要这一段的功能：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$x</span> == 1 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ <span class=\"variable\">$x</span> == 2 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 2</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> fail</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>你可以写成这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([[ <span class=\"variable\">$x</span> == 1 ]]&amp;&amp;<span class=\"built_in\">echo</span> 1)||([[ <span class=\"variable\">$x</span> == 2 ]]&amp;&amp;<span class=\"built_in\">echo</span> 2)||<span class=\"built_in\">echo</span> fail</span><br></pre></td></tr></table></figure>\n<p>看你写的代码的人会感谢你的。</p>\n<h3 id=\"最高端的输出颜色自定义：\"><a href=\"#最高端的输出颜色自定义：\" class=\"headerlink\" title=\"最高端的输出颜色自定义：\"></a>最高端的输出颜色自定义：</h3><p>使用rgb代码定义输出颜色。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\033[1;38;2;R;G;Bm</span><br></pre></td></tr></table></figure>\n<p>比如moe-container里的这行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\033[1;38;2;254;228;208mUsage:\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>当然这是C语言。<br>等下这是shell技巧……对吧。 </p>\n<h3 id=\"输出居中：\"><a href=\"#输出居中：\" class=\"headerlink\" title=\"输出居中：\"></a>输出居中：</h3><p>首先你得知道要居中的输出有多长。<br>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(($(($(stty size|awk &#x27;&#123;print <span class=\"variable\">$2</span>&#125;&#x27;)))/2-居中字符长度的一半))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>C内容&quot;</span></span><br></pre></td></tr></table></figure>\n<p>除了花哨点也没啥大用。</p>\n<h3 id=\"输出一行分割线：\"><a href=\"#输出一行分割线：\" class=\"headerlink\" title=\"输出一行分割线：\"></a>输出一行分割线：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(<span class=\"built_in\">yes</span> <span class=\"string\">&quot;=&quot;</span>|sed <span class=\"variable\">$WIDTH</span><span class=\"string\">&#x27;q&#x27;</span>|<span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>当然可以玩的更花哨一点：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">WIDTH=$((WIDTH/<span class=\"number\">2</span>-<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(yes <span class=\"string\">&quot;=&quot;</span>|sed $WIDTH&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>xxxx<span class=\"subst\">$(yes <span class=\"string\">&quot;=&quot;</span>|sed $WIDTH&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>$WIDTH定义参照上一条。<br>或者像termux-container里这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">WIDTH=$((WIDTH-<span class=\"number\">13</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\e[30;48;5;159mCONTAINER_RUN<span class=\"subst\">$(yes <span class=\"string\">&quot; &quot;</span>|sed $WIDTH&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>\\033[0m&quot;</span></span><br></pre></td></tr></table></figure>\n<p>莫名科技感。</p>\n<h3 id=\"sed正则匹配：\"><a href=\"#sed正则匹配：\" class=\"headerlink\" title=\"sed正则匹配：\"></a>sed正则匹配：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 123abc &gt; test</span><br><span class=\"line\">sed -i &quot;s/[0-9]*/数字替换/&quot; test</span><br><span class=\"line\">cat test</span><br></pre></td></tr></table></figure>\n<p>正则表达式具体内容请自行利用搜索引擎。<br>想当年猫猫要是会用，termux-container里的屎山也能少点。</p>\n<h3 id=\"更改光标样式：\"><a href=\"#更改光标样式：\" class=\"headerlink\" title=\"更改光标样式：\"></a>更改光标样式：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;\\e[2 q&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;\\e[6 q&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&#x27;\\e[4 q&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>仅在termux验证成功过。</p>\n<h3 id=\"Ctrl-D信号捕获：\"><a href=\"#Ctrl-D信号捕获：\" class=\"headerlink\" title=\"Ctrl+D信号捕获：\"></a>Ctrl+D信号捕获：</h3><p>不是说好EOF不是信号的吗？<br>事实上read可以捕获。<br>read无论读到什么东西加回车都会将结果记录并正常退出。<br>但是，读到EOF却未换行会返回1。<br>可以read后用$?的值是否为0来作为条件进行捕获。<br>当然read逐字读取时不适用，但是我们还有方法专门针对逐字读取：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> :; <span class=\"keyword\">do</span> <span class=\"built_in\">read</span> -N 1 key&amp;&amp;<span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;key&#125;</span> == $(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\004&quot;</span>) ]];<span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> CTRL-D;<span class=\"keyword\">fi</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>似乎挺没用的。<br>(termux-container将会利用这一特性)</p>\n<h3 id=\"网易云歌曲名称格式化：\"><a href=\"#网易云歌曲名称格式化：\" class=\"headerlink\" title=\"网易云歌曲名称格式化：\"></a>网易云歌曲名称格式化：</h3><p>网易云默认下载的音乐命名格式是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Akie秋绘 - なんでもないや 没什么大不了的（翻自 Radwimps）.mp3</span><br><span class=\"line\">ENE - パズル.mp3</span><br><span class=\"line\">Hanser - 勾指起誓.mp3</span><br><span class=\"line\">のぶなが - 深海少女.mp3</span><br><span class=\"line\">南杉 - 樱花樱花想见你.mp3</span><br><span class=\"line\">鹿乃 - 小夜子.mp3</span><br><span class=\"line\">鹿乃 - 心拍数#0822.mp3</span><br><span class=\"line\">鹿乃 - 桜のような恋でした.mp3</span><br></pre></td></tr></table></figure>\n<p>(浓度过纯)<br>咱们可以这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> *.mp3|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> music</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">artist=<span class=\"variable\">$&#123;music%% -*&#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;music##*-\\ &#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;name%%.mp3&#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;name%%&quot;（&quot;*&#125;</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;name%%&quot;(&quot;*&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> <span class=\"string\">&quot;<span class=\"variable\">$music</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$name</span>-[<span class=\"variable\">$artist</span>].mp3&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>于是文件名就成了这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">なんでもないや 没什么大不了的-[Akie秋绘].mp3</span><br><span class=\"line\">パズル-[ENE].mp3</span><br><span class=\"line\">勾指起誓-[Hanser].mp3</span><br><span class=\"line\">深海少女-[のぶなが].mp3</span><br><span class=\"line\">樱花樱花想见你-[南杉].mp3</span><br><span class=\"line\">小夜子-[鹿乃].mp3</span><br><span class=\"line\">心拍数#0822-[鹿乃].mp3</span><br><span class=\"line\">桜のような恋でした-[鹿乃].mp3</span><br></pre></td></tr></table></figure>\n<p>个人感觉好看多了。</p>\n<h3 id=\"用Shell写代码：\"><a href=\"#用Shell写代码：\" class=\"headerlink\" title=\"用Shell写代码：\"></a>用Shell写代码：</h3><p>(怕是人家shell自己写的代码都比你规范)<br>moe-container里有这样一段头文件：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_ADMIN 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_MODULE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_RAWIO 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_PACCT 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_NICE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_RESOURCE 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DROP_CAP_SYS_TTY_CONFIG 1</span></span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure>\n<p>可以看到#define DROP_和后面的1都是重复的<br>于是我们可以单独写一个caplist文件来记录那些不同的部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CAP_SYS_ADMIN</span><br><span class=\"line\">CAP_SYS_MODULE</span><br><span class=\"line\">CAP_SYS_RAWIO</span><br><span class=\"line\">CAP_SYS_PACCT</span><br><span class=\"line\">CAP_SYS_NICE</span><br><span class=\"line\">CAP_SYS_RESOURCE</span><br><span class=\"line\">CAP_SYS_TTY_CONFIG</span><br></pre></td></tr></table></figure>\n<p>然后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> caplist|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> <span class=\"built_in\">cap</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;#define DROP_<span class=\"variable\">$&#123;cap&#125;</span> 1&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>事实上这一段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span>(DROP_CAP_SYS_ADMIN == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      cap_drop_bound(CAP_SYS_ADMIN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(DROP_CAP_SYS_MODULE == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      cap_drop_bound(CAP_SYS_MODULE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(DROP_CAP_SYS_RAWIO == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      cap_drop_bound(CAP_SYS_RAWIO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure>\n<p>是这么生成的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> caplist|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> <span class=\"built_in\">cap</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;    if(DROP_<span class=\"variable\">$cap</span>==1)&#123;\\n      cap_drop_bound(<span class=\"variable\">$cap</span>);\\n    &#125;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>非常规范，非常工整。<br>C语言实现了shell，shell可以生成简单重复的C语言代码，双向奔赴，非常美好。</p>\n<h3 id=\"萌新代码生成：\"><a href=\"#萌新代码生成：\" class=\"headerlink\" title=\"萌新代码生成：\"></a>萌新代码生成：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">x</span></span>()&#123;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;number=input(\\&quot;请输入一个数字:\\&quot;)&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;if number == 0:\\n    print(\\&quot;0是一个偶数\\&quot;)&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..114514&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">[[ $((<span class=\"variable\">$i</span>%<span class=\"number\">2</span>)) == 0 ]]&amp;&amp;<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;elif number == <span class=\"variable\">$i</span>:\\n    print(\\&quot;<span class=\"variable\">$i</span>是一个偶数\\&quot;)&quot;</span>||<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;elif number == <span class=\"variable\">$i</span>:\\n    print(\\&quot;<span class=\"variable\">$i</span>是一个奇数\\&quot;)&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;else:\\n    print(\\&quot;数太大了我还不会\\&quot;)&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">x &gt; 1.py</span><br></pre></td></tr></table></figure>\n<p>逝python，但是运行会直接内存错误。</p>\n<h2 id=\"生草部分：\"><a href=\"#生草部分：\" class=\"headerlink\" title=\"生草部分：\"></a>生草部分：</h2><h3 id=\"变量当函数-x2F-命令名执行：\"><a href=\"#变量当函数-x2F-命令名执行：\" class=\"headerlink\" title=\"变量当函数&#x2F;命令名执行：\"></a>变量当函数&#x2F;命令名执行：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">test</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"variable\">$1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">test</span> <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n<p>不做类型检查你就可以为所欲为了是吧。</p>\n<h3 id=\"忽略Ctrl-C：\"><a href=\"#忽略Ctrl-C：\" class=\"headerlink\" title=\"忽略Ctrl+C：\"></a>忽略Ctrl+C：</h3><p>用户别想用Ctrl+C杀死你的进程(大草)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;&quot;</span> SIGINT</span><br></pre></td></tr></table></figure>\n<h3 id=\"用shell实现一个shell：\"><a href=\"#用shell实现一个shell：\" class=\"headerlink\" title=\"用shell实现一个shell：\"></a>用shell实现一个shell：</h3><p>一个shell要有：</p>\n<ul>\n<li>指令解析</li>\n<li>不能被ctrl-c杀死</li>\n<li>ctrl-d后会退出</li>\n<li>上下键显示命令历史记录</li>\n<li>命令历史记录可编辑</li>\n</ul>\n<p>没问题，都安排上。<br>(代码部分判断依赖于hexdump)<br>SHELL_CONSOLE()函数建议照抄，原本是以Apache2协议开源的，不过猫猫也不介意用MIT协议在这里重复开源一遍：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">SHELL_CONSOLE</span></span>()&#123;</span><br><span class=\"line\">  HISTORY=0</span><br><span class=\"line\">  COMMAND=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> :</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    HISTORY_LINES=$(awk <span class=\"string\">&#x27;END&#123;print NR&#125;&#x27;</span> <span class=\"variable\">$HOME</span>/.shell_history)</span><br><span class=\"line\">    HISTORY_LINES=$(( <span class=\"variable\">$&#123;HISTORY_LINES&#125;</span>-<span class=\"number\">1</span>))</span><br><span class=\"line\">    SIZE=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;printf $2&#125;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">stty</span> erase <span class=\"string\">&#x27;^?&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;COLOR&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[?25l&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\r&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[1G<span class=\"subst\">$(yes <span class=\"string\">&quot; &quot;</span>|sed $SIZE&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[1GConsole &gt; <span class=\"variable\">$&#123;COMMAND&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[?25h&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -s -N1 COMMAND0</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;COMMAND0&#125;</span> == $(<span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\004&quot;</span>) ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\n\\nExit.\\033[0m&quot;</span>&amp;&amp;<span class=\"built_in\">exit</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;COMMAND0&#125;</span>|hexdump|<span class=\"built_in\">head</span> -n1|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>) == <span class=\"string\">&quot;000a&quot;</span> ]]&amp;&amp;[[ <span class=\"variable\">$&#123;COMMAND0&#125;</span> != <span class=\"string\">&quot; &quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span></span><br><span class=\"line\">      SHELL_CONSOLE_MAIN <span class=\"variable\">$&#123;COMMAND&#125;</span></span><br><span class=\"line\">      COMMAND=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;COMMAND0&#125;</span>|hexdump|<span class=\"built_in\">head</span> -n1|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>) == <span class=\"string\">&quot;0a7f&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      COMMAND=<span class=\"variable\">$&#123;COMMAND%?&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ $(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;COMMAND0&#125;</span>|hexdump|<span class=\"built_in\">head</span> -n1|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>) == <span class=\"string\">&quot;0a08&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      COMMAND=<span class=\"variable\">$&#123;COMMAND%?&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [[ <span class=\"variable\">$&#123;COMMAND0&#125;</span> == $(<span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033&quot;</span>) ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -s -N 2 COMMAND1</span><br><span class=\"line\">      <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;COMMAND1&#125;</span> == <span class=\"string\">&quot;[A&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"variable\">$HISTORY</span> &lt;= <span class=\"variable\">$&#123;HISTORY_LINES&#125;</span>));<span class=\"keyword\">then</span></span><br><span class=\"line\">          HISTORY=$((<span class=\"variable\">$HISTORY</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        COMMAND=$(<span class=\"built_in\">cat</span> <span class=\"variable\">$HOME</span>/.shell_history|<span class=\"built_in\">tail</span> -<span class=\"variable\">$&#123;HISTORY&#125;</span>|<span class=\"built_in\">head</span> -n1)</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">      <span class=\"keyword\">elif</span> [[ <span class=\"variable\">$&#123;COMMAND1&#125;</span> == <span class=\"string\">&quot;[B&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"variable\">$HISTORY</span> &gt;= <span class=\"number\">2</span>));<span class=\"keyword\">then</span></span><br><span class=\"line\">          HISTORY=$((<span class=\"variable\">$HISTORY</span>-<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        COMMAND=$(<span class=\"built_in\">cat</span> <span class=\"variable\">$HOME</span>/.shell_history|<span class=\"built_in\">tail</span> -<span class=\"variable\">$&#123;HISTORY&#125;</span>|<span class=\"built_in\">head</span> -n1)</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      COMMAND+=<span class=\"variable\">$&#123;COMMAND0&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码是优化过的，原来那段简直是黑历史喵！！！<br>作用是获取命令并传递给SHELL_CONSOLE_MAIN函数进行解析。<br>于是你只需要自己写一个SHELL_CONSOLE_MAIN函数，大概长这样(从termux-container v9复制过来的)：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">SHELL_CONSOLE_MAIN</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ <span class=\"variable\">$1</span> != <span class=\"string\">&quot;&quot;</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$@</span> &gt;&gt; <span class=\"variable\">$HOME</span>/.shell_history</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"string\">&quot;help&quot;</span>) SHOW_HELPS;;</span><br><span class=\"line\">    <span class=\"string\">&quot;search&quot;</span>) SEARCH_IMAGES <span class=\"variable\">$2</span> <span class=\"variable\">$3</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;login&quot;</span>) RUN_CONTAINER <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;pull&quot;</span>) PULL_ROOTFS <span class=\"variable\">$2</span> <span class=\"variable\">$3</span> <span class=\"variable\">$4</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;import&quot;</span>) IMPORT_ROOTFS <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;export&quot;</span>) EXPORT_CONTAINER <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;new&quot;</span>) CONTAINER_NEW;;</span><br><span class=\"line\">    <span class=\"string\">&quot;ls&quot;</span>) LIST;;</span><br><span class=\"line\">    <span class=\"string\">&quot;exit&quot;</span>) <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\nExit.\\033[0m&quot;</span>&amp;&amp;<span class=\"built_in\">exit</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;rm&quot;</span>) REMOVE_CONTAINER <span class=\"variable\">$2</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;cp&quot;</span>) CONTAINER_CP <span class=\"variable\">$2</span> <span class=\"variable\">$3</span>;;</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;</span>) <span class=\"built_in\">return</span>;;</span><br><span class=\"line\">    *) <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[31mError: Unknow command \\`<span class=\"variable\">$@</span>\\`,type \\`help\\` to show helps.\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后在这段shell的头部加上：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;echo&amp;&amp;SHELL_CONSOLE&quot;</span> SIGINT</span><br><span class=\"line\">RGB=<span class=\"string\">&quot;254;228;208&quot;</span></span><br><span class=\"line\">COLOR=<span class=\"string\">&quot;\\033[1;38;2;<span class=\"variable\">$&#123;RGB&#125;</span>m&quot;</span></span><br></pre></td></tr></table></figure>\n<p>第一行可以确保shell不被杀死，每次收到ctrl-c信号都会终止当前命令并跳转到SHELL_CONSOLE。<br>二三行是shell输出颜色的定义，为rgb十进制值。<br>在尾部调用一下SHELL_CONSOLE函数，就完了。</p>\n<h3 id=\"仿windows安装界面用户许可：\"><a href=\"#仿windows安装界面用户许可：\" class=\"headerlink\" title=\"仿windows安装界面用户许可：\"></a>仿windows安装界面用户许可：</h3><p>没啥好说的，直接上代码就是了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;printf &#x27;\\033[?25h&#x27;&amp;&amp;exit&quot;</span> SIGINT</span><br><span class=\"line\">RGB=<span class=\"string\">&quot;254;228;208&quot;</span></span><br><span class=\"line\">COLOR=<span class=\"string\">&quot;\\033[1;38;2;<span class=\"variable\">$&#123;RGB&#125;</span>m&quot;</span></span><br><span class=\"line\">WIDTH=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\">HEIGHT=$(<span class=\"built_in\">stty</span> size|awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>-<span class=\"number\">4</span>))</span><br><span class=\"line\">clear</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;COLOR&#125;</span>\\033[?25l╔<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-2)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╗&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;║ \\033[1;31m○ \\033[1;33m○ \\033[1;32m○<span class=\"variable\">$&#123;COLOR&#125;</span>\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[?25l║<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-2)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)║&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;║  TERMUX-CONTAINER\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\">i=2</span><br><span class=\"line\"><span class=\"keyword\">while</span> (( <span class=\"variable\">$i</span>&lt;=<span class=\"variable\">$HEIGHT</span> ));<span class=\"keyword\">do</span></span><br><span class=\"line\">i=$((<span class=\"variable\">$i</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"subst\">$(($HEIGHT+4)</span>);1H╚<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-2)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╝&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"subst\">$(($HEIGHT)</span>);4H╚<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-8)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╝&quot;</span></span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>-<span class=\"number\">5</span>))</span><br><span class=\"line\">WIDTH_=$((<span class=\"variable\">$WIDTH</span>+<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[10;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;114;114;114;38;2;0;0;0m/\\\\ \\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>\\033[<span class=\"variable\">$&#123;WIDTH_&#125;</span>G║\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[11;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;66;66;66m  \\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>║\\n&quot;</span></span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>+<span class=\"number\">5</span>))</span><br><span class=\"line\">i=11</span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>-<span class=\"number\">3</span>))</span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>-<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"keyword\">while</span> (( <span class=\"variable\">$i</span>&lt;=<span class=\"variable\">$HEIGHT</span> ));<span class=\"keyword\">do</span></span><br><span class=\"line\">i=$((<span class=\"variable\">$i</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;i&#125;</span>;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;114;114;114m  \\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>║\\n&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">i=$((<span class=\"variable\">$i</span>+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;i&#125;</span>;4H║\\033[<span class=\"variable\">$&#123;WIDTH&#125;</span>G\\033[1;48;2;114;114;114;38;2;0;0;0m\\\\/\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>║\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[9;4H╔<span class=\"subst\">$(yes <span class=\"string\">&quot;═&quot;</span>|sed $(($WIDTH-3)</span>)&#x27;q&#x27;|tr -d &#x27;\\n&#x27;)╗&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[7;5H适用的声明和许可条款&quot;</span></span><br><span class=\"line\">WIDTH=$((<span class=\"variable\">$WIDTH</span>-<span class=\"number\">26</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[10;<span class=\"variable\">$&#123;WIDTH&#125;</span>H最后更新日期：2022年12月&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[11;7Htermux-container许可条款:&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[13;7H本程序以Apache2.0协议授权。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[14;7H参见：\\033[4mhttp://www.apache.org/licenses/\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[15;7H您至少需要了解以下几点：&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[17;7H  ● 本程序\\`无担保\\`。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[18;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`损失，作者概不负责。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[19;7H  ● 您应当在遵守当地法律规定的前提下使用本程序。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[20;7H  ● \\`任何\\`由本程序带来的\\`任何形式的\\`法律责任，作者概不负责。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[21;7H  ● 本程序作者保留其著作权，严禁在不遵循其许可的情况下二次分发。&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;HEIGHT&#125;</span>;7H Copyright 2022 Moe-hacker&quot;</span></span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>+<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;HEIGHT&#125;</span>;7H \\033[1;32m[✓]\\033[0m<span class=\"variable\">$&#123;COLOR&#125;</span> 我已阅读并接受许可条款 ， 按回车键同意&quot;</span></span><br><span class=\"line\">HEIGHT=$((<span class=\"variable\">$HEIGHT</span>+<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[<span class=\"variable\">$&#123;HEIGHT&#125;</span>;1H&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">read</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\033[?25h\\033[0m&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"variable\">$PREFIX</span>/share/termux-container/licenses.allowed</span><br><span class=\"line\">clear</span><br></pre></td></tr></table></figure>\n<p>运行效果自行测试。</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n\n"},{"title":"浅谈android设备sysfs接口硬件调用之手电筒，马达，呼吸灯","date":"2023-04-19T05:59:40.000Z","cover":"/img/moe-sysfs.png","top_img":"/img/moe-sysfs.png","_content":"\n迟来的更新喵～\n这篇文章我们来介绍下几个sysfs接口的调用。需要注意的是，由于安卓内核碎片化过于严重，各个厂商之间的代码差异过大，因此直接和内核交互来调用驱动并不是一个通用思路。但是对于某些特定设备的驱动调用却是个简单可行的方法，比如nothing phone的灯带。\n### 手电筒：\n一般是个led类设备，小米10ultra的手电筒被注册到了/sys/class/leds/flashlight/下，当然也有部分设备叫led0或者其他，nothing的手电筒驱动猫猫还没找到，猫猫好笨喵呜～\n目录中有两个文件对我们有用：brightness和max_brightness\nmax_brightness的内容是个固定值，定义了灯的最大亮度。\nbrightness的内容是个无符号整形数值，定义了灯的亮度，向其写入一个不大于max_brightness的合法数值，灯会亮，数越大灯越亮，写入0关闭手电筒。\n什么你说怎么写？直接重定向覆盖进去就行了。\n### 呼吸灯：\n和手电筒差不多，一般在/sys/class/leds/white，当然也有彩色呼吸灯，控制文件和手电筒一样。\n话说现在很少有带呼吸灯的手机了喵～\n#### nothing phone 1的灯带：\n算是个特大号呼吸灯？\n它被注册到了/sys/class/leds/aw210xx_led下\n*_br和video_leds_effect文件是控制灯的，其他文件还没研究也没太大必要研究。\n首先有个文件max_brightness显然是定义亮度的最大值。\n至于*_br可以写个脚本看看到底是干嘛的：\n```sh\nls /sys/class/leds/aw210xx_led/|grep -E \"led_br|leds_br\"|grep -v leds_breath_set|while read i\ndo\nprintf \"\\a\\033[36mcurrent: \\033[32m$i\\033[0m\\n\"\necho 400 > /sys/class/leds/aw210xx_led/$i\nsleep 3s\necho 0 > /sys/class/leds/aw210xx_led/$i\ndone\n```\n然后是video_leds_effect\n感觉这个貌似逻辑比较简单。\n```sh\n#开始闪烁指示灯\necho 1 > /sys/class/leds/aw210xx_led/video_leds_effect\n#关闭\necho 0 > /sys/class/leds/aw210xx_led/video_leds_effect\n```\n（文章不够私货凑）\n### 马达：\n这东西的代码就更加碎片化了。\n部分设备会写入/sys/class/timed_output/vibrator/enable\n部分设备会写入/sys/class/leds/vibrator/duration后写入/sys/class/leds/vibrator/activate\n其中duration设置震动长度，activate激活震动。\n但很多使用线性马达的设备采用的并非统一节点,而是作为input设备，设备信息在/proc/bus/input/devices中，含有haptic字样的。\n以下是对小米10ultra马达的研究：\n查看/proc/bus/input/devices：\n```text\nI: Bus=0000 Vendor=0000 Product=0000 Version=0000\nN: Name=\"aw8697_haptic\"\nP: Phys=\nS: Sysfs=/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3\nU: Uniq=\nH: Handlers=event3 \nB: PROP=0\nB: EV=200001\nB: FF=120070000 0\n```\n进入目录/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3\n进入device目录\n```text\ncas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # ls\nactivate       auto_boost  cont          cont_td      driver     f0        f0_value  input           modalias  osc_cali  prctmode    ram_vbat_comp  seq        uevent        wakeup\nactivate_mode  bst_vol     cont_drv      cont_zc_thr  duration   f0_check  gain      loop            name      osc_save  ram         reg            subsystem  vbat_monitor\nactivate_test  cali        cont_num_brk  custom_wave  effect_id  f0_save   index     lra_resistance  of_node   power     ram_update  rtp            trig       vmax\ncas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # \n```\nactivate激活，duration设置时长，activate_mode设置震动模式，有0,1,3三种，0无法设置时长\n```sh\necho 1 > activate_mode &&echo 10000 > duration&&echo 1 > activate \n```\n想想都爽......想到哪去了啊喂（脸红）\nnothing的驱动至今还没搞明白，就这样吧，下篇见喵（咕咕咕咕咕...........","source":"_posts/moe-sysfs.md","raw":"---\ntitle: 浅谈android设备sysfs接口硬件调用之手电筒，马达，呼吸灯\ndate: 2023-04-19 13:59:40\ntags:\n  - Linux\n  - Android\ncover: /img/moe-sysfs.png\ntop_img: /img/moe-sysfs.png\n---\n\n迟来的更新喵～\n这篇文章我们来介绍下几个sysfs接口的调用。需要注意的是，由于安卓内核碎片化过于严重，各个厂商之间的代码差异过大，因此直接和内核交互来调用驱动并不是一个通用思路。但是对于某些特定设备的驱动调用却是个简单可行的方法，比如nothing phone的灯带。\n### 手电筒：\n一般是个led类设备，小米10ultra的手电筒被注册到了/sys/class/leds/flashlight/下，当然也有部分设备叫led0或者其他，nothing的手电筒驱动猫猫还没找到，猫猫好笨喵呜～\n目录中有两个文件对我们有用：brightness和max_brightness\nmax_brightness的内容是个固定值，定义了灯的最大亮度。\nbrightness的内容是个无符号整形数值，定义了灯的亮度，向其写入一个不大于max_brightness的合法数值，灯会亮，数越大灯越亮，写入0关闭手电筒。\n什么你说怎么写？直接重定向覆盖进去就行了。\n### 呼吸灯：\n和手电筒差不多，一般在/sys/class/leds/white，当然也有彩色呼吸灯，控制文件和手电筒一样。\n话说现在很少有带呼吸灯的手机了喵～\n#### nothing phone 1的灯带：\n算是个特大号呼吸灯？\n它被注册到了/sys/class/leds/aw210xx_led下\n*_br和video_leds_effect文件是控制灯的，其他文件还没研究也没太大必要研究。\n首先有个文件max_brightness显然是定义亮度的最大值。\n至于*_br可以写个脚本看看到底是干嘛的：\n```sh\nls /sys/class/leds/aw210xx_led/|grep -E \"led_br|leds_br\"|grep -v leds_breath_set|while read i\ndo\nprintf \"\\a\\033[36mcurrent: \\033[32m$i\\033[0m\\n\"\necho 400 > /sys/class/leds/aw210xx_led/$i\nsleep 3s\necho 0 > /sys/class/leds/aw210xx_led/$i\ndone\n```\n然后是video_leds_effect\n感觉这个貌似逻辑比较简单。\n```sh\n#开始闪烁指示灯\necho 1 > /sys/class/leds/aw210xx_led/video_leds_effect\n#关闭\necho 0 > /sys/class/leds/aw210xx_led/video_leds_effect\n```\n（文章不够私货凑）\n### 马达：\n这东西的代码就更加碎片化了。\n部分设备会写入/sys/class/timed_output/vibrator/enable\n部分设备会写入/sys/class/leds/vibrator/duration后写入/sys/class/leds/vibrator/activate\n其中duration设置震动长度，activate激活震动。\n但很多使用线性马达的设备采用的并非统一节点,而是作为input设备，设备信息在/proc/bus/input/devices中，含有haptic字样的。\n以下是对小米10ultra马达的研究：\n查看/proc/bus/input/devices：\n```text\nI: Bus=0000 Vendor=0000 Product=0000 Version=0000\nN: Name=\"aw8697_haptic\"\nP: Phys=\nS: Sysfs=/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3\nU: Uniq=\nH: Handlers=event3 \nB: PROP=0\nB: EV=200001\nB: FF=120070000 0\n```\n进入目录/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3\n进入device目录\n```text\ncas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # ls\nactivate       auto_boost  cont          cont_td      driver     f0        f0_value  input           modalias  osc_cali  prctmode    ram_vbat_comp  seq        uevent        wakeup\nactivate_mode  bst_vol     cont_drv      cont_zc_thr  duration   f0_check  gain      loop            name      osc_save  ram         reg            subsystem  vbat_monitor\nactivate_test  cali        cont_num_brk  custom_wave  effect_id  f0_save   index     lra_resistance  of_node   power     ram_update  rtp            trig       vmax\ncas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # \n```\nactivate激活，duration设置时长，activate_mode设置震动模式，有0,1,3三种，0无法设置时长\n```sh\necho 1 > activate_mode &&echo 10000 > duration&&echo 1 > activate \n```\n想想都爽......想到哪去了啊喂（脸红）\nnothing的驱动至今还没搞明白，就这样吧，下篇见喵（咕咕咕咕咕...........","slug":"moe-sysfs","published":1,"updated":"2023-05-16T13:05:30.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clid27xum000cvttwcyjg9tom","content":"<p>迟来的更新喵～<br>这篇文章我们来介绍下几个sysfs接口的调用。需要注意的是，由于安卓内核碎片化过于严重，各个厂商之间的代码差异过大，因此直接和内核交互来调用驱动并不是一个通用思路。但是对于某些特定设备的驱动调用却是个简单可行的方法，比如nothing phone的灯带。</p>\n<h3 id=\"手电筒：\"><a href=\"#手电筒：\" class=\"headerlink\" title=\"手电筒：\"></a>手电筒：</h3><p>一般是个led类设备，小米10ultra的手电筒被注册到了&#x2F;sys&#x2F;class&#x2F;leds&#x2F;flashlight&#x2F;下，当然也有部分设备叫led0或者其他，nothing的手电筒驱动猫猫还没找到，猫猫好笨喵呜～<br>目录中有两个文件对我们有用：brightness和max_brightness<br>max_brightness的内容是个固定值，定义了灯的最大亮度。<br>brightness的内容是个无符号整形数值，定义了灯的亮度，向其写入一个不大于max_brightness的合法数值，灯会亮，数越大灯越亮，写入0关闭手电筒。<br>什么你说怎么写？直接重定向覆盖进去就行了。</p>\n<h3 id=\"呼吸灯：\"><a href=\"#呼吸灯：\" class=\"headerlink\" title=\"呼吸灯：\"></a>呼吸灯：</h3><p>和手电筒差不多，一般在&#x2F;sys&#x2F;class&#x2F;leds&#x2F;white，当然也有彩色呼吸灯，控制文件和手电筒一样。<br>话说现在很少有带呼吸灯的手机了喵～</p>\n<h4 id=\"nothing-phone-1的灯带：\"><a href=\"#nothing-phone-1的灯带：\" class=\"headerlink\" title=\"nothing phone 1的灯带：\"></a>nothing phone 1的灯带：</h4><p>算是个特大号呼吸灯？<br>它被注册到了&#x2F;sys&#x2F;class&#x2F;leds&#x2F;aw210xx_led下<br><em>_br和video_leds_effect文件是控制灯的，其他文件还没研究也没太大必要研究。<br>首先有个文件max_brightness显然是定义亮度的最大值。<br>至于</em>_br可以写个脚本看看到底是干嘛的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /sys/class/leds/aw210xx_led/|grep -E <span class=\"string\">&quot;led_br|leds_br&quot;</span>|grep -v leds_breath_set|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> i</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\a\\033[36mcurrent: \\033[32m<span class=\"variable\">$i</span>\\033[0m\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 400 &gt; /sys/class/leds/aw210xx_led/<span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 3s</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0 &gt; /sys/class/leds/aw210xx_led/<span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>然后是video_leds_effect<br>感觉这个貌似逻辑比较简单。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开始闪烁指示灯</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /sys/class/leds/aw210xx_led/video_leds_effect</span><br><span class=\"line\"><span class=\"comment\">#关闭</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0 &gt; /sys/class/leds/aw210xx_led/video_leds_effect</span><br></pre></td></tr></table></figure>\n<p>（文章不够私货凑）</p>\n<h3 id=\"马达：\"><a href=\"#马达：\" class=\"headerlink\" title=\"马达：\"></a>马达：</h3><p>这东西的代码就更加碎片化了。<br>部分设备会写入&#x2F;sys&#x2F;class&#x2F;timed_output&#x2F;vibrator&#x2F;enable<br>部分设备会写入&#x2F;sys&#x2F;class&#x2F;leds&#x2F;vibrator&#x2F;duration后写入&#x2F;sys&#x2F;class&#x2F;leds&#x2F;vibrator&#x2F;activate<br>其中duration设置震动长度，activate激活震动。<br>但很多使用线性马达的设备采用的并非统一节点,而是作为input设备，设备信息在&#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices中，含有haptic字样的。<br>以下是对小米10ultra马达的研究：<br>查看&#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I: Bus=0000 Vendor=0000 Product=0000 Version=0000</span><br><span class=\"line\">N: Name=&quot;aw8697_haptic&quot;</span><br><span class=\"line\">P: Phys=</span><br><span class=\"line\">S: Sysfs=/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3</span><br><span class=\"line\">U: Uniq=</span><br><span class=\"line\">H: Handlers=event3 </span><br><span class=\"line\">B: PROP=0</span><br><span class=\"line\">B: EV=200001</span><br><span class=\"line\">B: FF=120070000 0</span><br></pre></td></tr></table></figure>\n<p>进入目录&#x2F;sys&#x2F;devices&#x2F;platform&#x2F;soc&#x2F;a8c000.i2c&#x2F;i2c-2&#x2F;2-005a&#x2F;input&#x2F;input3<br>进入device目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # ls</span><br><span class=\"line\">activate       auto_boost  cont          cont_td      driver     f0        f0_value  input           modalias  osc_cali  prctmode    ram_vbat_comp  seq        uevent        wakeup</span><br><span class=\"line\">activate_mode  bst_vol     cont_drv      cont_zc_thr  duration   f0_check  gain      loop            name      osc_save  ram         reg            subsystem  vbat_monitor</span><br><span class=\"line\">activate_test  cali        cont_num_brk  custom_wave  effect_id  f0_save   index     lra_resistance  of_node   power     ram_update  rtp            trig       vmax</span><br><span class=\"line\">cas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # </span><br></pre></td></tr></table></figure>\n<p>activate激活，duration设置时长，activate_mode设置震动模式，有0,1,3三种，0无法设置时长</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; activate_mode &amp;&amp;<span class=\"built_in\">echo</span> 10000 &gt; duration&amp;&amp;<span class=\"built_in\">echo</span> 1 &gt; activate </span><br></pre></td></tr></table></figure>\n<p>想想都爽……想到哪去了啊喂（脸红）<br>nothing的驱动至今还没搞明白，就这样吧，下篇见喵（咕咕咕咕咕………..</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover_type":"img","excerpt":"","more":"<p>迟来的更新喵～<br>这篇文章我们来介绍下几个sysfs接口的调用。需要注意的是，由于安卓内核碎片化过于严重，各个厂商之间的代码差异过大，因此直接和内核交互来调用驱动并不是一个通用思路。但是对于某些特定设备的驱动调用却是个简单可行的方法，比如nothing phone的灯带。</p>\n<h3 id=\"手电筒：\"><a href=\"#手电筒：\" class=\"headerlink\" title=\"手电筒：\"></a>手电筒：</h3><p>一般是个led类设备，小米10ultra的手电筒被注册到了&#x2F;sys&#x2F;class&#x2F;leds&#x2F;flashlight&#x2F;下，当然也有部分设备叫led0或者其他，nothing的手电筒驱动猫猫还没找到，猫猫好笨喵呜～<br>目录中有两个文件对我们有用：brightness和max_brightness<br>max_brightness的内容是个固定值，定义了灯的最大亮度。<br>brightness的内容是个无符号整形数值，定义了灯的亮度，向其写入一个不大于max_brightness的合法数值，灯会亮，数越大灯越亮，写入0关闭手电筒。<br>什么你说怎么写？直接重定向覆盖进去就行了。</p>\n<h3 id=\"呼吸灯：\"><a href=\"#呼吸灯：\" class=\"headerlink\" title=\"呼吸灯：\"></a>呼吸灯：</h3><p>和手电筒差不多，一般在&#x2F;sys&#x2F;class&#x2F;leds&#x2F;white，当然也有彩色呼吸灯，控制文件和手电筒一样。<br>话说现在很少有带呼吸灯的手机了喵～</p>\n<h4 id=\"nothing-phone-1的灯带：\"><a href=\"#nothing-phone-1的灯带：\" class=\"headerlink\" title=\"nothing phone 1的灯带：\"></a>nothing phone 1的灯带：</h4><p>算是个特大号呼吸灯？<br>它被注册到了&#x2F;sys&#x2F;class&#x2F;leds&#x2F;aw210xx_led下<br><em>_br和video_leds_effect文件是控制灯的，其他文件还没研究也没太大必要研究。<br>首先有个文件max_brightness显然是定义亮度的最大值。<br>至于</em>_br可以写个脚本看看到底是干嘛的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /sys/class/leds/aw210xx_led/|grep -E <span class=\"string\">&quot;led_br|leds_br&quot;</span>|grep -v leds_breath_set|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> i</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\a\\033[36mcurrent: \\033[32m<span class=\"variable\">$i</span>\\033[0m\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 400 &gt; /sys/class/leds/aw210xx_led/<span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 3s</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0 &gt; /sys/class/leds/aw210xx_led/<span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>然后是video_leds_effect<br>感觉这个貌似逻辑比较简单。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开始闪烁指示灯</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /sys/class/leds/aw210xx_led/video_leds_effect</span><br><span class=\"line\"><span class=\"comment\">#关闭</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0 &gt; /sys/class/leds/aw210xx_led/video_leds_effect</span><br></pre></td></tr></table></figure>\n<p>（文章不够私货凑）</p>\n<h3 id=\"马达：\"><a href=\"#马达：\" class=\"headerlink\" title=\"马达：\"></a>马达：</h3><p>这东西的代码就更加碎片化了。<br>部分设备会写入&#x2F;sys&#x2F;class&#x2F;timed_output&#x2F;vibrator&#x2F;enable<br>部分设备会写入&#x2F;sys&#x2F;class&#x2F;leds&#x2F;vibrator&#x2F;duration后写入&#x2F;sys&#x2F;class&#x2F;leds&#x2F;vibrator&#x2F;activate<br>其中duration设置震动长度，activate激活震动。<br>但很多使用线性马达的设备采用的并非统一节点,而是作为input设备，设备信息在&#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices中，含有haptic字样的。<br>以下是对小米10ultra马达的研究：<br>查看&#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I: Bus=0000 Vendor=0000 Product=0000 Version=0000</span><br><span class=\"line\">N: Name=&quot;aw8697_haptic&quot;</span><br><span class=\"line\">P: Phys=</span><br><span class=\"line\">S: Sysfs=/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3</span><br><span class=\"line\">U: Uniq=</span><br><span class=\"line\">H: Handlers=event3 </span><br><span class=\"line\">B: PROP=0</span><br><span class=\"line\">B: EV=200001</span><br><span class=\"line\">B: FF=120070000 0</span><br></pre></td></tr></table></figure>\n<p>进入目录&#x2F;sys&#x2F;devices&#x2F;platform&#x2F;soc&#x2F;a8c000.i2c&#x2F;i2c-2&#x2F;2-005a&#x2F;input&#x2F;input3<br>进入device目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # ls</span><br><span class=\"line\">activate       auto_boost  cont          cont_td      driver     f0        f0_value  input           modalias  osc_cali  prctmode    ram_vbat_comp  seq        uevent        wakeup</span><br><span class=\"line\">activate_mode  bst_vol     cont_drv      cont_zc_thr  duration   f0_check  gain      loop            name      osc_save  ram         reg            subsystem  vbat_monitor</span><br><span class=\"line\">activate_test  cali        cont_num_brk  custom_wave  effect_id  f0_save   index     lra_resistance  of_node   power     ram_update  rtp            trig       vmax</span><br><span class=\"line\">cas:/sys/devices/platform/soc/a8c000.i2c/i2c-2/2-005a/input/input3/device # </span><br></pre></td></tr></table></figure>\n<p>activate激活，duration设置时长，activate_mode设置震动模式，有0,1,3三种，0无法设置时长</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; activate_mode &amp;&amp;<span class=\"built_in\">echo</span> 10000 &gt; duration&amp;&amp;<span class=\"built_in\">echo</span> 1 &gt; activate </span><br></pre></td></tr></table></figure>\n<p>想想都爽……想到哪去了啊喂（脸红）<br>nothing的驱动至今还没搞明白，就这样吧，下篇见喵（咕咕咕咕咕………..</p>\n"},{"title":"termux配置文件分享","date":"2022-12-04T06:28:47.000Z","cover":"/img/termux-motd.jpg","top_img":"/img/termux-motd.jpg","_content":"### termux版本：\n这里猫猫比较喜欢termux-monet，带有monet取色支持和背景自定义。\n链接：[HardcodedCat/termux-monet](https://github.com/HardcodedCat/termux-monet)\n### 欢迎信息：\n原版：[Generator/termux-motd](https://github.com/Generator/termux-motd)           \n修改版：[Moe-hacker/termux-motd](https://github.com/Moe-hacker/termux-motd)\n修改内容不介绍了，效果见仓库。\n```\ngit clone https://github.com/Moe-hacker/termux-motd ~/.motd\necho ~/.motd/init.sh >> ~/.bashrc\necho ~/.motd/init.sh >> ~/.zshrc\n```\n如果手机“恰好”有docker支持：\n```\nmv ~/.motd/26-docker.disabled ~/.motd/26-docker\n```\n自启动docker并显示信息。\n### 配色修改：\n贴出猫猫的配色：\n```\nbackground:     #1E1E2E\nforeground:     #CDD6F4\ncursor:         #A6E3A1\ncolor0:         #45475A\ncolor8:         #585B70\ncolor1:         #F38BA8\ncolor9:         #F38BA8\ncolor2:         #A6E3A1\ncolor10:        #A6E3A1\ncolor3:         #F9E2AF\ncolor11:        #F9E2AF\ncolor4:         #89B4FA\ncolor12:        #89B4FA\ncolor5:         #F5C2E7\ncolor13:        #F5C2E7\ncolor6:         #94E2D5\ncolor14:        #94E2D5\ncolor7:         #BAC2DE\ncolor15:        #A6ADC8\n```\n来自catppuccin mocha，更改光标为淡绿色。\n### 配置修改：\n键盘扩展(来自tmoe)：\n```\nextra-keys = [ \\\n    ['ESC','<','>','BACKSLASH','=','^','$','()','{}','[]','ENTER'], \\\n    ['TAB','&',';','/','~','%','*','HOME','UP','END','PGUP'], \\\n    ['CTRL','FN','ALT','|','-','+','QUOTE','LEFT','DOWN','RIGHT','PGDN'] \\\n    ]\n```\n其他配置：\n```\ndisable-terminal-session-change-toast = true\nvolume-keys = volume\nuse-fullscreen-workaround = true\nterminal-cursor-style = underline\nextra-keys-style = arrows-all\nextra-keys-text-all-caps = true\nuse-black-ui = false\ndisable-hardware-keyboard-shortcuts = true\nbell-character = vibrate\nenforce-char-based-input = true\n```\n### signal 9修复：\n咱有特权就直接动用就好啦！\n```\nsu -c /system/bin/device_config set_sync_disabled_for_tests persistent\nsu -c /system/bin/device_config put activity_manager max_phantom_processes 2147483647\nsu -c setprop persist.sys.fflag.override.settings_enable_monitor_phantom_procs false\n```\n话说安卓系统连本猫的root进程都敢杀可真够狂的喵！\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","source":"_posts/moe-termux.md","raw":"---\ntitle: termux配置文件分享\ndate: 2022-12-04 14:28:47\ntags:\n  - Linux\n  - Termux\ncover: /img/termux-motd.jpg\ntop_img: /img/termux-motd.jpg\n---\n### termux版本：\n这里猫猫比较喜欢termux-monet，带有monet取色支持和背景自定义。\n链接：[HardcodedCat/termux-monet](https://github.com/HardcodedCat/termux-monet)\n### 欢迎信息：\n原版：[Generator/termux-motd](https://github.com/Generator/termux-motd)           \n修改版：[Moe-hacker/termux-motd](https://github.com/Moe-hacker/termux-motd)\n修改内容不介绍了，效果见仓库。\n```\ngit clone https://github.com/Moe-hacker/termux-motd ~/.motd\necho ~/.motd/init.sh >> ~/.bashrc\necho ~/.motd/init.sh >> ~/.zshrc\n```\n如果手机“恰好”有docker支持：\n```\nmv ~/.motd/26-docker.disabled ~/.motd/26-docker\n```\n自启动docker并显示信息。\n### 配色修改：\n贴出猫猫的配色：\n```\nbackground:     #1E1E2E\nforeground:     #CDD6F4\ncursor:         #A6E3A1\ncolor0:         #45475A\ncolor8:         #585B70\ncolor1:         #F38BA8\ncolor9:         #F38BA8\ncolor2:         #A6E3A1\ncolor10:        #A6E3A1\ncolor3:         #F9E2AF\ncolor11:        #F9E2AF\ncolor4:         #89B4FA\ncolor12:        #89B4FA\ncolor5:         #F5C2E7\ncolor13:        #F5C2E7\ncolor6:         #94E2D5\ncolor14:        #94E2D5\ncolor7:         #BAC2DE\ncolor15:        #A6ADC8\n```\n来自catppuccin mocha，更改光标为淡绿色。\n### 配置修改：\n键盘扩展(来自tmoe)：\n```\nextra-keys = [ \\\n    ['ESC','<','>','BACKSLASH','=','^','$','()','{}','[]','ENTER'], \\\n    ['TAB','&',';','/','~','%','*','HOME','UP','END','PGUP'], \\\n    ['CTRL','FN','ALT','|','-','+','QUOTE','LEFT','DOWN','RIGHT','PGDN'] \\\n    ]\n```\n其他配置：\n```\ndisable-terminal-session-change-toast = true\nvolume-keys = volume\nuse-fullscreen-workaround = true\nterminal-cursor-style = underline\nextra-keys-style = arrows-all\nextra-keys-text-all-caps = true\nuse-black-ui = false\ndisable-hardware-keyboard-shortcuts = true\nbell-character = vibrate\nenforce-char-based-input = true\n```\n### signal 9修复：\n咱有特权就直接动用就好啦！\n```\nsu -c /system/bin/device_config set_sync_disabled_for_tests persistent\nsu -c /system/bin/device_config put activity_manager max_phantom_processes 2147483647\nsu -c setprop persist.sys.fflag.override.settings_enable_monitor_phantom_procs false\n```\n话说安卓系统连本猫的root进程都敢杀可真够狂的喵！\n\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","slug":"moe-termux","published":1,"updated":"2023-05-16T13:05:30.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clid27xuq000evttwgy43fs9q","content":"<h3 id=\"termux版本：\"><a href=\"#termux版本：\" class=\"headerlink\" title=\"termux版本：\"></a>termux版本：</h3><p>这里猫猫比较喜欢termux-monet，带有monet取色支持和背景自定义。<br>链接：<a href=\"https://github.com/HardcodedCat/termux-monet\">HardcodedCat&#x2F;termux-monet</a></p>\n<h3 id=\"欢迎信息：\"><a href=\"#欢迎信息：\" class=\"headerlink\" title=\"欢迎信息：\"></a>欢迎信息：</h3><p>原版：<a href=\"https://github.com/Generator/termux-motd\">Generator&#x2F;termux-motd</a><br>修改版：<a href=\"https://github.com/Moe-hacker/termux-motd\">Moe-hacker&#x2F;termux-motd</a><br>修改内容不介绍了，效果见仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Moe-hacker/termux-motd ~/.motd</span><br><span class=\"line\">echo ~/.motd/init.sh &gt;&gt; ~/.bashrc</span><br><span class=\"line\">echo ~/.motd/init.sh &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>如果手机“恰好”有docker支持：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv ~/.motd/26-docker.disabled ~/.motd/26-docker</span><br></pre></td></tr></table></figure>\n<p>自启动docker并显示信息。</p>\n<h3 id=\"配色修改：\"><a href=\"#配色修改：\" class=\"headerlink\" title=\"配色修改：\"></a>配色修改：</h3><p>贴出猫猫的配色：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:     #1E1E2E</span><br><span class=\"line\">foreground:     #CDD6F4</span><br><span class=\"line\">cursor:         #A6E3A1</span><br><span class=\"line\">color0:         #45475A</span><br><span class=\"line\">color8:         #585B70</span><br><span class=\"line\">color1:         #F38BA8</span><br><span class=\"line\">color9:         #F38BA8</span><br><span class=\"line\">color2:         #A6E3A1</span><br><span class=\"line\">color10:        #A6E3A1</span><br><span class=\"line\">color3:         #F9E2AF</span><br><span class=\"line\">color11:        #F9E2AF</span><br><span class=\"line\">color4:         #89B4FA</span><br><span class=\"line\">color12:        #89B4FA</span><br><span class=\"line\">color5:         #F5C2E7</span><br><span class=\"line\">color13:        #F5C2E7</span><br><span class=\"line\">color6:         #94E2D5</span><br><span class=\"line\">color14:        #94E2D5</span><br><span class=\"line\">color7:         #BAC2DE</span><br><span class=\"line\">color15:        #A6ADC8</span><br></pre></td></tr></table></figure>\n<p>来自catppuccin mocha，更改光标为淡绿色。</p>\n<h3 id=\"配置修改：\"><a href=\"#配置修改：\" class=\"headerlink\" title=\"配置修改：\"></a>配置修改：</h3><p>键盘扩展(来自tmoe)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extra-keys = [ \\</span><br><span class=\"line\">    [&#x27;ESC&#x27;,&#x27;&lt;&#x27;,&#x27;&gt;&#x27;,&#x27;BACKSLASH&#x27;,&#x27;=&#x27;,&#x27;^&#x27;,&#x27;$&#x27;,&#x27;()&#x27;,&#x27;&#123;&#125;&#x27;,&#x27;[]&#x27;,&#x27;ENTER&#x27;], \\</span><br><span class=\"line\">    [&#x27;TAB&#x27;,&#x27;&amp;&#x27;,&#x27;;&#x27;,&#x27;/&#x27;,&#x27;~&#x27;,&#x27;%&#x27;,&#x27;*&#x27;,&#x27;HOME&#x27;,&#x27;UP&#x27;,&#x27;END&#x27;,&#x27;PGUP&#x27;], \\</span><br><span class=\"line\">    [&#x27;CTRL&#x27;,&#x27;FN&#x27;,&#x27;ALT&#x27;,&#x27;|&#x27;,&#x27;-&#x27;,&#x27;+&#x27;,&#x27;QUOTE&#x27;,&#x27;LEFT&#x27;,&#x27;DOWN&#x27;,&#x27;RIGHT&#x27;,&#x27;PGDN&#x27;] \\</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p>其他配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disable-terminal-session-change-toast = true</span><br><span class=\"line\">volume-keys = volume</span><br><span class=\"line\">use-fullscreen-workaround = true</span><br><span class=\"line\">terminal-cursor-style = underline</span><br><span class=\"line\">extra-keys-style = arrows-all</span><br><span class=\"line\">extra-keys-text-all-caps = true</span><br><span class=\"line\">use-black-ui = false</span><br><span class=\"line\">disable-hardware-keyboard-shortcuts = true</span><br><span class=\"line\">bell-character = vibrate</span><br><span class=\"line\">enforce-char-based-input = true</span><br></pre></td></tr></table></figure>\n<h3 id=\"signal-9修复：\"><a href=\"#signal-9修复：\" class=\"headerlink\" title=\"signal 9修复：\"></a>signal 9修复：</h3><p>咱有特权就直接动用就好啦！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -c /system/bin/device_config set_sync_disabled_for_tests persistent</span><br><span class=\"line\">su -c /system/bin/device_config put activity_manager max_phantom_processes 2147483647</span><br><span class=\"line\">su -c setprop persist.sys.fflag.override.settings_enable_monitor_phantom_procs false</span><br></pre></td></tr></table></figure>\n<p>话说安卓系统连本猫的root进程都敢杀可真够狂的喵！</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"排名不分先后，欢迎互关喵～","link_list":[{"name":"Molyuu","link":"https://blog.molyuu.xyz","avatar":"/img/face-molyuu.jpg","descr":"Molyuu的博客"},{"name":"Kevin Williams","link":"https://www.utermux.dev","avatar":"/img/face-kevin_williams.jpg","descr":"termux开发组成员"},{"name":"SuInk","link":"https://suink.cn","avatar":"/img/face-suink.jpg","descr":"懒得要死的作者(貌似比我还勤快点)"},{"name":"Trrrrw","link":"https://www.trrw.tech","avatar":"/img/face-Trrrrw.jpg","descr":"人与人的羁绊是真正的力量之源"},{"name":"dpkg123","link":"https://dpkg123.site/","avatar":"https://dpkg123.site/favicon.jpg","descr":"路漫漫其修远兮，吾将上下而求索"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"termux版本：\"><a href=\"#termux版本：\" class=\"headerlink\" title=\"termux版本：\"></a>termux版本：</h3><p>这里猫猫比较喜欢termux-monet，带有monet取色支持和背景自定义。<br>链接：<a href=\"https://github.com/HardcodedCat/termux-monet\">HardcodedCat&#x2F;termux-monet</a></p>\n<h3 id=\"欢迎信息：\"><a href=\"#欢迎信息：\" class=\"headerlink\" title=\"欢迎信息：\"></a>欢迎信息：</h3><p>原版：<a href=\"https://github.com/Generator/termux-motd\">Generator&#x2F;termux-motd</a><br>修改版：<a href=\"https://github.com/Moe-hacker/termux-motd\">Moe-hacker&#x2F;termux-motd</a><br>修改内容不介绍了，效果见仓库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Moe-hacker/termux-motd ~/.motd</span><br><span class=\"line\">echo ~/.motd/init.sh &gt;&gt; ~/.bashrc</span><br><span class=\"line\">echo ~/.motd/init.sh &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>如果手机“恰好”有docker支持：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv ~/.motd/26-docker.disabled ~/.motd/26-docker</span><br></pre></td></tr></table></figure>\n<p>自启动docker并显示信息。</p>\n<h3 id=\"配色修改：\"><a href=\"#配色修改：\" class=\"headerlink\" title=\"配色修改：\"></a>配色修改：</h3><p>贴出猫猫的配色：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background:     #1E1E2E</span><br><span class=\"line\">foreground:     #CDD6F4</span><br><span class=\"line\">cursor:         #A6E3A1</span><br><span class=\"line\">color0:         #45475A</span><br><span class=\"line\">color8:         #585B70</span><br><span class=\"line\">color1:         #F38BA8</span><br><span class=\"line\">color9:         #F38BA8</span><br><span class=\"line\">color2:         #A6E3A1</span><br><span class=\"line\">color10:        #A6E3A1</span><br><span class=\"line\">color3:         #F9E2AF</span><br><span class=\"line\">color11:        #F9E2AF</span><br><span class=\"line\">color4:         #89B4FA</span><br><span class=\"line\">color12:        #89B4FA</span><br><span class=\"line\">color5:         #F5C2E7</span><br><span class=\"line\">color13:        #F5C2E7</span><br><span class=\"line\">color6:         #94E2D5</span><br><span class=\"line\">color14:        #94E2D5</span><br><span class=\"line\">color7:         #BAC2DE</span><br><span class=\"line\">color15:        #A6ADC8</span><br></pre></td></tr></table></figure>\n<p>来自catppuccin mocha，更改光标为淡绿色。</p>\n<h3 id=\"配置修改：\"><a href=\"#配置修改：\" class=\"headerlink\" title=\"配置修改：\"></a>配置修改：</h3><p>键盘扩展(来自tmoe)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extra-keys = [ \\</span><br><span class=\"line\">    [&#x27;ESC&#x27;,&#x27;&lt;&#x27;,&#x27;&gt;&#x27;,&#x27;BACKSLASH&#x27;,&#x27;=&#x27;,&#x27;^&#x27;,&#x27;$&#x27;,&#x27;()&#x27;,&#x27;&#123;&#125;&#x27;,&#x27;[]&#x27;,&#x27;ENTER&#x27;], \\</span><br><span class=\"line\">    [&#x27;TAB&#x27;,&#x27;&amp;&#x27;,&#x27;;&#x27;,&#x27;/&#x27;,&#x27;~&#x27;,&#x27;%&#x27;,&#x27;*&#x27;,&#x27;HOME&#x27;,&#x27;UP&#x27;,&#x27;END&#x27;,&#x27;PGUP&#x27;], \\</span><br><span class=\"line\">    [&#x27;CTRL&#x27;,&#x27;FN&#x27;,&#x27;ALT&#x27;,&#x27;|&#x27;,&#x27;-&#x27;,&#x27;+&#x27;,&#x27;QUOTE&#x27;,&#x27;LEFT&#x27;,&#x27;DOWN&#x27;,&#x27;RIGHT&#x27;,&#x27;PGDN&#x27;] \\</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p>其他配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disable-terminal-session-change-toast = true</span><br><span class=\"line\">volume-keys = volume</span><br><span class=\"line\">use-fullscreen-workaround = true</span><br><span class=\"line\">terminal-cursor-style = underline</span><br><span class=\"line\">extra-keys-style = arrows-all</span><br><span class=\"line\">extra-keys-text-all-caps = true</span><br><span class=\"line\">use-black-ui = false</span><br><span class=\"line\">disable-hardware-keyboard-shortcuts = true</span><br><span class=\"line\">bell-character = vibrate</span><br><span class=\"line\">enforce-char-based-input = true</span><br></pre></td></tr></table></figure>\n<h3 id=\"signal-9修复：\"><a href=\"#signal-9修复：\" class=\"headerlink\" title=\"signal 9修复：\"></a>signal 9修复：</h3><p>咱有特权就直接动用就好啦！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su -c /system/bin/device_config set_sync_disabled_for_tests persistent</span><br><span class=\"line\">su -c /system/bin/device_config put activity_manager max_phantom_processes 2147483647</span><br><span class=\"line\">su -c setprop persist.sys.fflag.override.settings_enable_monitor_phantom_procs false</span><br></pre></td></tr></table></figure>\n<p>话说安卓系统连本猫的root进程都敢杀可真够狂的喵！</p>\n<p align=\"center\">本文著作权归Moe-hacker所有</p>\n<p align=\"center\">copyright (©) 2022 Moe-hacker</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clid27xu10001vttw41678q2r","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xur000fvttw9a44amp0"},{"post_id":"clid27xu10001vttw41678q2r","tag_id":"clid27xui000avttw94aqdbf1","_id":"clid27xur000gvttw78ix8bqj"},{"post_id":"clid27xu80003vttwha72cgpo","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xut000kvttw4p6ibz1u"},{"post_id":"clid27xu80003vttwha72cgpo","tag_id":"clid27xur000hvttw4kbr9z3f","_id":"clid27xuu000lvttwg8yvahj7"},{"post_id":"clid27xu80003vttwha72cgpo","tag_id":"clid27xus000ivttwfx846u1p","_id":"clid27xuu000nvttwbdvw79yp"},{"post_id":"clid27xud0006vttwhqyv8rww","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xuw000qvttw41vjfp8x"},{"post_id":"clid27xud0006vttwhqyv8rww","tag_id":"clid27xus000ivttwfx846u1p","_id":"clid27xuw000rvttwgz5ldrlk"},{"post_id":"clid27xud0006vttwhqyv8rww","tag_id":"clid27xuu000ovttw9mkxfeyv","_id":"clid27xuw000tvttwep6nfpaw"},{"post_id":"clid27xuf0008vttwf7e451lo","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xux000wvttwc387exlz"},{"post_id":"clid27xuf0008vttwf7e451lo","tag_id":"clid27xuv000pvttwgzqt52xl","_id":"clid27xux000xvttwa4cn87ju"},{"post_id":"clid27xuf0008vttwf7e451lo","tag_id":"clid27xuu000ovttw9mkxfeyv","_id":"clid27xuy000zvttw3rrw5gm8"},{"post_id":"clid27xuf0008vttwf7e451lo","tag_id":"clid27xus000ivttwfx846u1p","_id":"clid27xuy0010vttw1ww6c89o"},{"post_id":"clid27xuh0009vttw62ina8qc","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xuy0012vttw4nr0a0ak"},{"post_id":"clid27xuh0009vttw62ina8qc","tag_id":"clid27xux000vvttw1guj6hyi","_id":"clid27xuy0013vttw6z4hb4t6"},{"post_id":"clid27xuh0009vttw62ina8qc","tag_id":"clid27xux000yvttw362kdjrq","_id":"clid27xuz0015vttw1q94cas5"},{"post_id":"clid27xuk000bvttwb9g08i7o","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xuz0017vttwdb6s5w7r"},{"post_id":"clid27xuk000bvttwb9g08i7o","tag_id":"clid27xuy0011vttw9hfq31n1","_id":"clid27xuz0018vttwdu402x1c"},{"post_id":"clid27xuk000bvttwb9g08i7o","tag_id":"clid27xuv000pvttwgzqt52xl","_id":"clid27xv0001avttwhu359o4g"},{"post_id":"clid27xum000cvttwcyjg9tom","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xv0001bvttw55x5dddc"},{"post_id":"clid27xum000cvttwcyjg9tom","tag_id":"clid27xuz0016vttwh7n2eum1","_id":"clid27xv0001cvttw3h0x4sdo"},{"post_id":"clid27xuq000evttwgy43fs9q","tag_id":"clid27xua0004vttw5ec7g76h","_id":"clid27xv0001dvttwcjb22nau"},{"post_id":"clid27xuq000evttwgy43fs9q","tag_id":"clid27xuv000pvttwgzqt52xl","_id":"clid27xv0001evttw8duxffbr"}],"Tag":[{"name":"Linux","_id":"clid27xua0004vttw5ec7g76h"},{"name":"C语言","_id":"clid27xui000avttw94aqdbf1"},{"name":"C","_id":"clid27xur000hvttw4kbr9z3f"},{"name":"container","_id":"clid27xus000ivttwfx846u1p"},{"name":"Docker","_id":"clid27xuu000ovttw9mkxfeyv"},{"name":"Termux","_id":"clid27xuv000pvttwgzqt52xl"},{"name":"hexo","_id":"clid27xux000vvttw1guj6hyi"},{"name":"blog","_id":"clid27xux000yvttw362kdjrq"},{"name":"Shell","_id":"clid27xuy0011vttw9hfq31n1"},{"name":"Android","_id":"clid27xuz0016vttwh7n2eum1"}]}}